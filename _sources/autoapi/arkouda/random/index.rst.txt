arkouda.random
==============

.. py:module:: arkouda.random


Classes
-------

.. autoapisummary::

   arkouda.random.Generator


Functions
---------

.. autoapisummary::

   arkouda.random.randint
   arkouda.random.standard_normal
   arkouda.random.uniform


Package Contents
----------------

.. py:class:: Generator(name_dict=None, seed=None, state=1)

   ``Generator`` exposes a number of methods for generating random
   numbers drawn from a variety of probability distributions. In addition to
   the distribution-specific arguments, each method takes a keyword argument
   `size` that defaults to ``None``. If `size` is ``None``, then a single
   value is generated and returned. If `size` is an integer, then a 1-D
   array filled with generated values is returned.

   :param seed: Seed to allow for reproducible random number generation.
   :type seed: int
   :param name_dict: Dictionary mapping the server side names associated with
                     the generators for each dtype.
   :type name_dict: dict
   :param state: The current state we are in the random number generation stream.
                 This information makes it so calls to any dtype generator
                 function affects the stream of random numbers for the other generators.
                 This mimics the behavior we see in numpy
   :type state: int

   .. seealso::

      :obj:`default_rng`
          Recommended constructor for `Generator`.


   .. py:method:: choice(a, size=None, replace=True, p=None)

      Generates a randomly sample from a.

      :param a: If a is an integer, randomly sample from ak.arange(a).
                If a is a pdarray, randomly sample from a.
      :type a: int or pdarray
      :param size: Number of elements to be sampled
      :type size: int, optional
      :param replace: If True, sample with replacement. Otherwise sample without replacement.
                      Defaults to True
      :type replace: bool, optional
      :param p: p is the probabilities or weights associated with each element of a
      :type p: pdarray, optional

      :returns: A pdarray containing the sampled values or a single random value if size not provided.
      :rtype: pdarray, numeric_scalar



   .. py:method:: exponential(scale=1.0, size=None, method='zig')

      Draw samples from an exponential distribution.

      Its probability density function is

      .. math::
          f(x; \frac{1}{\beta}) = \frac{1}{\beta} \exp(-\frac{x}{\beta}),

      for ``x > 0`` and 0 elsewhere. :math:`\beta` is the scale parameter,
      which is the inverse of the rate parameter :math:`\lambda = 1/\beta`.
      The rate parameter is an alternative, widely used parameterization
      of the exponential distribution.

      :param scale: The scale parameter, :math:`\beta = 1/\lambda`. Must be
                    non-negative. An array must have the same size as the size argument.
      :type scale: float or pdarray
      :param size: Output shape. Default is None, in which case a single value is returned.
      :type size: numeric_scalars, optional
      :param method: Either 'inv' or 'zig'. 'inv' uses the default inverse CDF method.
                     'zig' uses the Ziggurat method.
      :type method: str, optional

      :returns: Drawn samples from the parameterized exponential distribution.
      :rtype: pdarray



   .. py:method:: integers(low, high=None, size=None, dtype=akint64, endpoint=False)

      Return random integers from low (inclusive) to high (exclusive),
      or if endpoint=True, low (inclusive) to high (inclusive).

      Return random integers from the “discrete uniform” distribution of the specified dtype.
      If high is None (the default), then results are from 0 to low.

      :param low: Lowest (signed) integers to be drawn from the distribution (unless high=None,
                  in which case this parameter is 0 and this value is used for high).
      :type low: numeric_scalars
      :param high: If provided, one above the largest (signed) integer to be drawn from the distribution
                   (see above for behavior if high=None)
      :type high: numeric_scalars
      :param size: Output shape. Default is None, in which case a single value is returned.
      :type size: numeric_scalars
      :param dtype: Desired dtype of the result. The default value is ak.int64.
      :type dtype: dtype, optional
      :param endpoint: If true, sample from the interval [low, high] instead of the default [low, high).
                       Defaults to False
      :type endpoint: bool, optional

      :returns: Values drawn uniformly from the specified range having the desired dtype,
                or a single such random int if size not provided.
      :rtype: pdarray, numeric_scalar

      .. rubric:: Examples

      >>> rng = ak.random.default_rng()
      >>> rng.integers(5, 20, 10)
      array([15, 13, 10, 8, 5, 18, 16, 14, 7, 13])  # random
      >>> rng.integers(5, size=10)
      array([2, 4, 0, 0, 0, 3, 1, 5, 5, 3])  # random



   .. py:method:: normal(loc=0.0, scale=1.0, size=None)

      Draw samples from a normal (Gaussian) distribution

      :param loc: Mean of the distribution. Default of 0.
      :type loc: float or pdarray of floats, optional
      :param scale: Standard deviation of the distribution. Must be non-negative. Default of 1.
      :type scale: float or pdarray of floats, optional
      :param size: Output shape. Default is None, in which case a single value is returned.
      :type size: numeric_scalars, optional

      .. rubric:: Notes

      The probability density for the Gaussian distribution is:

      .. math::
         p(x) = \frac{1}{\sqrt{2\pi \sigma^2}} e^{-\frac{(x-\mu)^2}{2\sigma^2}}

      where :math:`\mu` is the mean and :math:`\sigma` the standard deviation.
      The square of the standard deviation, :math:`\sigma^2`, is called the variance.

      :returns: Pdarray of floats (unless size=None, in which case a single float is returned).
      :rtype: pdarray

      .. seealso:: :obj:`standard_normal`, :obj:`uniform`

      .. rubric:: Examples

      >>> ak.random.default_rng(17).normal(3, 2.5, 10)
      array([2.3673425816523577 4.0532529435624589 2.0598322696795694])



   .. py:method:: permutation(x)

      Randomly permute a sequence, or return a permuted range.

      :param x: If x is an integer, randomly permute ak.arange(x). If x is an array,
                make a copy and shuffle the elements randomly.
      :type x: int or pdarray

      :returns: pdarray of permuted elements
      :rtype: pdarray



   .. py:method:: poisson(lam=1.0, size=None)

      Draw samples from a Poisson distribution.

      The Poisson distribution is the limit of the binomial distribution for large N.

      :param lam: Expected number of events occurring in a fixed-time interval, must be >= 0.
                  An array must have the same size as the size argument.
      :type lam: float or pdarray
      :param size: Output shape. Default is None, in which case a single value is returned.
      :type size: numeric_scalars, optional

      .. rubric:: Notes

      The probability mass function for the Poisson distribution is:

      .. math::
         f(k; \lambda) = \frac{\lambda^k e^{-\lambda}}{k!}

      For events with an expected separation :math:`\lambda`, the Poisson distribution
      :math:`f(k; \lambda)` describes the probability of :math:`k` events occurring
      within the observed interval :math:`\lambda`

      :returns: Pdarray of ints (unless size=None, in which case a single int is returned).
      :rtype: pdarray

      .. rubric:: Examples

      >>> rng = ak.random.default_rng()
      >>> rng.poisson(lam=3, size=5)
      array([5 3 2 2 3])  # random



   .. py:method:: random(size=None)

      Return random floats in the half-open interval [0.0, 1.0).

      Results are from the uniform distribution over the stated interval.

      :param size: Output shape. Default is None, in which case a single value is returned.
      :type size: numeric_scalars, optional

      :returns: Pdarray of random floats (unless size=None, in which case a single float is returned).
      :rtype: pdarray

      .. rubric:: Notes

      To sample over `[a,b)`, use uniform or multiply the output of random by `(b - a)` and add `a`:

       ``(b - a) * random() + a``

      .. seealso:: :obj:`uniform`

      .. rubric:: Examples

      >>> rng = ak.random.default_rng()
      >>> rng.random()
      0.47108547995356098 # random
      >>> rng.random(3)
      array([0.055256829926011691, 0.62511314008006458, 0.16400145561571539]) # random



   .. py:method:: shuffle(x)

      Randomly shuffle a pdarray in place.

      :param x: shuffle the elements of x randomly in place
      :type x: pdarray

      :rtype: None



   .. py:method:: standard_exponential(size=None, method='zig')

      Draw samples from the standard exponential distribution.

      `standard_exponential` is identical to the exponential distribution
      with a scale parameter of 1.

      :param size: Output shape. Default is None, in which case a single value is returned.
      :type size: numeric_scalars, optional
      :param method: Either 'inv' or 'zig'. 'inv' uses the default inverse CDF method.
                     'zig' uses the Ziggurat method.
      :type method: str, optional

      :returns: Drawn samples from the standard exponential distribution.
      :rtype: pdarray



   .. py:method:: standard_normal(size=None)

      Draw samples from a standard Normal distribution (mean=0, stdev=1).

      :param size: Output shape. Default is None, in which case a single value is returned.
      :type size: numeric_scalars, optional

      :returns: Pdarray of floats (unless size=None, in which case a single float is returned).
      :rtype: pdarray

      .. rubric:: Notes

      For random samples from :math:`N(\mu, \sigma^2)`, either call `normal` or do:

      .. math::
          (\sigma \cdot \texttt{standard_normal}(size)) + \mu

      .. seealso:: :obj:`normal`

      .. rubric:: Examples

      >>> rng = ak.random.default_rng()
      >>> rng.standard_normal()
      2.1923875335537315 # random
      >>> rng.standard_normal(3)
      array([0.8797352989638163, -0.7085325853376141, 0.021728052940979934])  # random



   .. py:method:: uniform(low=0.0, high=1.0, size=None)

      Draw samples from a uniform distribution.

      Samples are uniformly distributed over the half-open interval [low, high).
      In other words, any value within the given interval is equally likely to be drawn by uniform.

      :param low: Lower boundary of the output interval. All values generated will be greater than or
                  equal to low. The default value is 0.
      :type low: float, optional
      :param high: Upper boundary of the output interval. All values generated will be less than high.
                   high must be greater than or equal to low. The default value is 1.0.
      :type high: float, optional
      :param size: Output shape. Default is None, in which case a single value is returned.
      :type size: numeric_scalars, optional

      :returns: Pdarray of floats (unless size=None, in which case a single float is returned).
      :rtype: pdarray

      .. seealso:: :obj:`integers`, :obj:`random`

      .. rubric:: Examples

      >>> rng = ak.random.default_rng()
      >>> rng.uniform(-1, 1, 3)
      array([0.030785499755523249, 0.08505865366367038, -0.38552048588998722])  # random



.. py:function:: randint(low: arkouda.dtypes.numeric_scalars, high: arkouda.dtypes.numeric_scalars, size: Union[arkouda.dtypes.int_scalars, Tuple[arkouda.dtypes.int_scalars, Ellipsis]] = 1, dtype=akint64, seed: Optional[arkouda.dtypes.int_scalars] = None) -> arkouda.pdarrayclass.pdarray

   Generate a pdarray of randomized int, float, or bool values in a
   specified range bounded by the low and high parameters.

   :param low: The low value (inclusive) of the range
   :type low: numeric_scalars
   :param high: The high value (exclusive for int, inclusive for float) of the range
   :type high: numeric_scalars
   :param size: The length of the returned array
   :type size: int_scalars
   :param dtype: The dtype of the array
   :type dtype: Union[int64, float64, bool]
   :param seed: Seed to allow for reproducible random number generation
   :type seed: int_scalars, optional

   :returns: Values drawn uniformly from the specified range having the desired dtype
   :rtype: pdarray

   :raises TypeError: Raised if dtype.name not in DTypes, size is not an int, low or high is
       not an int or float, or seed is not an int
   :raises ValueError: Raised if size < 0 or if high < low

   .. rubric:: Notes

   Calling randint with dtype=float64 will result in uniform non-integral
   floating point values.

   Ranges >= 2**64 in size is undefined behavior because
   it exceeds the maximum value that can be stored on the server (uint64)

   .. rubric:: Examples

   >>> ak.randint(0, 10, 5)
   array([5, 7, 4, 8, 3])

   >>> ak.randint(0, 1, 3, dtype=ak.float64)
   array([0.92176432277231968, 0.083130710959903542, 0.68894208386667544])

   >>> ak.randint(0, 1, 5, dtype=ak.bool)
   array([True, False, True, True, True])

   >>> ak.randint(1, 5, 10, seed=2)
   array([4, 3, 1, 3, 4, 4, 2, 4, 3, 2])

   >>> ak.randint(1, 5, 3, dtype=ak.float64, seed=2)
   array([2.9160772326374946, 4.353429832157099, 4.5392023718621486])

   >>> ak.randint(1, 5, 10, dtype=ak.bool, seed=2)
   array([False, True, True, True, True, False, True, True, True, True])


.. py:function:: standard_normal(size: arkouda.dtypes.int_scalars, seed: Union[None, arkouda.dtypes.int_scalars] = None) -> arkouda.pdarrayclass.pdarray

   Draw real numbers from the standard normal distribution.

   :param size: The number of samples to draw (size of the returned array)
   :type size: int_scalars
   :param seed: Value used to initialize the random number generator
   :type seed: int_scalars

   :returns: The array of random numbers
   :rtype: pdarray, float64

   :raises TypeError: Raised if size is not an int
   :raises ValueError: Raised if size < 0

   .. seealso:: :obj:`randint`

   .. rubric:: Notes

   For random samples from :math:`N(\mu, \sigma^2)`, use:

   ``(sigma * standard_normal(size)) + mu``

   .. rubric:: Examples

   >>> ak.standard_normal(3,1)
   array([-0.68586185091150265, 1.1723810583573375, 0.567584107142031])


.. py:function:: uniform(size: arkouda.dtypes.int_scalars, low: arkouda.dtypes.numeric_scalars = float(0.0), high: arkouda.dtypes.numeric_scalars = 1.0, seed: Union[None, arkouda.dtypes.int_scalars] = None) -> arkouda.pdarrayclass.pdarray

   Generate a pdarray with uniformly distributed random float values
   in a specified range.

   :param low: The low value (inclusive) of the range, defaults to 0.0
   :type low: float_scalars
   :param high: The high value (inclusive) of the range, defaults to 1.0
   :type high: float_scalars
   :param size: The length of the returned array
   :type size: int_scalars
   :param seed: Value used to initialize the random number generator
   :type seed: int_scalars, optional

   :returns: Values drawn uniformly from the specified range
   :rtype: pdarray, float64

   :raises TypeError: Raised if dtype.name not in DTypes, size is not an int, or if
       either low or high is not an int or float
   :raises ValueError: Raised if size < 0 or if high < low

   .. rubric:: Notes

   The logic for uniform is delegated to the ak.randint method which
   is invoked with a dtype of float64

   .. rubric:: Examples

   >>> ak.uniform(3)
   array([0.92176432277231968, 0.083130710959903542, 0.68894208386667544])

   >>> ak.uniform(size=3,low=0,high=5,seed=0)
   array([0.30013431967121934, 0.47383036230759112, 1.0441791878997098])


