arkouda.plotting
================

.. py:module:: arkouda.plotting

.. autoapi-nested-parse::

   Plotting utilities for Arkouda data structures.

   The `arkouda.plotting` module provides lightweight, matplotlib-based visualization
   functions for Arkouda arrays and DataFrames. These tools are intended for exploratory
   data analysis, especially for understanding distributions and skew across numeric or
   categorical data columns.

   Functions
   ---------
   plot_dist(b, h, log=True, xlabel=None, newfig=True)
       Plot the histogram and cumulative distribution for binned data.
       Useful for visualizing data generated from `ak.histogram`.

   hist_all(ak_df: DataFrame, cols: list = [])
       Generate histograms for all numeric columns in an Arkouda DataFrame
       (or a specified subset of columns). Automatically computes the number
       of bins using Doaneâ€™s formula and handles missing values, datetime,
       and categorical data appropriately.

   .. rubric:: Notes

   - These functions require `matplotlib.pyplot` and are meant for interactive
     Python sessions or Jupyter notebooks.
   - `plot_dist` does not call `plt.show()` automatically; you must call it manually
     to display the plot.
   - `hist_all` handles categorical grouping via Arkouda's `GroupBy` and supports
     `Datetime` and `Timedelta` plotting by converting to numeric types.

   .. rubric:: Examples

   >>> import arkouda as ak
   >>> import numpy as np
   >>> from arkouda.plotting import hist_all, plot_dist
   >>> df = ak.DataFrame({'x': ak.array(np.random.randn(100))})

   Save the figure to disk:
   >>> fig, axes = hist_all(df)
   >>> fig.savefig("hist_all.png")
   >>> b, h = ak.histogram(ak.arange(10), 3)
   >>> plot_dist(b.to_ndarray(), h[:-1].to_ndarray())
   (<Figure size 1200x500 with 2 Axes>, array([<Axes: title={'center': 'distribution'}>,
          <Axes: title={'center': 'cumulative distribution'}>], dtype=object))
   >>> import matplotlib.pyplot as plt
   >>> plt.show()

   .. seealso:: :py:obj:`-`, :py:obj:`-`, :py:obj:`-`



Functions
---------

.. autoapisummary::

   arkouda.plotting.hist_all
   arkouda.plotting.plot_dist


Module Contents
---------------

.. py:function:: hist_all(ak_df: arkouda.dataframe.DataFrame, cols: Optional[list[str]] = None)

   Create a grid of histograms for numeric columns in an Arkouda DataFrame.

   :param ak_df: An Arkouda DataFrame containing the data to visualize.
   :type ak_df: DataFrame
   :param cols: A list of column names to plot. If empty or not provided, all
                columns in the DataFrame are considered.
   :type cols: list, optional

   :returns: A tuple containing the matplotlib Figure and an array of Axes objects.
   :rtype: tuple[matplotlib.figure.Figure, numpy.ndarray]

   .. rubric:: Notes

   This function uses matplotlib to display a grid of histograms. It attempts to
   select a suitable number of bins using Doane's formula. Columns with
   non-numeric types will be grouped and encoded before plotting.

   .. rubric:: Examples

   Basic usage with all columns:
   >>> import arkouda as ak
   >>> import numpy as np
   >>> from arkouda.plotting import hist_all
   >>> ak_df = ak.DataFrame({
   ...     "a": ak.array(np.random.randn(100)),
   ...     "b": ak.array(np.random.randn(100)),
   ...     "c": ak.array(np.random.randn(100)),
   ...     "d": ak.array(np.random.randn(100))
   ... })
   >>> fig, axes = hist_all(ak_df)

   Save the figure to disk:
   >>> fig, axes = hist_all(ak_df, cols=["a", "b"])
   >>> fig.savefig("hist_all.png")


.. py:function:: plot_dist(b: arkouda.pdarrayclass.pdarray | numpy.typing.NDArray[numpy.floating], h: arkouda.pdarrayclass.pdarray | numpy.typing.NDArray[numpy.floating], *, log: bool = True, xlabel: Optional[str] = None, newfig: bool = True, show: bool = False) -> Tuple[matplotlib.figure.Figure, numpy.ndarray]

   Plot the distribution and cumulative distribution of histogram data.

   :param b: Histogram bin edges (length N+1) or bin centers (length N).
   :type b: arkouda.pdarray or numpy.ndarray
   :param h: Histogram counts. Accepts length N or N+1 (Arkouda-like extra last bin).
   :type h: arkouda.pdarray or numpy.ndarray
   :param log: If True, use a log scale for the y-axis of the distribution plot.
   :type log: bool, default True
   :param xlabel: Label for the x-axis.
   :type xlabel: str, optional
   :param newfig: If True, create a new figure; otherwise draw into the current figure.
   :type newfig: bool, default True
   :param show: If True, call ``plt.show()`` before returning.
   :type show: bool, default False

   :returns: (fig, axes) where axes[0] is the distribution, axes[1] the cumulative.
   :rtype: tuple[matplotlib.figure.Figure, numpy.ndarray]

   .. rubric:: Notes

   If ``h`` is one element longer than expected (as with ``ak.histogram``),
   the final element is dropped automatically.

   .. rubric:: Examples

   Using Arkouda's histogram:
   >>> import arkouda as ak
   >>> import numpy as np
   >>> from matplotlib import pyplot as plt
   >>> from arkouda.plotting import plot_dist
   >>> edges, counts = ak.histogram(ak.arange(10), 3)
   >>> fig, axes = plot_dist(edges, counts)
   >>> fig.savefig("dist.png")

   Using NumPy's histogram:
   >>> data = np.random.randn(1000)
   >>> counts, edges = np.histogram(data, bins=20)
   >>> fig, axes = plot_dist(edges, counts, xlabel="Value")
   >>> plt.show()


