arkouda.client
==============

.. py:module:: arkouda.client

.. autoapi-nested-parse::

   Client interface for connecting to and communicating with the Arkouda server.

   The `arkouda.client` module provides the core logic for managing a client-server
   session in Arkouda. It includes methods to connect, disconnect, send commands,
   check system status, and retrieve configuration details from the server. The client
   communicates with the server via ZMQ by default and handles both string and binary
   message formats.

   Key Responsibilities
   --------------------
   - Establish and manage server connections via different `Channel` types (e.g., ZMQ)
   - Format and send commands using Arkoudaâ€™s request-response protocol
   - Retrieve memory and configuration metrics from the server
   - Provide a health check (`ruok`) and shutdown mechanism
   - Maintain client-side logging, verbosity, and session parameters

   Main API
   --------
   __all__ = [
       "connect",
       "disconnect",
       "shutdown",
       "get_config",
       "get_max_array_rank",
       "get_mem_used",
       "get_mem_avail",
       "get_mem_status",
       "get_server_commands",
       "print_server_commands",
       "generate_history",
       "ruok",
   ]

   Classes
   -------
   Channel
       Abstract base class for communication between the client and the server.

   ZmqChannel
       Default implementation of `Channel` using ZeroMQ request-reply pattern.

   ClientMode, ShellMode, RequestMode, RequestStatus, ChannelType
       Enum classes defining modes of client interaction, shell type detection, and channel selection.

   Functions
   ---------
   connect(...)
       Establish a connection to an Arkouda server.

   disconnect()
       Cleanly disconnect from the server and reset session state.

   shutdown()
       Shut down the server, delete its symbol table, and disconnect the client.

   get_config()
       Return server runtime configuration and environment settings.

   get_mem_used(), get_mem_avail(), get_mem_status()
       Retrieve memory usage and availability statistics from the server.

   get_server_commands()
       Get a mapping of available server commands and their functions.

   print_server_commands()
       Print a list of all supported server-side commands.

   generate_history(...)
       Retrieve interactive shell or notebook command history.

   ruok()
       Send a health check to the server ("ruok") and receive status.

   .. rubric:: Notes

   - This module is foundational to all Arkouda workflows.
   - The `generic_msg()` function is used internally to handle message transmission.
   - Clients must call `connect()` before performing any server operations.

   .. rubric:: Examples

   >>> import arkouda as ak
   >>> ak.connect() # doctest: +SKIP
   >>> ak.get_config() # doctest: +SKIP
   {'serverHostname': 'localhost', 'numLocales': 4, ...}
   >>> ak.disconnect() # doctest: +SKIP

   .. seealso:: :py:obj:`-`, :py:obj:`-`, :py:obj:`-`, :py:obj:`-`



Functions
---------

.. autoapisummary::

   arkouda.client.connect
   arkouda.client.disconnect
   arkouda.client.generate_history
   arkouda.client.get_config
   arkouda.client.get_max_array_rank
   arkouda.client.get_mem_avail
   arkouda.client.get_mem_status
   arkouda.client.get_mem_used
   arkouda.client.get_server_commands
   arkouda.client.print_server_commands
   arkouda.client.ruok
   arkouda.client.shutdown
   arkouda.client.wait_for_async_activity


Module Contents
---------------

.. py:function:: connect(server: str = 'localhost', port: int = 5555, timeout: int = 0, access_token: Optional[str] = None, connect_url: Optional[str] = None, access_channel: Optional[Channel] = None) -> None

   Connect to a running arkouda server.

   :param server: The hostname of the server (must be visible to the current
                  machine).
   :type server: str, default="localhost"
   :param port: The port of the server.
   :type port: int, default=5555
   :param timeout: The timeout in seconds for client send and receive operations.
                   Defaults to 0 seconds, which is interpreted as no timeout.
   :type timeout: int, default=0
   :param access_token: The token used to connect to an existing socket to enable access to
                        an Arkouda server where authentication is enabled. Defaults to None.
   :type access_token: str, optional
   :param connect_url: The complete url in the format of tcp://server:port?token=<token_value>
                       where the token is optional
   :type connect_url: str, optional
   :param access_channel: The desired Channel implementation that differs from the default ZmqChannel
   :type access_channel: Channel, optional

   :raises ConnectionError: Raised if there's an error in connecting to the Arkouda server
   :raises ValueError: Raised if there's an error in parsing the connect_url parameter
   :raises RuntimeError: Raised if there is a server-side error

   .. rubric:: Notes

   On success, prints the connected address, as seen by the server. If called
   with an existing connection, the socket will be re-initialized.


.. py:function:: disconnect() -> None

   Disconnects the client from the Arkouda server.

   :raises ConnectionError: Raised if there's an error disconnecting from the Arkouda server


.. py:function:: generate_history(num_commands: Optional[int] = None, command_filter: Optional[str] = None) -> List[str]

   Generate list of commands executed.

   Generate list of commands executed within the Python shell, Jupyter notebook,
   or IPython notebook, with an optional cmd_filter and number of commands to return.

   :param num_commands: The number of commands from history to retrieve
   :type num_commands: int, optional
   :param command_filter: String containing characters used to select a subset of commands.
   :type command_filter: str, optional

   :returns: A list of commands from the Python shell, Jupyter notebook, or IPython notebook
   :rtype: List[str]

   .. rubric:: Examples

   >>> import arkouda as ak
   >>> ak.connect()    # doctest: +SKIP
   connected to arkouda server tcp://*:5555
   >>> ak.get_config()    # doctest: +SKIP
   {'arkoudaVersion': 'v2025.01.13+165.g23ccdfd6c', 'chplVersion': '2.4.0',
       ... 'pythonVersion': '3.13', 'ZMQVersion': '4.3.5', 'HDF5Version': '1.14.4',
       ... 'serverHostname': 'pop-os', 'ServerPort': 5555, 'numLocales': 1,
       ... 'numPUs': 8, 'maxTaskPar': 8, 'physicalMemory': 67258408960,
       ... 'distributionType': 'domain(1,int(64),one)',
       ... 'LocaleConfigs': [{'id': 0, 'name': 'pop-os', 'numPUs': 8,
       ... 'maxTaskPar': 8, 'physicalMemory': 67258408960}], 'authenticate': False,
       ... 'logLevel': 'INFO', 'logChannel': 'FILE', 'regexMaxCaptures': 20,
       ... 'byteorder': 'little', 'autoShutdown': False, 'serverInfoNoSplash': False,
       ... 'maxArrayDims': 1, 'ARROW_VERSION': '19.0.0'}
   >>> ak.ones(10000, dtype=int)
   array([1 1 1 ... 1 1 1])
   >>> nums = ak.randint(0,500,10000, seed=1)
   >>> ak.argsort(nums)
   array([1984 2186 3574 ... 9298 9600 9651])
   >>> ak.generate_history(num_commands=5, command_filter='ak.')    # doctest: +SKIP
   ['ak.connect()', 'ak.get_config()', 'ak.ones(10000, dtype=int)', 'nums = ak.randint(0,500,10000)',
   'ak.argsort(nums)']


.. py:function:: get_config() -> Mapping[str, Union[str, int, float]]

   Get runtime information about the server.

   :returns: serverHostname
             serverPort
             numLocales
             numPUs (number of processor units per locale)
             maxTaskPar (maximum number of tasks per locale)
             physicalMemory
   :rtype: Mapping[str, Union[str, int, float]]

   :raises RuntimeError: Raised if the client is not connected to a server


.. py:function:: get_max_array_rank() -> int

   Get the maximum pdarray rank the server was compiled to support.

   This value corresponds to the maximum number in
   parameter_classes -> array -> nd in the `registration-config.json`
   file when the server was compiled.

   :returns: The maximum pdarray rank supported by the server
   :rtype: int


.. py:function:: get_mem_avail(unit: str = 'b', as_percent: bool = False) -> int

   Compute the amount of memory available to be used.

   :param unit: unit of return ('b' by default)
   :type unit: str {'b', 'kb', 'mb', 'gb', 'tb', 'pb'}
   :param as_percent: If True, return the percent (as an int) of the memory that's available to be used
                      False by default
   :type as_percent: bool

   :returns: Indicates the amount of memory available to be used.
   :rtype: int

   :raises RuntimeError: Raised if there is a server-side error in getting memory available
   :raises ValueError: Raised if the returned value is not an int-formatted string


.. py:function:: get_mem_status() -> List[Mapping[str, Union[str, int, float]]]

   Retrieve the memory status for each locale.

   :returns: total_mem: total physical memory on locale host
             avail_mem: current available memory on locale host
             arkouda_mem_alloc: memory allocated to Arkouda chapel process on locale host
             pct_avail_mem: percentage of physical memory currently available on locale host
             locale_id: locale id which is between 0 and numLocales-1
             locale_hostname: host name of locale host
   :rtype: List[Mapping[str, Union[str, int, float]]]

   :raises RuntimeError: Raised if there is a server-side error in getting per-locale
       memory status information


.. py:function:: get_mem_used(unit: str = 'b', as_percent: bool = False) -> int

   Compute the amount of memory used by objects in the server's symbol table.

   :param unit: unit of return ('b' by default)
   :type unit: str {'b', 'kb', 'mb', 'gb', 'tb', 'pb'}
   :param as_percent: If True, return the percent (as an int) of the available memory that's been used
                      False by default
   :type as_percent: bool

   :returns: Indicates the amount of memory allocated to symbol table objects.
   :rtype: int

   :raises RuntimeError: Raised if there is a server-side error in getting memory used
   :raises ValueError: Raised if the returned value is not an int-formatted string


.. py:function:: get_server_commands() -> Mapping[str, str]

   Return a dictionary of available server commands and the functions they map to.

   :returns: String to String mapping of available server commands to functions
   :rtype: dict

   :raises RuntimeError: Raised if there is a server-side error in retrieving and formatting the CommandMap
   :raises ValueError: Raised if there's an error in parsing the JSON-formatted server string


.. py:function:: print_server_commands()

   Print the list of the available Server commands.


.. py:function:: ruok() -> str

   Send a "ruok" message to the arkouda_server.

   Simply sends a "ruok" message to the server and, if the return message is
   "imok", this means the arkouda_server is up and operating normally. A return
   message of "imnotok" indicates an error occurred or the connection timed out.

   This method is basically a way to do a quick healthcheck in a way that does
   not require error handling.

   :returns: A string indicating if the server is operating normally (imok), if there's
             an error server-side, or if ruok did not return a response (imnotok) in
             both of the latter cases
   :rtype: str


.. py:function:: shutdown() -> None

   Send a shutdown message.

   Send a shutdown message to the Arkouda server that does the
   following:

   1. Delete all objects in the SymTable
   2. Shuts down the Arkouda server
   3. Disconnects the client from the stopped Arkouda Server

   :raises RuntimeError: Raised if the client is not connected to the Arkouda server or
       there is an error in disconnecting from the server


.. py:function:: wait_for_async_activity() -> None

   Wait for the completion of asynchronous activities on the server.

   Intended to help with testing of automatic checkpointing.
   The server will consider itself "idle" despite serving this message.



