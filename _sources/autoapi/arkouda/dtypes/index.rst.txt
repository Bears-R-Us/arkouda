arkouda.dtypes
==============

.. py:module:: arkouda.dtypes


Attributes
----------

.. autoapisummary::

   arkouda.dtypes.ARKOUDA_SUPPORTED_DTYPES
   arkouda.dtypes.DTypeObjects
   arkouda.dtypes.DTypes
   arkouda.dtypes.ScalarDTypes
   arkouda.dtypes.all_scalars
   arkouda.dtypes.bitType
   arkouda.dtypes.bool_
   arkouda.dtypes.bool_scalars
   arkouda.dtypes.complex128
   arkouda.dtypes.complex64
   arkouda.dtypes.float32
   arkouda.dtypes.float64
   arkouda.dtypes.float_scalars
   arkouda.dtypes.int16
   arkouda.dtypes.int32
   arkouda.dtypes.int64
   arkouda.dtypes.int8
   arkouda.dtypes.intTypes
   arkouda.dtypes.int_scalars
   arkouda.dtypes.numeric_scalars
   arkouda.dtypes.numpy_scalars
   arkouda.dtypes.str_
   arkouda.dtypes.str_scalars
   arkouda.dtypes.uint16
   arkouda.dtypes.uint32
   arkouda.dtypes.uint64
   arkouda.dtypes.uint8


Classes
-------

.. autoapisummary::

   arkouda.dtypes.bigint


Functions
---------

.. autoapisummary::

   arkouda.dtypes.check_np_dtype
   arkouda.dtypes.dtype
   arkouda.dtypes.get_byteorder
   arkouda.dtypes.get_server_byteorder
   arkouda.dtypes.isSupportedNumber
   arkouda.dtypes.resolve_scalar_dtype
   arkouda.dtypes.translate_np_dtype


Module Contents
---------------

.. py:data:: ARKOUDA_SUPPORTED_DTYPES

.. py:data:: DTypeObjects

.. py:data:: DTypes

.. py:data:: ScalarDTypes

.. py:data:: all_scalars

   The DType enum defines the supported Arkouda data types in string form.

.. py:class:: bigint

   .. py:attribute:: itemsize
      :value: 128



   .. py:attribute:: kind
      :value: 'ui'



   .. py:attribute:: name
      :value: 'bigint'



   .. py:attribute:: ndim
      :value: 0



   .. py:attribute:: shape
      :value: ()



   .. py:method:: type(x)


.. py:data:: bitType

.. py:data:: bool_

.. py:data:: bool_scalars

.. py:function:: check_np_dtype(dt: Union[numpy.dtype, bigint]) -> None

   Assert that numpy dtype dt is one of the dtypes supported
   by arkouda, otherwise raise TypeError.

   :raises TypeError: Raised if the dtype is not in supported dtypes or if
       dt is not a np.dtype


.. py:data:: complex128

.. py:data:: complex64

.. py:function:: dtype(x)

.. py:data:: float32

.. py:data:: float64

.. py:data:: float_scalars

.. py:function:: get_byteorder(dt: numpy.dtype) -> str

   Get a concrete byteorder (turns '=' into '<' or '>')


.. py:function:: get_server_byteorder() -> str

   Get the server's byteorder


.. py:data:: int16

.. py:data:: int32

.. py:data:: int64

.. py:data:: int8

.. py:data:: intTypes

.. py:data:: int_scalars

.. py:function:: isSupportedNumber(num)

.. py:data:: numeric_scalars

.. py:data:: numpy_scalars

.. py:function:: resolve_scalar_dtype(val: object) -> str

   Try to infer what dtype arkouda_server should treat val as.


.. py:data:: str_

.. py:data:: str_scalars

.. py:function:: translate_np_dtype(dt) -> Tuple[str, int]

   Split numpy dtype dt into its kind and byte size, raising
   TypeError for unsupported dtypes.

   :raises TypeError: Raised if the dtype is not in supported dtypes or if
       dt is not a np.dtype


.. py:data:: uint16

.. py:data:: uint32

.. py:data:: uint64

.. py:data:: uint8

