arkouda.scipy.stats
===================

.. py:module:: arkouda.scipy.stats


Classes
-------

.. autoapisummary::

   arkouda.scipy.stats.chi2


Module Contents
---------------

.. py:class:: chi2(momtype=1, a=None, b=None, xtol=1e-14, badvalue=None, name=None, longname=None, shapes=None, seed=None)

   Bases: :py:obj:`scipy.stats._distn_infrastructure.rv_continuous`


   A chi-squared continuous random variable.

   For the noncentral chi-square distribution, see `ncx2`.

   As an instance of the `rv_continuous` class, `chi2` object inherits from it
   a collection of generic methods (see below for the full list),
   and completes them with details specific for this particular distribution.

   .. method:: rvs(df, loc=0, scale=1, size=1, random_state=None)

      Random variates.

   .. method:: pdf(x, df, loc=0, scale=1)

      Probability density function.

   .. method:: logpdf(x, df, loc=0, scale=1)

      Log of the probability density function.

   .. method:: cdf(x, df, loc=0, scale=1)

      Cumulative distribution function.

   .. method:: logcdf(x, df, loc=0, scale=1)

      Log of the cumulative distribution function.

   .. method:: sf(x, df, loc=0, scale=1)

      Survival function  (also defined as ``1 - cdf``, but `sf` is sometimes more accurate).

   .. method:: logsf(x, df, loc=0, scale=1)

      Log of the survival function.

   .. method:: ppf(q, df, loc=0, scale=1)

      Percent point function (inverse of ``cdf`` --- percentiles).

   .. method:: isf(q, df, loc=0, scale=1)

      Inverse survival function (inverse of ``sf``).

   .. method:: moment(order, df, loc=0, scale=1)

      Non-central moment of the specified order.

   .. method:: stats(df, loc=0, scale=1, moments='mv')

      Mean('m'), variance('v'), skew('s'), and/or kurtosis('k').

   .. method:: entropy(df, loc=0, scale=1)

      (Differential) entropy of the RV.

   .. method:: fit(data)

      Parameter estimates for generic data.
      See `scipy.stats.rv_continuous.fit <https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_continuous.fit.html#scipy.stats.rv_continuous.fit>`__ for detailed documentation of the
      keyword arguments.

   .. method:: expect(func, args=(df,), loc=0, scale=1, lb=None, ub=None, conditional=False, \*\*kwds)

      Expected value of a function (of one argument) with respect to the distribution.

   .. method:: median(df, loc=0, scale=1)

      Median of the distribution.

   .. method:: mean(df, loc=0, scale=1)

      Mean of the distribution.

   .. method:: var(df, loc=0, scale=1)

      Variance of the distribution.

   .. method:: std(df, loc=0, scale=1)

      Standard deviation of the distribution.

   .. method:: interval(confidence, df, loc=0, scale=1)

      Confidence interval with equal areas around the median.


   .. seealso:: :py:obj:`ncx2`

   .. rubric:: Notes

   The probability density function for `chi2` is:

   .. math::

       f(x, k) = \frac{1}{2^{k/2} \Gamma \left( k/2 \right)}
                  x^{k/2-1} \exp \left( -x/2 \right)

   for :math:`x > 0`  and :math:`k > 0` (degrees of freedom, denoted ``df``
   in the implementation).

   `chi2` takes ``df`` as a shape parameter.

   The chi-squared distribution is a special case of the gamma
   distribution, with gamma parameters ``a = df/2``, ``loc = 0`` and
   ``scale = 2``.

   The probability density above is defined in the "standardized" form. To shift
   and/or scale the distribution use the ``loc`` and ``scale`` parameters.
   Specifically, ``chi2.pdf(x, df, loc, scale)`` is identically
   equivalent to ``chi2.pdf(y, df) / scale`` with
   ``y = (x - loc) / scale``. Note that shifting the location of a distribution
   does not make it a "noncentral" distribution; noncentral generalizations of
   some distributions are available in separate classes.

   .. rubric:: Examples

   >>> import numpy as np
   >>> from scipy.stats import chi2
   >>> import matplotlib.pyplot as plt
   >>> fig, ax = plt.subplots(1, 1)

   Get the support:

   >>> df = 55
   >>> lb, ub = chi2.support(df)

   Calculate the first four moments:

   >>> mean, var, skew, kurt = chi2.stats(df, moments='mvsk')

   Display the probability density function (``pdf``):

   >>> x = np.linspace(chi2.ppf(0.01, df),
   ...                 chi2.ppf(0.99, df), 100)
   >>> ax.plot(x, chi2.pdf(x, df),
   ...        'r-', lw=5, alpha=0.6, label='chi2 pdf')

   Alternatively, the distribution object can be called (as a function)
   to fix the shape, location and scale parameters. This returns a "frozen"
   RV object holding the given parameters fixed.

   Freeze the distribution and display the frozen ``pdf``:

   >>> rv = chi2(df)
   >>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')

   Check accuracy of ``cdf`` and ``ppf``:

   >>> vals = chi2.ppf([0.001, 0.5, 0.999], df)
   >>> np.allclose([0.001, 0.5, 0.999], chi2.cdf(vals, df))
   True

   Generate random numbers:

   >>> r = chi2.rvs(df, size=1000)

   And compare the histogram:

   >>> ax.hist(r, density=True, bins='auto', histtype='stepfilled', alpha=0.2)
   >>> ax.set_xlim([x[0], x[-1]])
   >>> ax.legend(loc='best', frameon=False)
   >>> plt.show()


   .. py:method:: a(*args, **kwargs)

      Convert a string or number to a floating-point number, if possible.



   .. py:method:: b(*args, **kwargs)

      Convert a string or number to a floating-point number, if possible.



   .. py:method:: badvalue(*args, **kwargs)

      Convert a string or number to a floating-point number, if possible.



   .. py:method:: generic_moment(*args, **kwargs)


   .. py:method:: moment_type(*args, **kwargs)

      int([x]) -> integer
      int(x, base=10) -> integer

      Convert a number or string to an integer, or return 0 if no arguments
      are given.  If x is a number, return x.__int__().  For floating-point
      numbers, this truncates towards zero.

      If x is not a number or if base is given, then x must be a string,
      bytes, or bytearray instance representing an integer literal in the
      given base.  The literal can be preceded by '+' or '-' and be surrounded
      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
      Base 0 means to interpret the base from the string as an integer literal.
      >>> int('0b100', base=0)
      4



   .. py:method:: name(*args, **kwargs)

      str(object='') -> str
      str(bytes_or_buffer[, encoding[, errors]]) -> str

      Create a new string object from the given object. If encoding or
      errors is specified, then the object must expose a data buffer
      that will be decoded using the given encoding and error handler.
      Otherwise, returns the result of object.__str__() (if defined)
      or repr(object).
      encoding defaults to 'utf-8'.
      errors defaults to 'strict'.



   .. py:method:: numargs(*args, **kwargs)

      int([x]) -> integer
      int(x, base=10) -> integer

      Convert a number or string to an integer, or return 0 if no arguments
      are given.  If x is a number, return x.__int__().  For floating-point
      numbers, this truncates towards zero.

      If x is not a number or if base is given, then x must be a string,
      bytes, or bytearray instance representing an integer literal in the
      given base.  The literal can be preceded by '+' or '-' and be surrounded
      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
      Base 0 means to interpret the base from the string as an integer literal.
      >>> int('0b100', base=0)
      4



   .. py:method:: shapes(*args, **kwargs)

      str(object='') -> str
      str(bytes_or_buffer[, encoding[, errors]]) -> str

      Create a new string object from the given object. If encoding or
      errors is specified, then the object must expose a data buffer
      that will be decoded using the given encoding and error handler.
      Otherwise, returns the result of object.__str__() (if defined)
      or repr(object).
      encoding defaults to 'utf-8'.
      errors defaults to 'strict'.



   .. py:method:: vecentropy(*args, **kwargs)


   .. py:method:: xtol(*args, **kwargs)

      Convert a string or number to a floating-point number, if possible.



