arkouda.numpy.dtypes.dtypes
===========================

.. py:module:: arkouda.numpy.dtypes.dtypes


Attributes
----------

.. autoapisummary::

   arkouda.numpy.dtypes.dtypes.ARKOUDA_SUPPORTED_DTYPES
   arkouda.numpy.dtypes.dtypes.ARKOUDA_SUPPORTED_INTS
   arkouda.numpy.dtypes.dtypes.DTypeObjects
   arkouda.numpy.dtypes.dtypes.DTypes
   arkouda.numpy.dtypes.dtypes.NUMBER_FORMAT_STRINGS
   arkouda.numpy.dtypes.dtypes.NumericDTypes
   arkouda.numpy.dtypes.dtypes.ScalarDTypes
   arkouda.numpy.dtypes.dtypes.SeriesDTypes
   arkouda.numpy.dtypes.dtypes.all_scalars
   arkouda.numpy.dtypes.dtypes.bitType
   arkouda.numpy.dtypes.dtypes.bool_scalars
   arkouda.numpy.dtypes.dtypes.float_scalars
   arkouda.numpy.dtypes.dtypes.intTypes
   arkouda.numpy.dtypes.dtypes.int_scalars
   arkouda.numpy.dtypes.dtypes.numeric_and_bool_scalars
   arkouda.numpy.dtypes.dtypes.numeric_scalars
   arkouda.numpy.dtypes.dtypes.numpy_scalars
   arkouda.numpy.dtypes.dtypes.str_scalars


Classes
-------

.. autoapisummary::

   arkouda.numpy.dtypes.dtypes.DType
   arkouda.numpy.dtypes.dtypes.bigint


Functions
---------

.. autoapisummary::

   arkouda.numpy.dtypes.dtypes.dtype
   arkouda.numpy.dtypes.dtypes.get_byteorder
   arkouda.numpy.dtypes.dtypes.get_server_byteorder
   arkouda.numpy.dtypes.dtypes.isSupportedBool
   arkouda.numpy.dtypes.dtypes.isSupportedDType
   arkouda.numpy.dtypes.dtypes.isSupportedFloat
   arkouda.numpy.dtypes.dtypes.isSupportedInt
   arkouda.numpy.dtypes.dtypes.isSupportedNumber
   arkouda.numpy.dtypes.dtypes.resolve_scalar_dtype


Module Contents
---------------

.. py:data:: ARKOUDA_SUPPORTED_DTYPES

.. py:data:: ARKOUDA_SUPPORTED_INTS

.. py:class:: DType

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: BIGINT
      :value: 'bigint'



   .. py:attribute:: BOOL
      :value: 'bool'



   .. py:attribute:: COMPLEX128
      :value: 'complex128'



   .. py:attribute:: COMPLEX64
      :value: 'complex64'



   .. py:attribute:: FLOAT
      :value: 'float'



   .. py:attribute:: FLOAT32
      :value: 'float32'



   .. py:attribute:: FLOAT64
      :value: 'float64'



   .. py:attribute:: INT
      :value: 'int'



   .. py:attribute:: INT16
      :value: 'int16'



   .. py:attribute:: INT32
      :value: 'int32'



   .. py:attribute:: INT64
      :value: 'int64'



   .. py:attribute:: INT8
      :value: 'int8'



   .. py:attribute:: STR
      :value: 'str'



   .. py:attribute:: UINT
      :value: 'uint'



   .. py:attribute:: UINT16
      :value: 'uint16'



   .. py:attribute:: UINT32
      :value: 'uint32'



   .. py:attribute:: UINT64
      :value: 'uint64'



   .. py:attribute:: UINT8
      :value: 'uint8'



.. py:data:: DTypeObjects

.. py:data:: DTypes

.. py:data:: NUMBER_FORMAT_STRINGS

.. py:data:: NumericDTypes

.. py:data:: ScalarDTypes

.. py:data:: SeriesDTypes

.. py:data:: all_scalars

   The DType enum defines the supported Arkouda data types in string form.

.. py:class:: bigint

   Datatype for representing integers of variable size.

   May be used for integers that exceed 64 bits.


   .. py:attribute:: itemsize
      :value: 128



   .. py:attribute:: kind
      :value: 'ui'



   .. py:attribute:: name
      :value: 'bigint'



   .. py:attribute:: ndim
      :value: 0



   .. py:attribute:: shape
      :value: ()



   .. py:method:: type(x)


.. py:data:: bitType

.. py:data:: bool_scalars

.. py:function:: dtype(dtype)

   Create a data type object.

   :param dtype: Object to be converted to a data type object.
   :type dtype: object

   :rtype: type


.. py:data:: float_scalars

.. py:function:: get_byteorder(dt: numpy.dtype) -> str

   Get a concrete byteorder (turns '=' into '<' or '>') on the client.

   :param dt: The numpy dtype to determine the byteorder of.
   :type dt: np.dtype

   :returns: Returns "<" for little endian and ">" for big endian.
   :rtype: str

   :raises ValueError: Returned if sys.byteorder is not "little" or "big"

   .. rubric:: Examples

   >>> ak.get_byteorder(ak.dtype(ak.int64))
   '<'


.. py:function:: get_server_byteorder() -> str

   Get the server's byteorder

   :returns: Returns "little" for little endian and "big" for big endian.
   :rtype: str

   :raises ValueError: Raised if Server byteorder is not 'little' or 'big'

   .. rubric:: Examples

   >>> ak.get_server_byteorder()
   'little'


.. py:data:: intTypes

.. py:data:: int_scalars

.. py:function:: isSupportedBool(num)

   Whether a scalar is an arkouda supported boolean dtype.

   :param scalar:
   :type scalar: object

   :returns: True if scalar is an instance of an arkouda supported boolean dtype, else False.
   :rtype: bool

   .. rubric:: Examples

   >>> ak.isSupportedBool(ak.int64)
   False
   >>> ak.isSupportedBool(bool)
   True


.. py:function:: isSupportedDType(scalar: object) -> bool

   Whether a scalar is an arkouda supported dtype.

   :param scalar:
   :type scalar: object

   :returns: True if scalar is an instance of an arkouda supported dtype, else False.
   :rtype: bool

   .. rubric:: Examples

   >>> ak.isSupportedDType(ak.int64)
   True
   >>> ak.isSupportedDType(np.complex128(1+2j))
   False


.. py:function:: isSupportedFloat(num)

   Whether a scalar is an arkouda supported float dtype.

   :param scalar:
   :type scalar: object

   :returns: True if scalar is an instance of an arkouda supported float dtype, else False.
   :rtype: bool

   .. rubric:: Examples

   >>> ak.isSupportedFloat(ak.int64)
   False
   >>> ak.isSupportedFloat(ak.float64)
   True


.. py:function:: isSupportedInt(num)

   Whether a scalar is an arkouda supported integer dtype.

   :param scalar:
   :type scalar: object

   :returns: True if scalar is an instance of an arkouda supported integer dtype, else False.
   :rtype: bool

   .. rubric:: Examples

   >>> ak.isSupportedInt(ak.int64)
   True
   >>> ak.isSupportedInt(ak.float64)
   False


.. py:function:: isSupportedNumber(num)

   Whether a scalar is an arkouda supported numeric dtype.

   :param scalar:
   :type scalar: object

   :returns: True if scalar is an instance of an arkouda supported numeric dtype, else False.
   :rtype: bool

   .. rubric:: Examples

   >>> ak.isSupportedNumber(ak.int64)
   True
   >>> ak.isSupportedNumber(ak.str_)
   False


.. py:data:: numeric_and_bool_scalars

.. py:data:: numeric_scalars

.. py:data:: numpy_scalars

.. py:function:: resolve_scalar_dtype(val: object) -> str

   Try to infer what dtype arkouda_server should treat val as.

   :param val: The object to determine the dtype of.
   :type val: object

   :returns: The dtype name, if it can be resolved, otherwise the type (as str).
   :rtype: str

   .. rubric:: Examples

   >>> ak.resolve_scalar_dtype(1)
   'int64'
   >>> ak.resolve_scalar_dtype(2.0)
   'float64'


.. py:data:: str_scalars

