:py:mod:`arkouda.numpy.imports`
===============================

.. py:module:: arkouda.numpy.imports


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   arkouda.numpy.imports.bool_
   arkouda.numpy.imports.byte
   arkouda.numpy.imports.cdouble
   arkouda.numpy.imports.clongdouble
   arkouda.numpy.imports.csingle
   arkouda.numpy.imports.double
   arkouda.numpy.imports.float32
   arkouda.numpy.imports.float64
   arkouda.numpy.imports.half
   arkouda.numpy.imports.int16
   arkouda.numpy.imports.int32
   arkouda.numpy.imports.int64
   arkouda.numpy.imports.int8
   arkouda.numpy.imports.int_
   arkouda.numpy.imports.intc
   arkouda.numpy.imports.longdouble
   arkouda.numpy.imports.longlong
   arkouda.numpy.imports.short
   arkouda.numpy.imports.single
   arkouda.numpy.imports.ubyte
   arkouda.numpy.imports.uint
   arkouda.numpy.imports.uint16
   arkouda.numpy.imports.uint32
   arkouda.numpy.imports.uint64
   arkouda.numpy.imports.uint8
   arkouda.numpy.imports.uintc
   arkouda.numpy.imports.ulonglong
   arkouda.numpy.imports.ushort




Attributes
~~~~~~~~~~

.. autoapisummary::

   arkouda.numpy.imports.Inf
   arkouda.numpy.imports.Infinity
   arkouda.numpy.imports.NAN
   arkouda.numpy.imports.NINF
   arkouda.numpy.imports.NZERO
   arkouda.numpy.imports.NaN
   arkouda.numpy.imports.PINF
   arkouda.numpy.imports.PZERO
   arkouda.numpy.imports.e
   arkouda.numpy.imports.euler_gamma
   arkouda.numpy.imports.inf
   arkouda.numpy.imports.infty
   arkouda.numpy.imports.nan
   arkouda.numpy.imports.newaxis
   arkouda.numpy.imports.pi


.. py:data:: Inf
   :type: float

   

.. py:data:: Infinity
   :type: float

   

.. py:data:: NAN
   :type: float

   

.. py:data:: NINF
   :type: float

   

.. py:data:: NZERO
   :type: float

   

.. py:data:: NaN
   :type: float

   

.. py:data:: PINF
   :type: float

   

.. py:data:: PZERO
   :type: float

   

.. py:class:: bool_


   Boolean type (True or False), stored as a byte.

       .. warning::

          The :class:`bool_` type is not a subclass of the :class:`int_` type
          (the :class:`bool_` is not even a number type). This is different
          than Python's default implementation of :class:`bool` as a
          sub-class of :class:`int`.

       :Character code: ``'?'``

   .. py:method:: T(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: all(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: any(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: argmax(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: argmin(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: argsort(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: astype(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: base(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: byteswap(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: choose(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: clip(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: compress(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: conj(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: conjugate(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: copy(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: cumprod(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: cumsum(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: data(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: diagonal(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: dtype(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: dump(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: dumps(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: fill(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: flags(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: flat(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: flatten(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: getfield(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: imag(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: item(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: itemset(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: itemsize(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: max(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: mean(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: min(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: nbytes(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: ndim(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: newbyteorder(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: nonzero(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: prod(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: ptp(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: put(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: ravel(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: real(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: repeat(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: reshape(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: resize(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: round(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: searchsorted(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: setfield(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: setflags(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: shape(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: size(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: sort(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: squeeze(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: std(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: strides(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: sum(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: swapaxes(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: take(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: tobytes(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: tofile(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: tolist(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: tostring(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: trace(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: transpose(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: var(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``


   .. py:method:: view(*args, **kwargs)

      Boolean type (True or False), stored as a byte.

      .. warning::

         The :class:`bool_` type is not a subclass of the :class:`int_` type
         (the :class:`bool_` is not even a number type). This is different
         than Python's default implementation of :class:`bool` as a
         sub-class of :class:`int`.

      :Character code: ``'?'``



.. py:class:: byte


   Signed integer type, compatible with C ``char``.

       :Character code: ``'b'``
       :Canonical name: `numpy.byte`
       :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).

   .. py:method:: T(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: all(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: any(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: argmax(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: argmin(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: argsort(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: astype(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: base(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: bit_count(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: byteswap(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: choose(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: clip(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: compress(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: conj(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: conjugate(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: copy(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: cumprod(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: cumsum(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: data(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: denominator(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: diagonal(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: dtype(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: dump(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: dumps(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: fill(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: flags(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: flat(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: flatten(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: getfield(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: imag(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: is_integer(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: item(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: itemset(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: itemsize(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: max(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: mean(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: min(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: nbytes(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: ndim(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: nonzero(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: numerator(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: prod(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: ptp(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: put(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: ravel(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: real(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: repeat(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: reshape(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: resize(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: round(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: searchsorted(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: setfield(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: setflags(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: shape(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: size(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: sort(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: squeeze(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: std(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: strides(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: sum(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: swapaxes(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: take(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: tobytes(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: tofile(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: tolist(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: tostring(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: trace(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: transpose(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: var(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: view(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).



.. py:class:: cdouble


   Complex number type composed of two double-precision floating-point
       numbers, compatible with Python `complex`.

       :Character code: ``'D'``
       :Canonical name: `numpy.cdouble`
       :Alias: `numpy.cfloat`
       :Alias: `numpy.complex_`
       :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.

   .. py:method:: T(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: all(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: any(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: argmax(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: argmin(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: argsort(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: astype(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: base(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: byteswap(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: choose(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: clip(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: compress(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: conj(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: conjugate(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: copy(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: cumprod(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: cumsum(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: data(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: diagonal(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: dtype(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: dump(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: dumps(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: fill(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: flags(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: flat(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: flatten(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: getfield(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: imag(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: item(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: itemset(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: itemsize(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: max(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: mean(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: min(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: nbytes(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: ndim(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: newbyteorder(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: nonzero(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: prod(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: ptp(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: put(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: ravel(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: real(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: repeat(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: reshape(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: resize(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: round(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: searchsorted(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: setfield(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: setflags(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: shape(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: size(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: sort(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: squeeze(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: std(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: strides(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: sum(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: swapaxes(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: take(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: tobytes(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: tofile(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: tolist(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: tostring(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: trace(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: transpose(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: var(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.


   .. py:method:: view(*args, **kwargs)

      Complex number type composed of two double-precision floating-point
      numbers, compatible with Python `complex`.

      :Character code: ``'D'``
      :Canonical name: `numpy.cdouble`
      :Alias: `numpy.cfloat`
      :Alias: `numpy.complex_`
      :Alias on this platform (Linux x86_64): `numpy.complex128`: Complex number type composed of 2 64-bit-precision floating-point numbers.



.. py:class:: clongdouble


   Complex number type composed of two extended-precision floating-point
       numbers.

       :Character code: ``'G'``
       :Alias: `numpy.clongfloat`
       :Alias: `numpy.longcomplex`
       :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.

   .. py:method:: T(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: all(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: any(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: argmax(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: argmin(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: argsort(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: astype(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: base(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: byteswap(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: choose(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: clip(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: compress(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: conj(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: conjugate(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: copy(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: cumprod(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: cumsum(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: data(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: diagonal(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: dtype(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: dump(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: dumps(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: fill(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: flags(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: flat(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: flatten(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: getfield(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: imag(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: item(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: itemset(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: itemsize(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: max(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: mean(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: min(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: nbytes(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: ndim(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: newbyteorder(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: nonzero(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: prod(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: ptp(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: put(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: ravel(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: real(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: repeat(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: reshape(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: resize(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: round(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: searchsorted(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: setfield(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: setflags(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: shape(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: size(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: sort(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: squeeze(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: std(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: strides(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: sum(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: swapaxes(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: take(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: tobytes(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: tofile(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: tolist(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: tostring(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: trace(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: transpose(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: var(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.


   .. py:method:: view(*args, **kwargs)

      Complex number type composed of two extended-precision floating-point
      numbers.

      :Character code: ``'G'``
      :Alias: `numpy.clongfloat`
      :Alias: `numpy.longcomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex256`: Complex number type composed of 2 128-bit extended-precision floating-point numbers.



.. py:class:: csingle


   Complex number type composed of two single-precision floating-point
       numbers.

       :Character code: ``'F'``
       :Canonical name: `numpy.csingle`
       :Alias: `numpy.singlecomplex`
       :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.

   .. py:method:: T(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: all(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: any(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: argmax(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: argmin(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: argsort(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: astype(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: base(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: byteswap(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: choose(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: clip(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: compress(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: conj(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: conjugate(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: copy(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: cumprod(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: cumsum(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: data(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: diagonal(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: dtype(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: dump(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: dumps(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: fill(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: flags(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: flat(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: flatten(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: getfield(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: imag(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: item(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: itemset(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: itemsize(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: max(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: mean(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: min(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: nbytes(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: ndim(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: newbyteorder(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: nonzero(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: prod(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: ptp(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: put(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: ravel(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: real(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: repeat(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: reshape(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: resize(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: round(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: searchsorted(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: setfield(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: setflags(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: shape(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: size(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: sort(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: squeeze(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: std(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: strides(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: sum(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: swapaxes(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: take(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: tobytes(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: tofile(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: tolist(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: tostring(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: trace(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: transpose(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: var(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.


   .. py:method:: view(*args, **kwargs)

      Complex number type composed of two single-precision floating-point
      numbers.

      :Character code: ``'F'``
      :Canonical name: `numpy.csingle`
      :Alias: `numpy.singlecomplex`
      :Alias on this platform (Linux x86_64): `numpy.complex64`: Complex number type composed of 2 32-bit-precision floating-point numbers.



.. py:class:: double


   Double-precision floating-point number type, compatible with Python `float`
       and C ``double``.

       :Character code: ``'d'``
       :Canonical name: `numpy.double`
       :Alias: `numpy.float_`
       :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.

   .. py:method:: T(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: all(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: any(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: argmax(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: argmin(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: argsort(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: as_integer_ratio(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: astype(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: base(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: byteswap(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: choose(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: clip(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: compress(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: conj(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: conjugate(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: copy(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: cumprod(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: cumsum(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: data(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: diagonal(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: dtype(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: dump(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: dumps(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: fill(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: flags(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: flat(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: flatten(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: fromhex(string, /)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: getfield(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: hex(/)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: imag(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: is_integer(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: item(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: itemset(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: itemsize(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: max(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: mean(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: min(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: nbytes(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: ndim(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: newbyteorder(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: nonzero(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: prod(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: ptp(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: put(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: ravel(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: real(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: repeat(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: reshape(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: resize(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: round(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: searchsorted(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: setfield(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: setflags(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: shape(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: size(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: sort(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: squeeze(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: std(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: strides(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: sum(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: swapaxes(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: take(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: tobytes(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: tofile(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: tolist(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: tostring(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: trace(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: transpose(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: var(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: view(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.



.. py:data:: e
   :type: float

   

.. py:data:: euler_gamma
   :type: float

   

.. py:class:: float32


   Single-precision floating-point number type, compatible with C ``float``.

       :Character code: ``'f'``
       :Canonical name: `numpy.single`
       :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.

   .. py:method:: T(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: all(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: any(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: argmax(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: argmin(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: argsort(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: as_integer_ratio(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: astype(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: base(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: byteswap(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: choose(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: clip(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: compress(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: conj(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: conjugate(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: copy(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: cumprod(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: cumsum(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: data(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: diagonal(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: dtype(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: dump(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: dumps(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: fill(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: flags(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: flat(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: flatten(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: getfield(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: imag(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: is_integer(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: item(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: itemset(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: itemsize(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: max(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: mean(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: min(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: nbytes(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: ndim(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: newbyteorder(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: nonzero(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: prod(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: ptp(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: put(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: ravel(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: real(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: repeat(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: reshape(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: resize(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: round(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: searchsorted(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: setfield(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: setflags(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: shape(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: size(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: sort(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: squeeze(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: std(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: strides(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: sum(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: swapaxes(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: take(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: tobytes(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: tofile(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: tolist(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: tostring(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: trace(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: transpose(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: var(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: view(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.



.. py:class:: float64


   Double-precision floating-point number type, compatible with Python `float`
       and C ``double``.

       :Character code: ``'d'``
       :Canonical name: `numpy.double`
       :Alias: `numpy.float_`
       :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.

   .. py:method:: T(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: all(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: any(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: argmax(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: argmin(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: argsort(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: as_integer_ratio(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: astype(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: base(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: byteswap(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: choose(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: clip(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: compress(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: conj(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: conjugate(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: copy(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: cumprod(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: cumsum(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: data(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: diagonal(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: dtype(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: dump(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: dumps(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: fill(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: flags(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: flat(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: flatten(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: fromhex(string, /)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: getfield(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: hex(/)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: imag(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: is_integer(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: item(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: itemset(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: itemsize(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: max(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: mean(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: min(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: nbytes(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: ndim(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: newbyteorder(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: nonzero(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: prod(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: ptp(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: put(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: ravel(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: real(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: repeat(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: reshape(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: resize(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: round(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: searchsorted(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: setfield(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: setflags(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: shape(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: size(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: sort(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: squeeze(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: std(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: strides(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: sum(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: swapaxes(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: take(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: tobytes(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: tofile(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: tolist(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: tostring(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: trace(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: transpose(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: var(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.


   .. py:method:: view(*args, **kwargs)

      Double-precision floating-point number type, compatible with Python `float`
      and C ``double``.

      :Character code: ``'d'``
      :Canonical name: `numpy.double`
      :Alias: `numpy.float_`
      :Alias on this platform (Linux x86_64): `numpy.float64`: 64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa.



.. py:class:: half


   Half-precision floating-point number type.

       :Character code: ``'e'``
       :Canonical name: `numpy.half`
       :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.

   .. py:method:: T(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: all(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: any(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: argmax(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: argmin(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: argsort(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: as_integer_ratio(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: astype(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: base(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: byteswap(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: choose(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: clip(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: compress(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: conj(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: conjugate(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: copy(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: cumprod(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: cumsum(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: data(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: diagonal(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: dtype(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: dump(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: dumps(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: fill(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: flags(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: flat(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: flatten(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: getfield(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: imag(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: is_integer(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: item(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: itemset(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: itemsize(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: max(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: mean(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: min(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: nbytes(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: ndim(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: newbyteorder(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: nonzero(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: prod(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: ptp(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: put(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: ravel(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: real(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: repeat(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: reshape(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: resize(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: round(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: searchsorted(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: setfield(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: setflags(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: shape(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: size(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: sort(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: squeeze(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: std(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: strides(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: sum(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: swapaxes(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: take(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: tobytes(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: tofile(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: tolist(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: tostring(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: trace(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: transpose(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: var(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.


   .. py:method:: view(*args, **kwargs)

      Half-precision floating-point number type.

      :Character code: ``'e'``
      :Canonical name: `numpy.half`
      :Alias on this platform (Linux x86_64): `numpy.float16`: 16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa.



.. py:data:: inf
   :type: float

   

.. py:data:: infty
   :type: float

   

.. py:class:: int16


   Signed integer type, compatible with C ``short``.

       :Character code: ``'h'``
       :Canonical name: `numpy.short`
       :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).

   .. py:method:: T(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: all(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: any(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: argmax(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: argmin(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: argsort(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: astype(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: base(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: bit_count(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: byteswap(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: choose(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: clip(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: compress(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: conj(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: conjugate(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: copy(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: cumprod(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: cumsum(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: data(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: denominator(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: diagonal(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: dtype(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: dump(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: dumps(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: fill(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: flags(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: flat(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: flatten(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: getfield(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: imag(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: is_integer(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: item(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: itemset(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: itemsize(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: max(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: mean(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: min(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: nbytes(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: ndim(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: nonzero(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: numerator(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: prod(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: ptp(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: put(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: ravel(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: real(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: repeat(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: reshape(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: resize(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: round(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: searchsorted(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: setfield(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: setflags(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: shape(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: size(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: sort(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: squeeze(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: std(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: strides(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: sum(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: swapaxes(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: take(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: tobytes(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: tofile(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: tolist(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: tostring(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: trace(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: transpose(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: var(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: view(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).



.. py:class:: int32


   Signed integer type, compatible with C ``int``.

       :Character code: ``'i'``
       :Canonical name: `numpy.intc`
       :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).

   .. py:method:: T(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: all(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: any(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: argmax(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: argmin(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: argsort(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: astype(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: base(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: bit_count(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: byteswap(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: choose(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: clip(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: compress(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: conj(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: conjugate(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: copy(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: cumprod(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: cumsum(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: data(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: denominator(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: diagonal(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: dtype(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: dump(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: dumps(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: fill(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: flags(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: flat(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: flatten(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: getfield(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: imag(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: is_integer(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: item(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: itemset(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: itemsize(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: max(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: mean(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: min(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: nbytes(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: ndim(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: nonzero(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: numerator(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: prod(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: ptp(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: put(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: ravel(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: real(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: repeat(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: reshape(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: resize(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: round(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: searchsorted(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: setfield(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: setflags(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: shape(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: size(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: sort(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: squeeze(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: std(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: strides(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: sum(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: swapaxes(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: take(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: tobytes(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: tofile(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: tolist(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: tostring(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: trace(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: transpose(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: var(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: view(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).



.. py:class:: int64


   Signed integer type, compatible with Python `int` and C ``long``.

       :Character code: ``'l'``
       :Canonical name: `numpy.int_`
       :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
       :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.

   .. py:method:: T(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: all(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: any(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: argmax(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: argmin(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: argsort(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: astype(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: base(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: bit_count(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: byteswap(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: choose(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: clip(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: compress(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: conj(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: conjugate(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: copy(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: cumprod(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: cumsum(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: data(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: denominator(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: diagonal(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: dtype(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: dump(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: dumps(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: fill(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: flags(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: flat(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: flatten(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: getfield(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: imag(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: is_integer(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: item(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: itemset(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: itemsize(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: max(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: mean(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: min(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: nbytes(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: ndim(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: newbyteorder(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: nonzero(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: numerator(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: prod(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: ptp(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: put(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: ravel(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: real(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: repeat(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: reshape(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: resize(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: round(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: searchsorted(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: setfield(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: setflags(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: shape(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: size(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: sort(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: squeeze(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: std(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: strides(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: sum(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: swapaxes(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: take(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: tobytes(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: tofile(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: tolist(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: tostring(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: trace(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: transpose(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: var(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: view(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.



.. py:class:: int8


   Signed integer type, compatible with C ``char``.

       :Character code: ``'b'``
       :Canonical name: `numpy.byte`
       :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).

   .. py:method:: T(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: all(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: any(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: argmax(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: argmin(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: argsort(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: astype(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: base(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: bit_count(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: byteswap(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: choose(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: clip(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: compress(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: conj(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: conjugate(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: copy(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: cumprod(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: cumsum(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: data(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: denominator(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: diagonal(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: dtype(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: dump(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: dumps(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: fill(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: flags(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: flat(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: flatten(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: getfield(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: imag(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: is_integer(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: item(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: itemset(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: itemsize(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: max(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: mean(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: min(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: nbytes(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: ndim(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: nonzero(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: numerator(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: prod(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: ptp(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: put(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: ravel(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: real(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: repeat(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: reshape(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: resize(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: round(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: searchsorted(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: setfield(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: setflags(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: shape(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: size(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: sort(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: squeeze(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: std(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: strides(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: sum(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: swapaxes(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: take(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: tobytes(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: tofile(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: tolist(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: tostring(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: trace(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: transpose(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: var(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).


   .. py:method:: view(*args, **kwargs)

      Signed integer type, compatible with C ``char``.

      :Character code: ``'b'``
      :Canonical name: `numpy.byte`
      :Alias on this platform (Linux x86_64): `numpy.int8`: 8-bit signed integer (``-128`` to ``127``).



.. py:class:: int_


   Signed integer type, compatible with Python `int` and C ``long``.

       :Character code: ``'l'``
       :Canonical name: `numpy.int_`
       :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
       :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.

   .. py:method:: T(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: all(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: any(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: argmax(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: argmin(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: argsort(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: astype(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: base(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: bit_count(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: byteswap(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: choose(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: clip(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: compress(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: conj(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: conjugate(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: copy(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: cumprod(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: cumsum(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: data(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: denominator(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: diagonal(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: dtype(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: dump(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: dumps(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: fill(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: flags(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: flat(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: flatten(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: getfield(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: imag(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: is_integer(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: item(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: itemset(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: itemsize(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: max(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: mean(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: min(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: nbytes(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: ndim(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: newbyteorder(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: nonzero(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: numerator(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: prod(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: ptp(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: put(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: ravel(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: real(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: repeat(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: reshape(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: resize(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: round(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: searchsorted(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: setfield(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: setflags(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: shape(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: size(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: sort(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: squeeze(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: std(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: strides(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: sum(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: swapaxes(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: take(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: tobytes(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: tofile(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: tolist(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: tostring(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: trace(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: transpose(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: var(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.


   .. py:method:: view(*args, **kwargs)

      Signed integer type, compatible with Python `int` and C ``long``.

      :Character code: ``'l'``
      :Canonical name: `numpy.int_`
      :Alias on this platform (Linux x86_64): `numpy.int64`: 64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``).
      :Alias on this platform (Linux x86_64): `numpy.intp`: Signed integer large enough to fit pointer, compatible with C ``intptr_t``.



.. py:class:: intc


   Signed integer type, compatible with C ``int``.

       :Character code: ``'i'``
       :Canonical name: `numpy.intc`
       :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).

   .. py:method:: T(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: all(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: any(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: argmax(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: argmin(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: argsort(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: astype(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: base(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: bit_count(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: byteswap(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: choose(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: clip(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: compress(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: conj(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: conjugate(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: copy(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: cumprod(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: cumsum(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: data(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: denominator(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: diagonal(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: dtype(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: dump(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: dumps(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: fill(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: flags(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: flat(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: flatten(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: getfield(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: imag(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: is_integer(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: item(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: itemset(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: itemsize(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: max(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: mean(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: min(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: nbytes(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: ndim(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: nonzero(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: numerator(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: prod(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: ptp(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: put(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: ravel(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: real(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: repeat(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: reshape(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: resize(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: round(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: searchsorted(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: setfield(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: setflags(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: shape(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: size(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: sort(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: squeeze(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: std(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: strides(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: sum(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: swapaxes(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: take(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: tobytes(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: tofile(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: tolist(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: tostring(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: trace(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: transpose(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: var(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).


   .. py:method:: view(*args, **kwargs)

      Signed integer type, compatible with C ``int``.

      :Character code: ``'i'``
      :Canonical name: `numpy.intc`
      :Alias on this platform (Linux x86_64): `numpy.int32`: 32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``).



.. py:class:: longdouble


   Extended-precision floating-point number type, compatible with C
       ``long double`` but not necessarily with IEEE 754 quadruple-precision.

       :Character code: ``'g'``
       :Alias: `numpy.longfloat`
       :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.

   .. py:method:: T(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: all(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: any(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: argmax(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: argmin(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: argsort(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: as_integer_ratio(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: astype(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: base(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: byteswap(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: choose(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: clip(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: compress(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: conj(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: conjugate(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: copy(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: cumprod(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: cumsum(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: data(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: diagonal(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: dtype(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: dump(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: dumps(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: fill(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: flags(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: flat(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: flatten(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: getfield(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: imag(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: is_integer(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: item(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: itemset(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: itemsize(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: max(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: mean(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: min(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: nbytes(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: ndim(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: newbyteorder(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: nonzero(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: prod(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: ptp(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: put(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: ravel(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: real(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: repeat(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: reshape(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: resize(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: round(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: searchsorted(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: setfield(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: setflags(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: shape(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: size(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: sort(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: squeeze(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: std(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: strides(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: sum(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: swapaxes(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: take(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: tobytes(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: tofile(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: tolist(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: tostring(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: trace(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: transpose(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: var(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.


   .. py:method:: view(*args, **kwargs)

      Extended-precision floating-point number type, compatible with C
      ``long double`` but not necessarily with IEEE 754 quadruple-precision.

      :Character code: ``'g'``
      :Alias: `numpy.longfloat`
      :Alias on this platform (Linux x86_64): `numpy.float128`: 128-bit extended-precision floating-point number type.



.. py:class:: longlong


   Signed integer type, compatible with C ``long long``.

       :Character code: ``'q'``

   .. py:method:: T(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: all(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: any(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: argmax(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: argmin(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: argsort(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: astype(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: base(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: bit_count(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: byteswap(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: choose(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: clip(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: compress(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: conj(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: conjugate(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: copy(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: cumprod(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: cumsum(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: data(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: denominator(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: diagonal(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: dtype(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: dump(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: dumps(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: fill(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: flags(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: flat(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: flatten(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: getfield(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: imag(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: is_integer(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: item(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: itemset(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: itemsize(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: max(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: mean(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: min(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: nbytes(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: ndim(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: newbyteorder(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: nonzero(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: numerator(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: prod(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: ptp(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: put(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: ravel(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: real(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: repeat(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: reshape(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: resize(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: round(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: searchsorted(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: setfield(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: setflags(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: shape(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: size(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: sort(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: squeeze(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: std(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: strides(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: sum(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: swapaxes(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: take(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: tobytes(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: tofile(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: tolist(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: tostring(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: trace(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: transpose(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: var(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``


   .. py:method:: view(*args, **kwargs)

      Signed integer type, compatible with C ``long long``.

      :Character code: ``'q'``



.. py:data:: nan
   :type: float

   

.. py:data:: newaxis
   :type: None

   

.. py:data:: pi
   :type: float

   

.. py:class:: short


   Signed integer type, compatible with C ``short``.

       :Character code: ``'h'``
       :Canonical name: `numpy.short`
       :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).

   .. py:method:: T(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: all(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: any(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: argmax(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: argmin(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: argsort(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: astype(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: base(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: bit_count(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: byteswap(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: choose(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: clip(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: compress(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: conj(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: conjugate(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: copy(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: cumprod(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: cumsum(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: data(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: denominator(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: diagonal(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: dtype(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: dump(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: dumps(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: fill(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: flags(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: flat(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: flatten(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: getfield(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: imag(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: is_integer(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: item(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: itemset(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: itemsize(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: max(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: mean(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: min(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: nbytes(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: ndim(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: nonzero(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: numerator(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: prod(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: ptp(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: put(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: ravel(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: real(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: repeat(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: reshape(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: resize(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: round(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: searchsorted(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: setfield(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: setflags(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: shape(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: size(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: sort(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: squeeze(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: std(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: strides(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: sum(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: swapaxes(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: take(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: tobytes(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: tofile(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: tolist(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: tostring(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: trace(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: transpose(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: var(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).


   .. py:method:: view(*args, **kwargs)

      Signed integer type, compatible with C ``short``.

      :Character code: ``'h'``
      :Canonical name: `numpy.short`
      :Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).



.. py:class:: single


   Single-precision floating-point number type, compatible with C ``float``.

       :Character code: ``'f'``
       :Canonical name: `numpy.single`
       :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.

   .. py:method:: T(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: all(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: any(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: argmax(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: argmin(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: argsort(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: as_integer_ratio(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: astype(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: base(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: byteswap(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: choose(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: clip(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: compress(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: conj(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: conjugate(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: copy(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: cumprod(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: cumsum(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: data(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: diagonal(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: dtype(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: dump(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: dumps(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: fill(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: flags(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: flat(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: flatten(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: getfield(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: imag(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: is_integer(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: item(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: itemset(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: itemsize(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: max(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: mean(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: min(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: nbytes(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: ndim(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: newbyteorder(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: nonzero(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: prod(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: ptp(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: put(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: ravel(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: real(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: repeat(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: reshape(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: resize(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: round(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: searchsorted(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: setfield(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: setflags(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: shape(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: size(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: sort(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: squeeze(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: std(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: strides(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: sum(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: swapaxes(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: take(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: tobytes(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: tofile(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: tolist(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: tostring(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: trace(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: transpose(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: var(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.


   .. py:method:: view(*args, **kwargs)

      Single-precision floating-point number type, compatible with C ``float``.

      :Character code: ``'f'``
      :Canonical name: `numpy.single`
      :Alias on this platform (Linux x86_64): `numpy.float32`: 32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa.



.. py:class:: ubyte


   Unsigned integer type, compatible with C ``unsigned char``.

       :Character code: ``'B'``
       :Canonical name: `numpy.ubyte`
       :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).

   .. py:method:: T(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: all(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: any(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: argmax(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: argmin(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: argsort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: astype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: base(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: bit_count(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: byteswap(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: choose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: clip(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: compress(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: conj(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: conjugate(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: copy(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: cumprod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: cumsum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: data(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: denominator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: diagonal(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: dtype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: dump(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: dumps(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: fill(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: flags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: flat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: flatten(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: getfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: imag(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: is_integer(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: item(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: itemset(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: itemsize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: max(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: mean(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: min(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: nbytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: ndim(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: nonzero(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: numerator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: prod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: ptp(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: put(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: ravel(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: real(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: repeat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: reshape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: resize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: round(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: searchsorted(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: setfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: setflags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: shape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: size(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: sort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: squeeze(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: std(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: strides(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: sum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: swapaxes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: take(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: tobytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: tofile(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: tolist(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: tostring(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: trace(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: transpose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: var(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: view(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).



.. py:class:: uint


   Unsigned integer type, compatible with C ``unsigned long``.

       :Character code: ``'L'``
       :Canonical name: `numpy.uint`
       :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
       :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.

   .. py:method:: T(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: all(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: any(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: argmax(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: argmin(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: argsort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: astype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: base(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: bit_count(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: byteswap(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: choose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: clip(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: compress(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: conj(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: conjugate(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: copy(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: cumprod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: cumsum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: data(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: denominator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: diagonal(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: dtype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: dump(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: dumps(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: fill(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: flags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: flat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: flatten(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: getfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: imag(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: is_integer(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: item(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: itemset(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: itemsize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: max(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: mean(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: min(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: nbytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: ndim(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: newbyteorder(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: nonzero(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: numerator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: prod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: ptp(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: put(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: ravel(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: real(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: repeat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: reshape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: resize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: round(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: searchsorted(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: setfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: setflags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: shape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: size(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: sort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: squeeze(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: std(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: strides(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: sum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: swapaxes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: take(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: tobytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: tofile(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: tolist(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: tostring(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: trace(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: transpose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: var(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: view(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.



.. py:class:: uint16


   Unsigned integer type, compatible with C ``unsigned short``.

       :Character code: ``'H'``
       :Canonical name: `numpy.ushort`
       :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).

   .. py:method:: T(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: all(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: any(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: argmax(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: argmin(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: argsort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: astype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: base(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: bit_count(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: byteswap(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: choose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: clip(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: compress(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: conj(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: conjugate(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: copy(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: cumprod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: cumsum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: data(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: denominator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: diagonal(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: dtype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: dump(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: dumps(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: fill(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: flags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: flat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: flatten(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: getfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: imag(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: is_integer(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: item(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: itemset(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: itemsize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: max(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: mean(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: min(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: nbytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: ndim(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: nonzero(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: numerator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: prod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: ptp(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: put(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: ravel(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: real(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: repeat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: reshape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: resize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: round(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: searchsorted(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: setfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: setflags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: shape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: size(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: sort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: squeeze(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: std(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: strides(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: sum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: swapaxes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: take(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: tobytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: tofile(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: tolist(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: tostring(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: trace(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: transpose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: var(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: view(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).



.. py:class:: uint32


   Unsigned integer type, compatible with C ``unsigned int``.

       :Character code: ``'I'``
       :Canonical name: `numpy.uintc`
       :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).

   .. py:method:: T(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: all(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: any(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: argmax(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: argmin(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: argsort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: astype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: base(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: bit_count(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: byteswap(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: choose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: clip(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: compress(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: conj(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: conjugate(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: copy(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: cumprod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: cumsum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: data(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: denominator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: diagonal(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: dtype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: dump(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: dumps(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: fill(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: flags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: flat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: flatten(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: getfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: imag(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: is_integer(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: item(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: itemset(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: itemsize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: max(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: mean(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: min(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: nbytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: ndim(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: nonzero(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: numerator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: prod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: ptp(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: put(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: ravel(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: real(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: repeat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: reshape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: resize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: round(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: searchsorted(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: setfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: setflags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: shape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: size(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: sort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: squeeze(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: std(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: strides(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: sum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: swapaxes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: take(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: tobytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: tofile(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: tolist(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: tostring(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: trace(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: transpose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: var(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: view(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).



.. py:class:: uint64


   Unsigned integer type, compatible with C ``unsigned long``.

       :Character code: ``'L'``
       :Canonical name: `numpy.uint`
       :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
       :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.

   .. py:method:: T(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: all(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: any(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: argmax(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: argmin(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: argsort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: astype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: base(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: bit_count(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: byteswap(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: choose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: clip(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: compress(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: conj(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: conjugate(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: copy(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: cumprod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: cumsum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: data(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: denominator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: diagonal(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: dtype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: dump(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: dumps(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: fill(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: flags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: flat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: flatten(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: getfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: imag(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: is_integer(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: item(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: itemset(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: itemsize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: max(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: mean(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: min(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: nbytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: ndim(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: newbyteorder(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: nonzero(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: numerator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: prod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: ptp(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: put(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: ravel(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: real(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: repeat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: reshape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: resize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: round(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: searchsorted(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: setfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: setflags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: shape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: size(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: sort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: squeeze(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: std(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: strides(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: sum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: swapaxes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: take(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: tobytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: tofile(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: tolist(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: tostring(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: trace(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: transpose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: var(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.


   .. py:method:: view(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned long``.

      :Character code: ``'L'``
      :Canonical name: `numpy.uint`
      :Alias on this platform (Linux x86_64): `numpy.uint64`: 64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``).
      :Alias on this platform (Linux x86_64): `numpy.uintp`: Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``.



.. py:class:: uint8


   Unsigned integer type, compatible with C ``unsigned char``.

       :Character code: ``'B'``
       :Canonical name: `numpy.ubyte`
       :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).

   .. py:method:: T(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: all(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: any(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: argmax(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: argmin(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: argsort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: astype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: base(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: bit_count(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: byteswap(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: choose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: clip(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: compress(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: conj(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: conjugate(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: copy(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: cumprod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: cumsum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: data(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: denominator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: diagonal(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: dtype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: dump(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: dumps(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: fill(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: flags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: flat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: flatten(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: getfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: imag(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: is_integer(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: item(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: itemset(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: itemsize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: max(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: mean(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: min(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: nbytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: ndim(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: nonzero(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: numerator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: prod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: ptp(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: put(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: ravel(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: real(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: repeat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: reshape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: resize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: round(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: searchsorted(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: setfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: setflags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: shape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: size(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: sort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: squeeze(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: std(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: strides(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: sum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: swapaxes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: take(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: tobytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: tofile(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: tolist(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: tostring(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: trace(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: transpose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: var(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).


   .. py:method:: view(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned char``.

      :Character code: ``'B'``
      :Canonical name: `numpy.ubyte`
      :Alias on this platform (Linux x86_64): `numpy.uint8`: 8-bit unsigned integer (``0`` to ``255``).



.. py:class:: uintc


   Unsigned integer type, compatible with C ``unsigned int``.

       :Character code: ``'I'``
       :Canonical name: `numpy.uintc`
       :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).

   .. py:method:: T(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: all(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: any(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: argmax(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: argmin(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: argsort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: astype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: base(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: bit_count(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: byteswap(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: choose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: clip(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: compress(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: conj(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: conjugate(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: copy(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: cumprod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: cumsum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: data(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: denominator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: diagonal(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: dtype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: dump(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: dumps(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: fill(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: flags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: flat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: flatten(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: getfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: imag(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: is_integer(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: item(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: itemset(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: itemsize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: max(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: mean(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: min(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: nbytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: ndim(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: nonzero(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: numerator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: prod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: ptp(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: put(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: ravel(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: real(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: repeat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: reshape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: resize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: round(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: searchsorted(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: setfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: setflags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: shape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: size(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: sort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: squeeze(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: std(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: strides(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: sum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: swapaxes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: take(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: tobytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: tofile(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: tolist(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: tostring(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: trace(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: transpose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: var(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).


   .. py:method:: view(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned int``.

      :Character code: ``'I'``
      :Canonical name: `numpy.uintc`
      :Alias on this platform (Linux x86_64): `numpy.uint32`: 32-bit unsigned integer (``0`` to ``4_294_967_295``).



.. py:class:: ulonglong


   Signed integer type, compatible with C ``unsigned long long``.

       :Character code: ``'Q'``

   .. py:method:: T(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: all(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: any(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: argmax(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: argmin(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: argsort(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: astype(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: base(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: bit_count(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: byteswap(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: choose(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: clip(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: compress(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: conj(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: conjugate(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: copy(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: cumprod(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: cumsum(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: data(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: denominator(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: diagonal(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: dtype(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: dump(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: dumps(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: fill(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: flags(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: flat(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: flatten(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: getfield(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: imag(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: is_integer(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: item(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: itemset(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: itemsize(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: max(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: mean(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: min(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: nbytes(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: ndim(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: newbyteorder(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: nonzero(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: numerator(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: prod(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: ptp(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: put(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: ravel(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: real(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: repeat(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: reshape(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: resize(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: round(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: searchsorted(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: setfield(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: setflags(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: shape(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: size(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: sort(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: squeeze(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: std(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: strides(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: sum(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: swapaxes(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: take(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: tobytes(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: tofile(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: tolist(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: tostring(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: trace(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: transpose(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: var(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``


   .. py:method:: view(*args, **kwargs)

      Signed integer type, compatible with C ``unsigned long long``.

      :Character code: ``'Q'``



.. py:class:: ushort


   Unsigned integer type, compatible with C ``unsigned short``.

       :Character code: ``'H'``
       :Canonical name: `numpy.ushort`
       :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).

   .. py:method:: T(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: all(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: any(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: argmax(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: argmin(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: argsort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: astype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: base(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: bit_count(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: byteswap(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: choose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: clip(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: compress(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: conj(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: conjugate(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: copy(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: cumprod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: cumsum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: data(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: denominator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: diagonal(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: dtype(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: dump(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: dumps(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: fill(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: flags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: flat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: flatten(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: getfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: imag(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: is_integer(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: item(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: itemset(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: itemsize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: max(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: mean(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: min(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: nbytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: ndim(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: newbyteorder(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: nonzero(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: numerator(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: prod(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: ptp(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: put(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: ravel(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: real(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: repeat(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: reshape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: resize(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: round(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: searchsorted(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: setfield(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: setflags(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: shape(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: size(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: sort(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: squeeze(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: std(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: strides(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: sum(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: swapaxes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: take(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: tobytes(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: tofile(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: tolist(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: tostring(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: trace(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: transpose(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: var(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).


   .. py:method:: view(*args, **kwargs)

      Unsigned integer type, compatible with C ``unsigned short``.

      :Character code: ``'H'``
      :Canonical name: `numpy.ushort`
      :Alias on this platform (Linux x86_64): `numpy.uint16`: 16-bit unsigned integer (``0`` to ``65_535``).



