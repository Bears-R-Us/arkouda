arkouda.pandas.dataframe
========================

.. py:module:: arkouda.pandas.dataframe

.. autoapi-nested-parse::

   Pandas-like DataFrame module for Arkouda.

   This module provides distributed data frame functionality inspired by pandas,
   enabling scalable manipulation of structured data using Arkouda's parallel computing
   backend.

   Public Classes
   --------------
   DataFrame : Core tabular data structure with labeled columns.
   DataFrameGroupBy : Enables group-by operations on DataFrames.
   DiffAggregate : Utility class for differential aggregation during group-by.

   Public Functions
   ----------------
   intersect(left, right) : Compute the intersection of two arrays.
   invert_permutation(p) : Return the inverse of a permutation array.
   intx(a) : Find all the rows that are in the interesection of two dataframes.
   merge(left, right, ...) : Merge two DataFrames using SQL-style join operations.

   .. rubric:: Notes

   This module implements a subset of pandas-like features and is designed
   for use on large-scale, distributed datasets.

   .. rubric:: Examples

   >>> import arkouda as ak
   >>> from arkouda.pandas.dataframe import DataFrame

   >>> df = DataFrame()
   >>> df['x'] = ak.arange(5)
   >>> df['y'] = df['x'] + 1
   >>> df
      x  y
   0  0  1
   1  1  2
   2  2  3
   3  3  4
   4  4  5 (5 rows x 2 columns)



Classes
-------

.. autoapisummary::

   arkouda.pandas.dataframe.DataFrame
   arkouda.pandas.dataframe.DataFrameGroupBy
   arkouda.pandas.dataframe.DiffAggregate


Functions
---------

.. autoapisummary::

   arkouda.pandas.dataframe.intersect
   arkouda.pandas.dataframe.intx
   arkouda.pandas.dataframe.invert_permutation
   arkouda.pandas.dataframe.merge


Module Contents
---------------

.. py:class:: DataFrame(initialdata=None, index=None, columns=None)

   Bases: :py:obj:`collections.UserDict`


   A DataFrame structure based on arkouda arrays.

   :param initialdata: Each list/dictionary entry corresponds to one column of the data and
                       should be a homogenous type. Different columns may have different
                       types. If using a dictionary, keys should be strings.
   :type initialdata: List or dictionary of lists, tuples, or pdarrays
   :param index: Index for the resulting frame. Defaults to an integer range.
   :type index: Index, pdarray, or Strings
   :param columns: Column labels to use if the data does not include them. Elements must
                   be strings. Defaults to an stringified integer range.
   :type columns: List, tuple, pdarray, or Strings

   .. rubric:: Examples

   >>> import arkouda as ak

   Create an empty DataFrame and add a column of data:
   >>> import arkouda as ak
   >>> df = ak.DataFrame()
   >>> df['a'] = ak.array([1,2,3])
   >>> df
      a
   0  1
   1  2
   2  3 (3 rows x 1 columns)

   Create a new DataFrame using a dictionary of data:

   >>> userName = ak.array(['Alice', 'Bob', 'Alice', 'Carol', 'Bob', 'Alice'])
   >>> userID = ak.array([111, 222, 111, 333, 222, 111])
   >>> item = ak.array([0, 0, 1, 1, 2, 0])
   >>> day = ak.array([5, 5, 6, 5, 6, 6])
   >>> amount = ak.array([0.5, 0.6, 1.1, 1.2, 4.3, 0.6])
   >>> df = ak.DataFrame({
   ...     'userName': userName,
   ...     'userID': userID,
   ...     'item': item,
   ...     'day': day,
   ...     'amount': amount
   ... })
   >>> df
     userName  userID  item  day  amount
   0    Alice     111     0    5     0.5
   1      Bob     222     0    5     0.6
   2    Alice     111     1    6     1.1
   3    Carol     333     1    5     1.2
   4      Bob     222     2    6     4.3
   5    Alice     111     0    6     0.6 (6 rows x 5 columns)

   Indexing works slightly differently than with pandas:
   >>> df[0]
   {'userName': np.str_('Alice'), 'userID': np.int64(111), 'item': np.int64(0),
   'day': np.int64(5), 'amount': np.float64(0.5)}
   >>> df['userID']
   array([111 222 111 333 222 111])

   >>> df['userName']
   array(['Alice', 'Bob', 'Alice', 'Carol', 'Bob', 'Alice'])

   >>> df[ak.array([1,3,5])]
     userName  userID  item  day  amount
   1      Bob     222     0    5     0.6
   3    Carol     333     1    5     1.2
   5    Alice     111     0    6     0.6 (3 rows x 5 columns)

   Compute the stride:
   >>> df[1:5:1]
     userName  userID  item  day  amount
   1      Bob     222     0    5     0.6
   2    Alice     111     1    6     1.1
   3    Carol     333     1    5     1.2
   4      Bob     222     2    6     4.3 (4 rows x 5 columns)

   >>> df[ak.array([1,2,3])]
     userName  userID  item  day  amount
   1      Bob     222     0    5     0.6
   2    Alice     111     1    6     1.1
   3    Carol     333     1    5     1.2 (3 rows x 5 columns)

   >>> df[['userID', 'day']]
      userID  day
   0     111    5
   1     222    5
   2     111    6
   3     333    5
   4     222    6
   5     111    6 (6 rows x 2 columns)


   .. py:method:: GroupBy(keys, use_series=False, as_index=True, dropna=True) -> Union[DataFrameGroupBy, arkouda.pandas.groupbyclass.GroupBy]

      Group the dataframe by a column or a list of columns.

      :param keys: An (ordered) list of column names or a single string to group by.
      :type keys: str or list of str
      :param use_series: If True, returns an arkouda.pandas.dataframe.DataFrameGroupBy object.
                         Otherwise an arkouda.pandas.groupbyclass.GroupBy object.
      :type use_series: bool, default=False
      :param as_index: If True, groupby columns will be set as index
                       otherwise, the groupby columns will be treated as DataFrame columns.
      :type as_index: bool, default=True
      :param dropna: If True, and the groupby keys contain NaN values,
                     the NaN values together with the corresponding row will be dropped.
                     Otherwise, the rows corresponding to NaN values will be kept.
      :type dropna: bool, default=True

      :returns: If use_series = True, returns an arkouda.pandas.dataframe.DataFrameGroupBy object.
                Otherwise returns an arkouda.pandas.groupbyclass.GroupBy object.
      :rtype: arkouda.pandas.dataframe.DataFrameGroupBy or arkouda.pandas.groupbyclass.GroupBy

      .. seealso:: :py:obj:`arkouda.GroupBy`

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1.0, 1.0, 2.0, np.nan], 'col2': [4, 5, 6, 7]})
      >>> df
         col1  col2
      0   1.0     4
      1   1.0     5
      2   2.0     6
      3   NaN     7 (4 rows x 2 columns)

      >>> df.GroupBy("col1") # doctest: +SKIP
      <arkouda.groupbyclass.GroupBy object at 0x7dbc23462510>
      >>> df.GroupBy("col1").size()
      (array([1.00000000000000000 2.00000000000000000]), array([2 1]))

      >>> df.GroupBy("col1",use_series=True).size()
      col1
      1.0    2
      2.0    1
      dtype: int64
      >>> df.GroupBy("col1",use_series=True, as_index = False).size()
         col1  size
      0   1.0     2
      1   2.0     1 (2 rows x 2 columns)



   .. py:method:: all(axis=0) -> Union[arkouda.pandas.series.Series, bool]

      Return whether all elements are True, potentially over an axis.

      Returns True unless there at least one element along a Dataframe axis that is False.

      Currently, will ignore any columns that are not type bool.
      This is equivalent to the pandas option bool_only=True.

      :param axis: Indicate which axis or axes should be reduced.

                   0 / ‘index’ : reduce the index, return a Series whose index is the original column labels.

                   1 / ‘columns’ : reduce the columns, return a Series whose index is the original index.

                   None : reduce all axes, return a scalar.
      :type axis: {0 or ‘index’, 1 or ‘columns’, None}, default = 0

      :rtype: arkouda.pandas.series.Series or bool

      :raises ValueError: Raised if axis does not have a value in {0 or ‘index’, 1 or ‘columns’, None}.

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({"A":[True,True,True,False],"B":[True,True,True,False],
      ...          "C":[True,False,True,False],"D":[True,True,True,True]})
      >>> df
             A      B      C     D
      0   True   True   True  True
      1   True   True  False  True
      2   True   True   True  True
      3  False  False  False  True (4 rows x 4 columns)

      >>> df.all(axis=0)
      A    False
      B    False
      C    False
      D     True
      dtype: bool
      >>> df.all(axis=1)
      0     True
      1    False
      2     True
      3    False
      dtype: bool
      >>> df.all(axis=None)
      False



   .. py:method:: any(axis=0) -> Union[arkouda.pandas.series.Series, bool]

      Return whether any element is True, potentially over an axis.

      Returns False unless there is at least one element along a Dataframe axis that is True.

      Currently, will ignore any columns that are not type bool.
      This is equivalent to the pandas option bool_only=True.

      :param axis: Indicate which axis or axes should be reduced.

                   0 / ‘index’ : reduce the index, return a Series whose index is the original column labels.

                   1 / ‘columns’ : reduce the columns, return a Series whose index is the original index.

                   None : reduce all axes, return a scalar.
      :type axis: {0 or ‘index’, 1 or ‘columns’, None}, default = 0

      :rtype: arkouda.pandas.series.Series or bool

      :raises ValueError: Raised if axis does not have a value in {0 or ‘index’, 1 or ‘columns’, None}.

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({"A":[True,True,True,False],"B":[True,True,True,False],
      ...          "C":[True,False,True,False],"D":[False,False,False,False]})
      >>> df
             A      B      C      D
      0   True   True   True  False
      1   True   True  False  False
      2   True   True   True  False
      3  False  False  False  False (4 rows x 4 columns)

      >>> df.any(axis=0)
      A     True
      B     True
      C     True
      D    False
      dtype: bool
      >>> df.any(axis=1)
      0     True
      1     True
      2     True
      3    False
      dtype: bool
      >>> df.any(axis=None)
      True



   .. py:method:: append(other, ordered=True)

      Concatenate data from 'other' onto the end of this DataFrame, in place.

      Explicitly, use the arkouda concatenate function to append the data
      from each column in other to the end of self. This operation is done
      in place, in the sense that the underlying pdarrays are updated from
      the result of the arkouda concatenate function, rather than returning
      a new DataFrame object containing the result.

      :param other: The DataFrame object whose data will be appended to this DataFrame.
      :type other: DataFrame
      :param ordered: If False, allow rows to be interleaved for better performance (but
                      data within a row remains together). By default, append all rows
                      to the end, in input order.
      :type ordered: bool, default=True

      :returns: Appending occurs in-place, but result is returned for compatibility.
      :rtype: self

      .. rubric:: Examples

      >>> import arkouda as ak

      >>> df1 = ak.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
      >>> df1
          col1  col2
      0     1     3
      1     2     4 (2 rows x 2 columns)

      >>> df2 = ak.DataFrame({'col1': [3], 'col2': [5]})
      >>> df2
          col1  col2
      0     3     5 (1 rows x 2 columns)

      >>> df1.append(df2)
          col1  col2
      0     1     3
      1     2     4
      2     3     5 (3 rows x 2 columns)

      >>> df1
          col1  col2
      0     1     3
      1     2     4
      2     3     5 (3 rows x 2 columns)



   .. py:method:: apply_permutation(perm)

      Apply a permutation to an entire DataFrame.

      The operation is done in place and the original DataFrame will be modified.

      This may be useful if you want to unsort an DataFrame, or even to
      apply an arbitrary permutation such as the inverse of a sorting
      permutation.

      :param perm: A permutation array. Should be the same size as the data
                   arrays, and should consist of the integers [0,size-1] in
                   some order. Very minimal testing is done to ensure this
                   is a permutation.
      :type perm: pdarray

      .. seealso:: :py:obj:`sort`

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
      >>> df
         col1  col2
      0     1     4
      1     2     5
      2     3     6 (3 rows x 2 columns)

      >>> perm_arry = ak.array([0, 2, 1])
      >>> df.apply_permutation(perm_arry)
      >>> df
         col1  col2
      0     1     4
      2     3     6
      1     2     5 (3 rows x 2 columns)



   .. py:method:: argsort(key, ascending=True)

      Return the permutation that sorts the dataframe by `key`.

      :param key: The key to sort on.
      :type key: str
      :param ascending: If true, sort the key in ascending order.
                        Otherwise, sort the key in descending order.
      :type ascending: bool, default = True

      :returns: The permutation array that sorts the data on `key`.
      :rtype: arkouda.numpy.pdarrayclass.pdarray

      .. seealso:: :py:obj:`coargsort`

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1.1, 3.1, 2.1], 'col2': [6, 5, 4]})
      >>> df
         col1  col2
      0   1.1     6
      1   3.1     5
      2   2.1     4 (3 rows x 2 columns)

      >>> df.argsort('col1')
      array([0 2 1])
      >>> sorted_df1 = df[df.argsort('col1')]
      >>> sorted_df1
         col1  col2
      0   1.1     6
      2   2.1     4
      1   3.1     5 (3 rows x 2 columns)

      >>> df.argsort('col2')
      array([2 1 0])
      >>> sorted_df2 = df[df.argsort('col2')]
      >>> sorted_df2
         col1  col2
      2   2.1     4
      1   3.1     5
      0   1.1     6 (3 rows x 2 columns)



   .. py:method:: assign(**kwargs) -> DataFrame

      Assign new columns to a DataFrame.

      Return a new object with all original columns in addition to new ones.
      Existing columns that are re-assigned will be overwritten.

      :param \*\*kwargs: The column names are keywords. If the values are
                         callable, they are computed on the DataFrame and
                         assigned to the new columns. The callable must not
                         change input DataFrame (though pandas doesn't check it).
                         If the values are not callable, (e.g. a Series, scalar, or array),
                         they are simply assigned.
      :type \*\*kwargs: dict of {str: callable or Series}

      :returns: A new DataFrame with the new columns in addition to
                all the existing columns.
      :rtype: DataFrame

      .. rubric:: Notes

      Assigning multiple columns within the same ``assign`` is possible.
      Later items in '\*\*kwargs' may refer to newly created or modified
      columns in 'df'; items are computed and assigned into 'df' in order.

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'temp_c': [17.0, 25.0]},
      ...                   index=['Portland', 'Berkeley'])
      >>> df
                temp_c
      Portland    17.0
      Berkeley    25.0 (2 rows x 1 columns)

      Where the value is a callable, evaluated on `df`:
      >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)
                temp_c  temp_f
      Portland    17.0    62.6
      Berkeley    25.0    77.0 (2 rows x 2 columns)

      Alternatively, the same behavior can be achieved by directly
      referencing an existing Series or sequence:

      >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)
                temp_c  temp_f
      Portland    17.0    62.6
      Berkeley    25.0    77.0 (2 rows x 2 columns)

      You can create multiple columns within the same assign where one
      of the columns depends on another one defined within the same assign:

      >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,
      ...           temp_k=lambda x: (x['temp_f'] + 459.67) * 5 / 9)
                temp_c  temp_f  temp_k
      Portland    17.0    62.6  290.15
      Berkeley    25.0    77.0  298.15 (2 rows x 3 columns)



   .. py:method:: coargsort(keys, ascending=True)

      Return the permutation that sorts the dataframe by `keys`.

      Note: Sorting using Strings may not yield correct sort order.

      :param keys: The keys to sort on.
      :type keys: list of str

      :returns: The permutation array that sorts the data on `keys`.
      :rtype: arkouda.numpy.pdarrayclass.pdarray

      .. rubric:: Example

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [2, 2, 1], 'col2': [3, 4, 3], 'col3':[5, 6, 7]})
      >>> df
         col1  col2  col3
      0     2     3     5
      1     2     4     6
      2     1     3     7 (3 rows x 3 columns)

      >>> df.coargsort(['col1', 'col2'])
      array([2 0 1])
      >>>



   .. py:property:: columns

      An Index where the values are the column names of the dataframe.

      :returns: The values of the index are the column names of the dataframe.
      :rtype: arkouda.index.Index

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
      >>> df
         col1  col2
      0     1     3
      1     2     4 (2 rows x 2 columns)

      >>> df.columns
      Index(['col1', 'col2'], dtype='<U0')


   .. py:method:: concat(items, ordered=True)
      :classmethod:


      Essentially an append, but different formatting.



   .. py:method:: copy(deep=True)

      Make a copy of this object's data.

      When `deep = True` (default), a new object will be created with a copy of
      the calling object's data. Modifications to the data of the copy will not
      be reflected in the original object.


      When `deep = False` a new object will be created without copying the
      calling object's data. Any changes to the data of the original object will
      be reflected in the shallow copy, and vice versa.

      :param deep: When True, return a deep copy. Otherwise, return a shallow copy.
      :type deep: bool, default=True

      :returns: A deep or shallow copy according to caller specification.
      :rtype: DataFrame

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
      >>> df
         col1  col2
      0     1     3
      1     2     4 (2 rows x 2 columns)

      >>> df_deep = df.copy(deep=True)
      >>> df_deep['col1'] +=1
      >>> df
         col1  col2
      0     1     3
      1     2     4 (2 rows x 2 columns)

      >>> df_shallow = df.copy(deep=False)
      >>> df_shallow['col1'] +=1
      >>> df
         col1  col2
      0     2     3
      1     3     4 (2 rows x 2 columns)



   .. py:method:: corr() -> DataFrame

      Return new DataFrame with pairwise correlation of columns.

      :returns: Arkouda DataFrame containing correlation matrix of all columns.
      :rtype: DataFrame

      :raises RuntimeError: Raised if there's a server-side error thrown.

      .. seealso:: :py:obj:`pdarray.corr`

      .. rubric:: Notes

      Generate the correlation matrix using Pearson R for all columns.

      Attempts to convert to numeric values where possible for inclusion in the matrix.

      .. rubric:: Example

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2], 'col2': [-1, -2]})
      >>> df
         col1  col2
      0     1    -1
      1     2    -2 (2 rows x 2 columns)

      >>> corr = df.corr()
      >>> corr
            col1  col2
      col1   1.0  -1.0
      col2  -1.0   1.0 (2 rows x 2 columns)



   .. py:method:: count(axis: Union[int, str] = 0, numeric_only=False) -> arkouda.pandas.series.Series

      Count non-NA cells for each column or row.

      The values np.NaN are considered NA.

      :param axis: If 0 or ‘index’ counts are generated for each column.
                   If 1 or ‘columns’ counts are generated for each row.
      :type axis: {0 or 'index', 1 or 'columns'}, default 0
      :param numeric_only: Include only float, int or boolean data.
      :type numeric_only: bool = False

      :returns: For each column/row the number of non-NA/null entries.
      :rtype: Series

      :raises ValueError: Raised if axis is not 0, 1, 'index', or 'columns'.

      .. seealso:: :py:obj:`GroupBy.count`

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> import numpy as np
      >>> df = ak.DataFrame({'col_A': ak.array([7, np.nan]), 'col_B':ak.array([1, 9])})
      >>> df
         col_A  col_B
      0    7.0      1
      1    NaN      9 (2 rows x 2 columns)

      >>> df.count()
      col_A    1
      col_B    2
      dtype: int64

      >>> df = ak.DataFrame({'col_A': ak.array(["a","b","c"]), 'col_B':ak.array([1, np.nan, np.nan])})
      >>> df
        col_A  col_B
      0     a    1.0
      1     b    NaN
      2     c    NaN (3 rows x 2 columns)

      >>> df.count()
      col_A    3
      col_B    1
      dtype: int64

      >>> df.count(numeric_only=True)
      col_B    1
      dtype: int64

      >>> df.count(axis=1)
      0    2
      1    1
      2    1
      dtype: int64



   .. py:method:: drop(keys: Union[str, int, List[Union[str, int]]], axis: Union[str, int] = 0, inplace: bool = False) -> Union[None, DataFrame]

      Drop column/s or row/s from the dataframe.

      :param keys: The labels to be dropped on the given axis.
      :type keys: str, int or list
      :param axis: The axis on which to drop from. 0/'index' - drop rows, 1/'columns' - drop columns.
      :type axis: int or str
      :param inplace: When True, perform the operation on the calling object.
                      When False, return a new object.
      :type inplace: bool, default=False

      :returns: DateFrame when `inplace=False`;
                None when `inplace=True`
      :rtype: DataFrame or None

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
      >>> df
         col1  col2
      0     1     3
      1     2     4 (2 rows x 2 columns)

      Drop column
      >>> df.drop('col1', axis = 1)
         col2
      0     3
      1     4 (2 rows x 1 columns)

      Drop row
      >>> df.drop(0, axis = 0)
         col1  col2
      1     2     4 (1 rows x 2 columns)



   .. py:method:: drop_duplicates(subset=None, keep='first')

      Drop duplcated rows and returns resulting DataFrame.

      If a subset of the columns are provided then only one instance of each
      duplicated row will be returned (keep determines which row).

      :param subset: Iterable of column names to use to dedupe.
      :type subset: Iterable
      :param keep: Determines which duplicates (if any) to keep.
      :type keep: {'first', 'last'}, default='first'

      :returns: DataFrame with duplicates removed.
      :rtype: DataFrame

      .. rubric:: Example

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2, 2, 3], 'col2': [4, 5, 5, 6]})
      >>> df
         col1  col2
      0     1     4
      1     2     5
      2     2     5
      3     3     6 (4 rows x 2 columns)

      >>> df.drop_duplicates()
         col1  col2
      0     1     4
      1     2     5
      3     3     6 (3 rows x 2 columns)



   .. py:method:: dropna(axis: Union[int, str] = 0, how: Optional[str] = None, thresh: Optional[int] = None, ignore_index: bool = False) -> DataFrame

      Remove missing values.

      :param axis: Determine if rows or columns which contain missing values are removed.

                   0, or 'index': Drop rows which contain missing values.

                   1, or 'columns': Drop columns which contain missing value.

                   Only a single axis is allowed.
      :type axis: {0 or 'index', 1 or 'columns'}, default = 0
      :param how: Determine if row or column is removed from DataFrame, when we have at least one NA or all NA.

                  'any': If any NA values are present, drop that row or column.

                  'all': If all values are NA, drop that row or column.
      :type how: {'any', 'all'}, default='any'
      :param thresh: Require that many non - NA values.Cannot be combined with how.
      :type thresh: int, optional
      :param ignore_index: If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.
      :type ignore_index: bool, default ``False``

      :returns: DataFrame with NA entries dropped from it.
      :rtype: DataFrame

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> import numpy as np
      >>> df = ak.DataFrame(
      ...    {
      ...        "A": [True, True, True, True],
      ...        "B": [1, np.nan, 2, np.nan],
      ...        "C": [1, 2, 3, np.nan],
      ...        "D": [False, False, False, False],
      ...        "E": [1, 2, 3, 4],
      ...        "F": ["a", "b", "c", "d"],
      ...        "G": [1, 2, 3, 4],
      ...    }
      ...   )

      >>> df
            A    B    C      D  E  F  G
      0  True  1.0  1.0  False  1  a  1
      1  True  NaN  2.0  False  2  b  2
      2  True  2.0  3.0  False  3  c  3
      3  True  NaN  NaN  False  4  d  4 (4 rows x 7 columns)

      >>> df.dropna()
            A    B    C      D  E  F  G
      0  True  1.0  1.0  False  1  a  1
      2  True  2.0  3.0  False  3  c  3 (2 rows x 7 columns)

      >>> df.dropna(axis=1)
            A      D  E  F  G
      0  True  False  1  a  1
      1  True  False  2  b  2
      2  True  False  3  c  3
      3  True  False  4  d  4 (4 rows x 5 columns)

      >>> df.dropna(axis=1, thresh=3)
            A    C      D  E  F  G
      0  True  1.0  False  1  a  1
      1  True  2.0  False  2  b  2
      2  True  3.0  False  3  c  3
      3  True  NaN  False  4  d  4 (4 rows x 6 columns)

      >>> df.dropna(axis=1, how="all")
            A    B    C      D  E  F  G
      0  True  1.0  1.0  False  1  a  1
      1  True  NaN  2.0  False  2  b  2
      2  True  2.0  3.0  False  3  c  3
      3  True  NaN  NaN  False  4  d  4 (4 rows x 7 columns)



   .. py:property:: dtypes

      The dtypes of the dataframe.

      :returns: **dtypes** -- The dtypes of the dataframe.
      :rtype: arkouda.pandas.row.Row

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2], 'col2': ["a", "b"]})
      >>> df
         col1 col2
      0     1    a
      1     2    b (2 rows x 2 columns)

      >>> df.dtypes
      {'col1': 'int64', 'col2': 'str'}


   .. py:property:: empty

      Whether the dataframe is empty.

      :returns: True if the dataframe is empty, otherwise False.
      :rtype: bool

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({})
      >>> df
      Empty DataFrame
      Columns: []
      Index: [] (None rows x 0 columns)

      >>> df.empty
      True


   .. py:method:: filter_by_range(keys, low=1, high=None)

      Filter rows by the size of groups defined on one or more columns.

      Group the DataFrame by the specified `keys`, compute the count of each group,
      and return a boolean mask indicating which rows belong to groups whose sizes
      fall within the inclusive range [`low`, `high`].

      :param keys: Column name or list of column names to group by.
      :type keys: str or list of str
      :param low: Minimum group size (inclusive). Must be >= 0.
      :type low: int, default=1
      :param high: Maximum group size (inclusive). If `None`, no upper bound is applied.
      :type high: int or None, default=None

      :returns: A boolean mask array of length equal to the number of rows in the DataFrame,
                where `True` indicates the row’s group size is between `low` and `high`.
      :rtype: pdarray of bool

      :raises ValueError: If `low` is negative, or if `high` is not `None` and `high < low`.
      :raises TypeError: If `keys` is not a string or list of strings.

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2, 2, 2, 3, 3], 'col2': [4, 5, 6, 7, 8, 9]})
      >>> df
         col1  col2
      0     1     4
      1     2     5
      2     2     6
      3     2     7
      4     3     8
      5     3     9 (6 rows x 2 columns)

      >>> df.filter_by_range("col1", low=1, high=2)
      array([True False False False True True])

      >>> filtered_df = df[df.filter_by_range("col1", low=1, high=2)]
      >>> filtered_df
         col1  col2
      0     1     4
      4     3     8
      5     3     9 (3 rows x 2 columns)



   .. py:method:: from_pandas(pd_df)
      :classmethod:


      Copy the data from a pandas DataFrame into a new arkouda.pandas.dataframe.DataFrame.

      :param pd_df: A pandas DataFrame to convert.
      :type pd_df: pandas.DataFrame

      :rtype: DataFrame

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> import pandas as pd
      >>> pd_df = pd.DataFrame({"A":[1,2],"B":[3,4]})
      >>> type(pd_df)
      <class 'pandas.core.frame.DataFrame'>
      >>> pd_df
         A  B
      0  1  3
      1  2  4

      >>> ak_df = DataFrame.from_pandas(pd_df)
      >>> type(ak_df)
      <class 'arkouda.dataframe.DataFrame'>
      >>> ak_df
         A  B
      0  1  3
      1  2  4 (2 rows x 2 columns)



   .. py:method:: from_return_msg(rep_msg)
      :classmethod:


      Create a DataFrame object from an arkouda server response message.

      :param rep_msg: Server response message used to create a DataFrame.
      :type rep_msg: string

      :rtype: DataFrame



   .. py:method:: groupby(keys, use_series=True, as_index=True, dropna=True)

      Group the dataframe by a column or a list of columns.

      Alias for GroupBy.

      :param keys: An (ordered) list of column names or a single string to group by.
      :type keys: str or list of str
      :param use_series: If True, returns an arkouda.pandas.dataframe.DataFrameGroupBy object.
                         Otherwise an arkouda.pandas.groupbyclass.GroupBy object.
      :type use_series: bool, default=True
      :param as_index: If True, groupby columns will be set as index
                       otherwise, the groupby columns will be treated as DataFrame columns.
      :type as_index: bool, default=True
      :param dropna: If True, and the groupby keys contain NaN values,
                     the NaN values together with the corresponding row will be dropped.
                     Otherwise, the rows corresponding to NaN values will be kept.
      :type dropna: bool, default=True

      :returns: If use_series = True, returns an arkouda.pandas.dataframe.DataFrameGroupBy object.
                Otherwise returns an arkouda.pandas.groupbyclass.GroupBy object.
      :rtype: arkouda.pandas.dataframe.DataFrameGroupBy or arkouda.pandas.groupbyclass.GroupBy

      .. seealso:: :py:obj:`arkouda.GroupBy`

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1.0, 1.0, 2.0, np.nan], 'col2': [4, 5, 6, 7]})
      >>> df
         col1  col2
      0   1.0     4
      1   1.0     5
      2   2.0     6
      3   NaN     7 (4 rows x 2 columns)

      >>> df.GroupBy("col1") # doctest: +SKIP
      <arkouda.groupbyclass.GroupBy object at 0x795584773f00>
      >>> df.GroupBy("col1").size()
      (array([1.00000000000000000 2.00000000000000000]), array([2 1]))

      >>> df.GroupBy("col1",use_series=True).size()
      col1
      1.0    2
      2.0    1
      dtype: int64
      >>> df.GroupBy("col1",use_series=True, as_index = False).size()
         col1  size
      0   1.0     2
      1   2.0     1 (2 rows x 2 columns)



   .. py:method:: head(n=5)

      Return the first `n` rows.

      This function returns the first `n` rows of the the dataframe. It is
      useful for quickly verifying data, for example, after sorting or
      appending rows.

      :param n: Number of rows to select.
      :type n: int, default = 5

      :returns: The first `n` rows of the DataFrame.
      :rtype: DataFrame

      .. seealso:: :py:obj:`tail`

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': ak.arange(10), 'col2': -1 * ak.arange(10)})
      >>> df
         col1  col2
      0     0     0
      1     1    -1
      2     2    -2
      3     3    -3
      4     4    -4
      5     5    -5
      6     6    -6
      7     7    -7
      8     8    -8
      9     9    -9 (10 rows x 2 columns)

      >>> df.head()
         col1  col2
      0     0     0
      1     1    -1
      2     2    -2
      3     3    -3
      4     4    -4 (5 rows x 2 columns)

      >>> df.head(n=2)
         col1  col2
      0     0     0
      1     1    -1 (2 rows x 2 columns)



   .. py:property:: index

      The index of the dataframe.

      :returns: The index of the dataframe.
      :rtype: arkouda.index.Index or arkouda.index.MultiIndex

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
      >>> df
         col1  col2
      0     1     3
      1     2     4 (2 rows x 2 columns)

      >>> df.index
      Index(array([0 1]), dtype='int64')


   .. py:property:: info

      Return a summary string of this dataframe.

      :returns: A summary string of this dataframe.
      :rtype: str

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2], 'col2': ["a", "b"]})
      >>> df
         col1 col2
      0     1    a
      1     2    b (2 rows x 2 columns)

      >>> df.info
      "DataFrame(['col1', 'col2'], 2 rows, 36.00 B)"


   .. py:method:: is_registered() -> bool

      Return True if the object is contained in the registry.

      :returns: Indicates if the object is contained in the registry.
      :rtype: bool

      :raises RegistrationError: Raised if there's a server-side error or a mismatch of registered components.

      .. seealso:: :py:obj:`register`, :py:obj:`unregister`, :py:obj:`unregister_dataframe_by_name`

      .. rubric:: Notes

      Objects registered with the server are immune to deletion until
      they are unregistered.

      .. rubric:: Example

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
      >>> df.register("my_table_name")
         col1  col2
      0     1     4
      1     2     5
      2     3     6 (3 rows x 2 columns)

      >>> df.is_registered()
      True
      >>> df.unregister()
      >>> df.is_registered()
      False



   .. py:method:: isin(values: Union[arkouda.numpy.pdarrayclass.pdarray, Dict, arkouda.pandas.series.Series, DataFrame]) -> DataFrame

      Determine whether each element in the DataFrame is contained in values.

      :param values: The values to check for in DataFrame. Series can only have a single index.
      :type values: pdarray, dict, Series, or DataFrame

      :returns: Arkouda DataFrame of booleans showing whether each element in the DataFrame is
                contained in values.
      :rtype: DataFrame

      .. seealso:: :py:obj:`ak.Series.isin`

      .. rubric:: Notes

      - Pandas supports values being an iterable type. In arkouda, we replace this with pdarray.
      - Pandas supports ~ operations. Currently, ak.DataFrame does not support this.

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col_A': ak.array([7, 3]), 'col_B':ak.array([1, 9])})
      >>> df
         col_A  col_B
      0      7      1
      1      3      9 (2 rows x 2 columns)

      When `values` is a pdarray, check every value in the DataFrame to determine if
      it exists in values.
      >>> df.isin(ak.array([0, 1]))
         col_A  col_B
      0  False   True
      1  False  False (2 rows x 2 columns)

      When `values` is a dict, the values in the dict are passed to check the column
      indicated by the key.
      >>> df.isin({'col_A': ak.array([0, 3])})
         col_A  col_B
      0  False  False
      1   True  False (2 rows x 2 columns)

      When `values` is a Series, each column is checked if values is present positionally.
      This means that for `True` to be returned, the indexes must be the same.
      >>> i = ak.Index(ak.arange(2))
      >>> s = ak.Series(data=[3, 9], index=i)
      >>> df.isin(s)
         col_A  col_B
      0  False  False
      1  False   True (2 rows x 2 columns)

      When `values` is a DataFrame, the index and column must match.
      Note that 9 is not found because the column name does not match.
      >>> other_df = ak.DataFrame({'col_A':ak.array([7, 3]), 'col_C':ak.array([0, 9])})
      >>> df.isin(other_df)
         col_A  col_B
      0   True  False
      1   True  False (2 rows x 2 columns)



   .. py:method:: isna() -> DataFrame

      Detect missing values.

      Return a boolean same-sized object indicating if the values are NA.
      numpy.NaN values get mapped to True values.
      Everything else gets mapped to False values.

      :returns: Mask of bool values for each element in DataFrame
                that indicates whether an element is an NA value.
      :rtype: DataFrame

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> import numpy as np
      >>> df = ak.DataFrame({"A": [np.nan, 2, 2, 3], "B": [3, np.nan, 5, 6],
      ...          "C": [1, np.nan, 2, np.nan], "D":["a","b","c","d"]})
      >>> df
           A    B    C  D
      0  NaN  3.0  1.0  a
      1  2.0  NaN  NaN  b
      2  2.0  5.0  2.0  c
      3  3.0  6.0  NaN  d (4 rows x 4 columns)

      >>> df.isna()
             A      B      C      D
      0   True  False  False  False
      1  False   True   True  False
      2  False  False  False  False
      3  False  False   True  False (4 rows x 4 columns)



   .. py:method:: load(prefix_path, file_format='INFER')
      :classmethod:


      Load dataframe from file.

      file_format needed for consistency with other load functions.

      :param prefix_path: The prefix path for the data.
      :type prefix_path: str
      :param file_format:
      :type file_format: string, default = "INFER"

      :returns: A dataframe loaded from the prefix_path.
      :rtype: DataFrame

      .. rubric:: Examples

      >>> import arkouda as ak

      To store data in <my_dir>/my_data_LOCALE0000,
      use "<my_dir>/my_data" as the prefix.
      >>> import os.path
      >>> from pathlib import Path
      >>> my_path = os.path.join(os.getcwd(), 'hdf5_output','my_data')
      >>> Path(my_path).mkdir(parents=True, exist_ok=True)
      >>> df = ak.DataFrame({"A": ak.arange(5), "B": -1 * ak.arange(5)})
      >>> df.to_parquet(my_path + "/my_data")
      File written successfully!

      >>> df.load(my_path + "/my_data")
         B  A
      0  0  0
      1 -1  1
      2 -2  2
      3 -3  3
      4 -4  4 (5 rows x 2 columns)



   .. py:method:: memory_usage(index=True, unit='B') -> arkouda.pandas.series.Series

      Return the memory usage of each column in bytes.

      The memory usage can optionally include the contribution of
      the index.

      :param index: Specifies whether to include the memory usage of the DataFrame's
                    index in returned Series. If ``index=True``, the memory usage of
                    the index is the first item in the output.
      :type index: bool, default True
      :param unit: Unit to return. One of {'B', 'KB', 'MB', 'GB'}.
      :type unit: str, default = "B"

      :returns: A Series whose index is the original column names and whose values
                is the memory usage of each column in bytes.
      :rtype: Series

      .. seealso:: :py:obj:`arkouda.numpy.pdarrayclass.nbytes`, :py:obj:`arkouda.index.Index.memory_usage`, :py:obj:`arkouda.index.MultiIndex.memory_usage`, :py:obj:`arkouda.pandas.series.Series.memory_usage`

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> dtypes = {"int64":ak.int64, "float64":ak.float64,  "bool":ak.bool_}
      >>> data = dict([(t, ak.ones(5000, dtype=dtypes[t])) for t in dtypes.keys()])
      >>> df = ak.DataFrame(data)
      >>> df.head()
         int64  float64  bool
      0      1      1.0  True
      1      1      1.0  True
      2      1      1.0  True
      3      1      1.0  True
      4      1      1.0  True (5 rows x 3 columns)

      >>> df.memory_usage()
      Index      40000
      int64      40000
      float64    40000
      bool        5000
      dtype: int64

      >>> df.memory_usage(index=False)
      int64      40000
      float64    40000
      bool        5000
      dtype: int64

      >>> df.memory_usage(unit="KB")
      Index      39.062500
      int64      39.062500
      float64    39.062500
      bool        4.882812
      dtype: float64

      To get the approximate total memory usage:
      >>> df.memory_usage(index=True).sum()
      np.int64(125000)



   .. py:method:: memory_usage_info(unit='GB')

      Return a formatted string representation of the size of this DataFrame.

      :param unit: Unit to return. One of {'KB', 'MB', 'GB'}.
      :type unit: str, default = "GB"

      :returns: A string representation of the number of bytes used by this DataFrame in [unit]s.
      :rtype: str

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': ak.arange(1000), 'col2': ak.arange(1000)})
      >>> df.memory_usage_info()
      '0.00 GB'

      >>> df.memory_usage_info(unit="KB")
      '23.44 KB'



   .. py:method:: merge(right: DataFrame, on: Optional[Union[str, List[str]]] = None, how: str = 'inner', left_suffix: str = '_x', right_suffix: str = '_y', convert_ints: bool = True, sort: bool = True) -> DataFrame

      Merge Arkouda DataFrames with a database-style join.

      The resulting dataframe contains rows from both DataFrames as specified by
      the merge condition (based on the "how" and "on" parameters).

      Based on pandas merge functionality.
      https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html

      :param right: The Right DataFrame to be joined.
      :type right: DataFrame
      :param on: The name or list of names of the DataFrame column(s) to join on.
                 If on is None, this defaults to the intersection of the columns in both DataFrames.
      :type on: Optional[Union[str, List[str]]] = None
      :param how: The merge condition.
                  Must be "inner", "left", or "right".
      :type how: {"inner", "left", "right}, default = "inner"
      :param left_suffix: A string indicating the suffix to add to columns from the left dataframe for overlapping
                          column names in both left and right. Defaults to "_x". Only used when how is "inner".
      :type left_suffix: str, default = "_x"
      :param right_suffix: A string indicating the suffix to add to columns from the right dataframe for overlapping
                           column names in both left and right. Defaults to "_y". Only used when how is "inner".
      :type right_suffix: str, default = "_y"
      :param convert_ints: If True, convert columns with missing int values (due to the join) to float64.
                           This is to match pandas.
                           If False, do not convert the column dtypes.
                           This has no effect when how = "inner".
      :type convert_ints: bool = True
      :param sort: If True, DataFrame is returned sorted by "on".
                   Otherwise, the DataFrame is not sorted.
      :type sort: bool = True

      :returns: Joined Arkouda DataFrame.
      :rtype: DataFrame

      .. note:: Multiple column joins are only supported for integer columns.

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> left_df = ak.DataFrame({'col1': ak.arange(5), 'col2': -1 * ak.arange(5)})
      >>> left_df
         col1  col2
      0     0     0
      1     1    -1
      2     2    -2
      3     3    -3
      4     4    -4 (5 rows x 2 columns)

      >>> right_df = ak.DataFrame({'col1': 2 * ak.arange(5), 'col2': 2 * ak.arange(5)})
      >>> right_df
         col1  col2
      0     0     0
      1     2     2
      2     4     4
      3     6     6
      4     8     8 (5 rows x 2 columns)

      >>> left_df.merge(right_df, on = "col1")
         col1  col2_x  col2_y
      0     0       0       0
      1     2      -2       2
      2     4      -4       4 (3 rows x 3 columns)

      >>> left_df.merge(right_df, on = "col1", how = "left")
         col1  col2_x  col2_y
      0     0       0     0.0
      1     1      -1     NaN
      2     2      -2     2.0
      3     3      -3     NaN
      4     4      -4     4.0 (5 rows x 3 columns)

      >>> left_df.merge(right_df, on = "col1", how = "right")
         col1  col2_x  col2_y
      0     0     0.0       0
      1     2    -2.0       2
      2     4    -4.0       4
      3     6     NaN       6
      4     8     NaN       8 (5 rows x 3 columns)

      >>> left_df.merge(right_df, on = "col1", how = "outer")
         col1  col2_x  col2_y
      0     0     0.0     0.0
      1     1    -1.0     NaN
      2     2    -2.0     2.0
      3     3    -3.0     NaN
      4     4    -4.0     4.0
      5     6     NaN     6.0
      6     8     NaN     8.0 (7 rows x 3 columns)



   .. py:method:: notna() -> DataFrame

      Detect existing (non-missing) values.

      Return a boolean same-sized object indicating if the values are not NA.
      numpy.NaN values get mapped to False values.

      :returns: Mask of bool values for each element in DataFrame
                that indicates whether an element is not an NA value.
      :rtype: DataFrame

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> import numpy as np
      >>> df = ak.DataFrame({"A": [np.nan, 2, 2, 3], "B": [3, np.nan, 5, 6],
      ...          "C": [1, np.nan, 2, np.nan], "D":["a","b","c","d"]})
      >>> df
           A    B    C  D
      0  NaN  3.0  1.0  a
      1  2.0  NaN  NaN  b
      2  2.0  5.0  2.0  c
      3  3.0  6.0  NaN  d (4 rows x 4 columns)

      >>> df.notna()
             A      B      C     D
      0  False   True   True  True
      1   True  False  False  True
      2   True   True   True  True
      3   True   True  False  True (4 rows x 4 columns)



   .. py:attribute:: objType
      :value: 'DataFrame'



   .. py:method:: read_csv(filename: str, col_delim: str = ',')
      :classmethod:


      Read the columns of a CSV file into an Arkouda DataFrame.

      If the file contains the appropriately formatted header, typed data will be returned.
      Otherwise, all data will be returned as a Strings objects.

      :param filename: Filename to read data from.
      :type filename: str
      :param col_delim: The delimiter for columns within the data.
      :type col_delim: str, default=","

      :returns: Arkouda DataFrame containing the columns from the CSV file.
      :rtype: DataFrame

      :raises ValueError: Raised if all datasets are not present in all parquet files or if one or
          more of the specified files do not exist.
      :raises RuntimeError: Raised if one or more of the specified files cannot be opened.
          If `allow_errors` is true this may be raised if no values are returned
          from the server.
      :raises TypeError: Raised if we receive an unknown arkouda_type returned from the server.

      .. seealso:: :py:obj:`to_csv`

      .. rubric:: Notes

      - CSV format is not currently supported by load/load_all operations.
      - The column delimiter is expected to be the same for column names and data.
      - Be sure that column delimiters are not found within your data.
      - All CSV files must delimit rows using newline ("\\n") at this time.
      - Unlike other file formats, CSV files store Strings as their UTF-8 format instead of storing
      bytes as uint(8).

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> import os.path
      >>> from pathlib import Path
      >>> my_path = os.path.join(os.getcwd(), 'csv_output','my_data')
      >>> Path(my_path).mkdir(parents=True, exist_ok=True)

      >>> df = ak.DataFrame({"A":[1,2],"B":[3,4]})
      >>> df.to_csv(my_path)
      >>> df2 = ak.DataFrame.read_csv(my_path + "_LOCALE0000")
      >>> df2
         A  B
      0  1  3
      1  2  4 (2 rows x 2 columns)



   .. py:method:: register(user_defined_name: str) -> DataFrame

      Register this DataFrame object and underlying components with the Arkouda server.

      :param user_defined_name: User defined name the DataFrame is to be registered under.
                                This will be the root name for underlying components.
      :type user_defined_name: str

      :returns: The same DataFrame which is now registered with the arkouda server and has an updated name.
                This is an in-place modification, the original is returned to support a
                fluid programming style.
                Please note you cannot register two different DataFrames with the same name.
      :rtype: DataFrame

      :raises TypeError: Raised if user_defined_name is not a str.
      :raises RegistrationError: If the server was unable to register the DataFrame with the user_defined_name.

      .. seealso:: :py:obj:`unregister`, :py:obj:`unregister_dataframe_by_name`, :py:obj:`is_registered`

      .. rubric:: Notes

      Objects registered with the server are immune to deletion until
      they are unregistered.

      Any changes made to a DataFrame object after registering with the server may not be reflected
      in attached copies.

      .. rubric:: Example

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
      >>> df.register("my_table_name")
          col1  col2
      0     1     4
      1     2     5
      2     3     6 (3 rows x 2 columns)
      >>> df.is_registered()
      True
      >>> df.unregister()
      >>> df.is_registered()
      False



   .. py:attribute:: registered_name
      :value: None



   .. py:method:: rename(mapper: Optional[Union[Callable, Dict]] = None, index: Optional[Union[Callable, Dict]] = None, column: Optional[Union[Callable, Dict]] = None, axis: Union[str, int] = 0, inplace: bool = False) -> Optional[DataFrame]

      Rename indexes or columns according to a mapping.

      :param mapper: Function or dictionary mapping existing values to new values.
                     Nonexistent names will not raise an error.
                     Uses the value of axis to determine if renaming column or index
      :type mapper: callable or dict-like, Optional
      :param index: Function or dictionary mapping existing index names to
                    new index names. Nonexistent names will not raise an
                    error.
                    When this is set, axis is ignored.
      :type index: callable or dict-like, Optional
      :param column: Function or dictionary mapping existing column names to
                     new column names. Nonexistent names will not raise an
                     error.
                     When this is set, axis is ignored.
      :type column: callable or dict-like, Optional
      :param axis: Indicates which axis to perform the rename.
                   0/"index" - Indexes
                   1/"column" - Columns
      :type axis: int or str, default=0
      :param inplace: When True, perform the operation on the calling object.
                      When False, return a new object.
      :type inplace: bool, default=False

      :returns: DateFrame when `inplace=False`;
                None when `inplace=True`.
      :rtype: DataFrame or None

      .. rubric:: Examples

      >>> import arkouda as ak

      >>> df = ak.DataFrame({"A": ak.array([1, 2, 3]), "B": ak.array([4, 5, 6])})
      >>> df
         A  B
      0  1  4
      1  2  5
      2  3  6 (3 rows x 2 columns)

      Rename columns using a mapping:
      >>> df.rename(column={'A':'a', 'B':'c'})
         a  c
      0  1  4
      1  2  5
      2  3  6 (3 rows x 2 columns)

      Rename indexes using a mapping:
      >>> df.rename(index={0:99, 2:11})
          A  B
      99  1  4
      1   2  5
      11  3  6 (3 rows x 2 columns)

      Rename using an axis style parameter:
      >>> df.rename(str.lower, axis='column')
         a  b
      0  1  4
      1  2  5
      2  3  6 (3 rows x 2 columns)



   .. py:method:: reset_index(size: Optional[int] = None, inplace: bool = False) -> Union[None, DataFrame]

      Set the index to an integer range.

      Useful if this dataframe is the result of a slice operation from
      another dataframe, or if you have permuted the rows and no longer need
      to keep that ordering on the rows.

      :param size: If size is passed, do not attempt to determine size based on
                   existing column sizes. Assume caller handles consistency correctly.
      :type size: int, optional
      :param inplace: When True, perform the operation on the calling object.
                      When False, return a new object.
      :type inplace: bool, default=False

      :returns: DateFrame when `inplace=False`;
                None when `inplace=True`.
      :rtype: DataFrame or None

      .. note::

         Pandas adds a column 'index' to indicate the original index. Arkouda does not currently
         support this behavior.

      .. rubric:: Example

      >>> import arkouda as ak
      >>> df = ak.DataFrame({"A": ak.array([1, 2, 3]), "B": ak.array([4, 5, 6])})
      >>> df
         A  B
      0  1  4
      1  2  5
      2  3  6 (3 rows x 2 columns)

      >>> perm_df = df[ak.array([0,2,1])]
      >>> perm_df
         A  B
      0  1  4
      2  3  6
      1  2  5 (3 rows x 2 columns)

      >>> perm_df.reset_index()
         A  B
      0  1  4
      1  3  6
      2  2  5 (3 rows x 2 columns)



   .. py:method:: sample(n=5) -> DataFrame

      Return a random sample of `n` rows.

      :param n: Number of rows to return.
      :type n: int, default=5

      :returns: The sampled `n` rows of the DataFrame.
      :rtype: DataFrame

      .. rubric:: Example

      >>> import arkouda as ak
      >>> df = ak.DataFrame({"A": ak.arange(5), "B": -1 * ak.arange(5)})
      >>> df
         A  B
      0  0  0
      1  1 -1
      2  2 -2
      3  3 -3
      4  4 -4 (5 rows x 2 columns)

      Random output of size 3:
      >>> df.sample(n=3)  # doctest: +SKIP
         A  B
      4  4 -4
      3  3 -3
      1  1 -1 (3 rows x 2 columns)



   .. py:property:: shape

      The shape of the dataframe.

      :returns: Tuple of array dimensions.
      :rtype: tuple of int

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
      >>> df
         col1  col2
      0     1     4
      1     2     5
      2     3     6 (3 rows x 2 columns)

      >>> df.shape
      (3, 2)


   .. py:property:: size

      Return the number of bytes on the arkouda server.

      :returns: The number of bytes on the arkouda server.
      :rtype: int

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
      >>> df
         col1  col2
      0     1     4
      1     2     5
      2     3     6 (3 rows x 2 columns)

      >>> df.size
      6


   .. py:method:: sort_index(ascending=True)

      Sort the DataFrame by indexed columns.

      Note: Fails on sort order of arkouda.numpy.strings.Strings columns when
          multiple columns being sorted.

      :param ascending: Sort values in ascending (default) or descending order.
      :type ascending: bool, default = True

      .. rubric:: Example

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1.1, 3.1, 2.1], 'col2': [6, 5, 4]},
      ...          index = Index(ak.array([2,0,1]), name="idx"))

      >>> df
           col1  col2
      idx
      2     1.1     6
      0     3.1     5
      1     2.1     4 (3 rows x 2 columns)

      >>> df.sort_index()
           col1  col2
      idx
      0     3.1     5
      1     2.1     4
      2     1.1     6 (3 rows x 2 columns)



   .. py:method:: sort_values(by=None, ascending=True)

      Sort the DataFrame by one or more columns.

      If no column is specified, all columns are used.

      Note: Fails on order of arkouda.numpy.strings.Strings columns when multiple columns being sorted.

      :param by: The name(s) of the column(s) to sort by.
      :type by: str or list/tuple of str, default = None
      :param ascending: Sort values in ascending (default) or descending order.
      :type ascending: bool, default = True

      .. seealso:: :py:obj:`apply_permutation`

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [2, 2, 1], 'col2': [3, 4, 3], 'col3':[5, 6, 7]})
      >>> df
         col1  col2  col3
      0     2     3     5
      1     2     4     6
      2     1     3     7 (3 rows x 3 columns)

      >>> df.sort_values()
         col1  col2  col3
      2     1     3     7
      0     2     3     5
      1     2     4     6 (3 rows x 3 columns)

      >>> df.sort_values("col3")
         col1  col2  col3
      0     2     3     5
      1     2     4     6
      2     1     3     7 (3 rows x 3 columns)



   .. py:method:: tail(n=5)

      Return the last `n` rows.

      This function returns the last `n` rows for the dataframe. It is
      useful for quickly testing if your object has the right type of data in
      it.

      :param n: Number of rows to select.
      :type n: int, default=5

      :returns: The last `n` rows of the DataFrame.
      :rtype: DataFrame

      .. seealso:: :py:obj:`arkouda.pandas.dataframe.head`

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': ak.arange(10), 'col2': -1 * ak.arange(10)})
      >>> df
         col1  col2
      0     0     0
      1     1    -1
      2     2    -2
      3     3    -3
      4     4    -4
      5     5    -5
      6     6    -6
      7     7    -7
      8     8    -8
      9     9    -9 (10 rows x 2 columns)

      >>> df.tail()
         col1  col2
      5     5    -5
      6     6    -6
      7     7    -7
      8     8    -8
      9     9    -9 (5 rows x 2 columns)

      >>> df.tail(n=2)
         col1  col2
      8     8    -8
      9     9    -9 (2 rows x 2 columns)



   .. py:method:: to_csv(path: str, index: bool = False, columns: Optional[List[str]] = None, col_delim: str = ',', overwrite: bool = False)

      Write DataFrame to CSV file(s).

      File will contain a column for each column in the DataFrame.
      All CSV Files written by Arkouda include a header denoting data types of the columns.
      Unlike other file formats, CSV files store Strings as their UTF-8 format instead of storing
      bytes as uint(8).

      :param path: The filename prefix to be used for saving files. Files will have _LOCALE#### appended
                   when they are written to disk.
      :type path: str
      :param index: If True, the index of the DataFrame will be written to the file
                    as a column.
      :type index: bool, default=False
      :param columns: Column names to assign when writing data.
      :type columns: list of str (Optional)
      :param col_delim: Value to be used to separate columns within the file.
                        Please be sure that the value used DOES NOT appear in your dataset.
      :type col_delim: str, default=","
      :param overwrite: If True, any existing files matching your provided prefix_path will
                        be overwritten. If False, an error will be returned if existing files are found.
      :type overwrite: bool, default=False

      :raises ValueError: Raised if all datasets are not present in all parquet files or if one or
          more of the specified files do not exist.
      :raises RuntimeError: Raised if one or more of the specified files cannot be opened.
          If `allow_errors` is true this may be raised if no values are returned
          from the server.
      :raises TypeError: Raised if we receive an unknown arkouda_type returned from the server.

      .. rubric:: Notes

      - CSV format is not currently supported by load/load_all operations.
      - The column delimiter is expected to be the same for column names and data.
      - Be sure that column delimiters are not found within your data.
      - All CSV files must delimit rows using newline ("\\n") at this time.

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> import os.path
      >>> from pathlib import Path
      >>> my_path = os.path.join(os.getcwd(), 'csv_output')
      >>> Path(my_path).mkdir(parents=True, exist_ok=True)

      >>> df = ak.DataFrame({"A":[1,2],"B":[3,4]})
      >>> df.to_csv(my_path)
      >>> df2 = ak.DataFrame.read_csv(my_path + "_LOCALE0000")
      >>> df2
         A  B
      0  1  3
      1  2  4 (2 rows x 2 columns)



   .. py:method:: to_hdf(path, index=False, columns=None, file_type='distribute')

      Save DataFrame to disk as hdf5, preserving column names.

      :param path: File path to save data.
      :type path: str
      :param index: If True, save the index column. By default, do not save the index.
      :type index: bool, default=False
      :param columns: List of columns to include in the file. If None, writes out all columns.
      :type columns: List, default = None
      :param file_type: Whether to save to a single file or distribute across Locales.
      :type file_type: str (single | distribute), default=distribute

      :raises RuntimeError: Raised if a server-side error is thrown saving the pdarray.

      .. rubric:: Notes

      This method saves one file per locale of the arkouda server. All
      files are prefixed by the path argument and suffixed by their
      locale number.

      .. seealso:: :py:obj:`to_parquet`, :py:obj:`load`

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> import os.path
      >>> from pathlib import Path
      >>> my_path = os.path.join(os.getcwd(), 'hdf_output')
      >>> Path(my_path).mkdir(parents=True, exist_ok=True)

      >>> df = ak.DataFrame({"A":[1,2],"B":[3,4]})
      >>> df.to_hdf(my_path + "/my_data")
      >>> df.load(my_path + "/my_data")
         A  B
      0  1  3
      1  2  4 (2 rows x 2 columns)



   .. py:method:: to_markdown(mode='wt', index=True, tablefmt='grid', storage_options=None, **kwargs)

      Print DataFrame in Markdown-friendly format.

      :param mode: Mode in which file is opened, "wt" by default.
      :type mode: str, optional
      :param index: Add index (row) labels.
      :type index: bool, optional, default True
      :param tablefmt: Table format to call from tablulate:
                       https://pypi.org/project/tabulate/
      :type tablefmt: str = "grid"
      :param storage_options: Extra options that make sense for a particular storage connection,
                              e.g. host, port, username, password, etc., if using a URL that will be parsed by fsspec,
                              e.g., starting “s3://”, “gcs://”.
                              An error will be raised if providing this argument with a non-fsspec URL.
                              See the fsspec and backend storage implementation docs for the set
                              of allowed keys and values.
      :type storage_options: dict, optional
      :param \*\*kwargs: These parameters will be passed to tabulate.

      .. note::

         This function should only be called on small DataFrames as it calls pandas.DataFrame.to_markdown:
         https://pandas.pydata.org/pandas-docs/version/1.2.4/reference/api/pandas.DataFrame.to_markdown.html

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({"animal_1": ["elk", "pig"], "animal_2": ["dog", "quetzal"]})
      >>> print(df.to_markdown())
      +----+------------+------------+
      |    | animal_1   | animal_2   |
      +====+============+============+
      |  0 | elk        | dog        |
      +----+------------+------------+
      |  1 | pig        | quetzal    |
      +----+------------+------------+

      Suppress the index:
      >>> print(df.to_markdown(index = False))
      +------------+------------+
      | animal_1   | animal_2   |
      +============+============+
      | elk        | dog        |
      +------------+------------+
      | pig        | quetzal    |
      +------------+------------+



   .. py:method:: to_pandas(datalimit=maxTransferBytes, retain_index=False)

      Send this DataFrame to a pandas DataFrame.

      :param datalimit: The maximum number size, in megabytes to transfer. The requested
                        DataFrame will be converted to a pandas DataFrame only if the
                        estimated size of the DataFrame does not exceed this value.
      :type datalimit: int, default=arkouda.client.maxTransferBytes
      :param retain_index: Normally, to_pandas() creates a new range index object. If you want
                           to keep the index column, set this to True.
      :type retain_index: bool, default=False

      :returns: The result of converting this DataFrame to a pandas DataFrame.
      :rtype: pandas.DataFrame

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> ak_df = ak.DataFrame({"A": ak.arange(2), "B": -1 * ak.arange(2)})
      >>> type(ak_df)
      <class 'arkouda.dataframe.DataFrame'>
      >>> ak_df
         A  B
      0  0  0
      1  1 -1 (2 rows x 2 columns)

      >>> import pandas as pd
      >>> pd_df = ak_df.to_pandas()
      >>> type(pd_df)
      <class 'pandas.core.frame.DataFrame'>
      >>> pd_df
         A  B
      0  0  0
      1  1 -1



   .. py:method:: to_parquet(path, index=False, columns=None, compression: Optional[str] = None, convert_categoricals: bool = False)

      Save DataFrame to disk as parquet, preserving column names.

      :param path: File path to save data.
      :type path: str
      :param index: If True, save the index column. By default, do not save the index.
      :type index: bool, default=False
      :param columns: List of columns to include in the file. If None, writes out all columns.
      :type columns: list
      :param compression: Provide the compression type to use when writing the file.
                          Supported values: snappy, gzip, brotli, zstd, lz4
      :type compression: str (Optional), default=None
      :param convert_categoricals: Parquet requires all columns to be the same size and Categoricals
                                   don't satisfy that requirement.
                                   If set, write the equivalent Strings in place of any Categorical columns.
      :type convert_categoricals: bool, default=False

      :raises RuntimeError: Raised if a server-side error is thrown saving the pdarray

      .. rubric:: Notes

      This method saves one file per locale of the arkouda server. All
      files are prefixed by the path argument and suffixed by their
      locale number.

      .. seealso:: :py:obj:`to_hdf`, :py:obj:`load`

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> import os.path
      >>> from pathlib import Path
      >>> my_path = os.path.join(os.getcwd(), 'parquet_output')
      >>> Path(my_path).mkdir(parents=True, exist_ok=True)

      >>> df = ak.DataFrame({"A":[1,2],"B":[3,4]})
      >>> df.to_parquet(my_path + "/my_data")
      File written successfully!

      >>> df.load(my_path + "/my_data")
         B  A
      0  3  1
      1  4  2 (2 rows x 2 columns)



   .. py:method:: transfer(hostname, port)

      Send a DataFrame to a different Arkouda server.

      :param hostname: The hostname where the Arkouda server intended to
                       receive the DataFrame is running.
      :type hostname: str
      :param port: The port to send the array over. This needs to be an
                   open port (i.e., not one that the Arkouda server is
                   running on). This will open up `numLocales` ports,
                   each of which in succession, so will use ports of the
                   range {port..(port+numLocales)} (e.g., running an
                   Arkouda server of 4 nodes, port 1234 is passed as
                   `port`, Arkouda will use ports 1234, 1235, 1236,
                   and 1237 to send the array data).
                   This port much match the port passed to the call to
                   `ak.receive_array()`.
      :type port: int_scalars

      :returns: A message indicating a complete transfer.
      :rtype: str

      :raises ValueError: Raised if the op is not within the pdarray.BinOps set
      :raises TypeError: Raised if other is not a pdarray or the pdarray.dtype is not
          a supported dtype



   .. py:method:: unregister()

      Unregister this DataFrame object in the arkouda server.

      Unregister this DataFrame object in the arkouda server which was previously
      registered using register() and/or attached to using attach().

      :raises RegistrationError: If the object is already unregistered or if there is a server error
          when attempting to unregister.

      .. seealso:: :py:obj:`register`, :py:obj:`unregister_dataframe_by_name`, :py:obj:`is_registered`

      .. rubric:: Notes

      Objects registered with the server are immune to deletion until
      they are unregistered.

      .. rubric:: Example

      >>> import arkouda as ak
      >>> df = ak.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
      >>> df.register("my_table_name")
                 col1  col2
      0     1     4
      1     2     5
      2     3     6 (3 rows x 2 columns)

      >>> df.is_registered()
      True
      >>> df.unregister()
      >>> df.is_registered()
      False



   .. py:method:: update_hdf(prefix_path: str, index=False, columns=None, repack: bool = True)

      Overwrite the dataset with the name provided with this dataframe.

      If the dataset does not exist it is added.

      :param prefix_path: Directory and filename prefix that all output files share.
      :type prefix_path: str
      :param index: If True, save the index column. By default, do not save the index.
      :type index: bool, default=False
      :param columns: List of columns to include in the file. If None, writes out all columns.
      :type columns: List, default=None
      :param repack: HDF5 does not release memory on delete. When True, the inaccessible
                     data (that was overwritten) is removed. When False, the data remains, but is
                     inaccessible. Setting to false will yield better performance, but will cause
                     file sizes to expand.
      :type repack: bool, default=True

      :returns: Success message if successful.
      :rtype: str

      :raises RuntimeError: Raised if a server-side error is thrown saving the pdarray.

      .. rubric:: Notes

      If file does not contain File_Format attribute to indicate how it was saved,
        the file name is checked for _LOCALE#### to determine if it is distributed.
      If the dataset provided does not exist, it will be added.

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> import os.path
      >>> from pathlib import Path
      >>> my_path = os.path.join(os.getcwd(), 'hdf_output')
      >>> Path(my_path).mkdir(parents=True, exist_ok=True)

      >>> df = ak.DataFrame({"A":[1,2],"B":[3,4]})
      >>> df.to_hdf(my_path + "/my_data")
      >>> df.load(my_path + "/my_data")
         A  B
      0  1  3
      1  2  4 (2 rows x 2 columns)

      >>> df2 = ak.DataFrame({"A":[5,6],"B":[7,8]})
      >>> df2.update_hdf(my_path + "/my_data")
      >>> df.load(my_path + "/my_data")
         A  B
      0  5  7
      1  6  8 (2 rows x 2 columns)



   .. py:method:: update_nrows()

      Compute the number of rows on the arkouda server and updates the size parameter.



.. py:class:: DataFrameGroupBy(gb, df, gb_key_names=None, as_index=True)

   A DataFrame that has been grouped by a subset of columns.

   :param gb_key_names: The column name(s) associated with the aggregated columns.
   :type gb_key_names: str or list(str), default=None
   :param as_index: If True, interpret aggregated column as index
                    (only implemented for single dimensional aggregates).
                    Otherwise, treat aggregated column as a dataframe column.
   :type as_index: bool, default=True

   .. attribute:: gb

      GroupBy object, where the aggregation keys are values of column(s) of a dataframe,
      usually in preparation for aggregating with respect to the other columns.

      :type: GroupBy

   .. attribute:: df

      The dataframe containing the original data.

      :type: DataFrame

   .. attribute:: gb_key_names

      The column name(s) associated with the aggregated columns.

      :type: Union[str, List[str]]

   .. attribute:: as_index

      If True the grouped values of the aggregation keys will be treated as an index.
      Defaults to True.

      :type: bool


   .. py:attribute:: all_non_nan
      :value: False



   .. py:attribute:: as_index
      :type:  bool


   .. py:method:: broadcast(x, permute=True)

      Fill each group’s segment with a constant value.

      :param x: The values to put in each group’s segment.
      :type x: Series or pdarray
      :param permute: If True (default), permute broadcast values back to the
                      ordering of the original array on which GroupBy was called.
                      If False, the broadcast values are grouped by value.
      :type permute: bool, default=True

      :returns: A Series with the Index of the original frame and the values of the broadcast.
      :rtype: arkouda.pandas.series.Series

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> from arkouda.pandas.dataframe import DataFrameGroupBy
      >>> df = ak.DataFrame({"A":[1,2,2,3],"B":[3,4,5,6]})
      >>> df
         A  B
      0  1  3
      1  2  4
      2  2  5
      3  3  6 (4 rows x 2 columns)

      >>> gb = df.groupby("A")
      >>> x = ak.array([10,11,12])
      >>> s = DataFrameGroupBy.broadcast(gb, x)
      >>> df["C"] = s.values
      >>> df
         A  B   C
      0  1  3  10
      1  2  4  11
      2  2  5  11
      3  3  6  12 (4 rows x 3 columns)



   .. py:attribute:: df
      :type:  DataFrame


   .. py:method:: diff(colname)

      Create a difference aggregate for the given column.

      For each group, the difference between successive values is calculated.
      Aggregate operations (mean,min,max,std,var) can be done on the results.

      :param colname: Name of the column to compute the difference on.
      :type colname: str

      :returns: Object containing the differences, which can be aggregated.
      :rtype: DiffAggregate

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({"A":[1,2,2,2,3,3],"B":[3,9,11,27,86,100]})
      >>> df
         A    B
      0  1    3
      1  2    9
      2  2   11
      3  2   27
      4  3   86
      5  3  100 (6 rows x 2 columns)

      >>> gb = df.groupby("A")
      >>> gb.diff("B").values
      array([nan nan 2.00000000000000000 16.00000000000000000 nan 14.00000000000000000])



   .. py:attribute:: dropna


   .. py:attribute:: gb
      :type:  arkouda.pandas.groupbyclass.GroupBy


   .. py:attribute:: gb_key_names
      :type:  Union[str, List[str]]


   .. py:method:: head(n: int = 5, sort_index: bool = True) -> DataFrame

      Return the first n rows from each group.

      :param n: Maximum number of rows to return for each group.
                If the number of rows in a group is less than n,
                all the values from that group will be returned.
      :type n: int, optional, default = 5
      :param sort_index: If true, return the DataFrame with indices sorted.
      :type sort_index: bool, default = True

      :rtype: DataFrame

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({"a":ak.arange(10) %3 , "b":ak.arange(10)})
      >>> df
         a  b
      0  0  0
      1  1  1
      2  2  2
      3  0  3
      4  1  4
      5  2  5
      6  0  6
      7  1  7
      8  2  8
      9  0  9 (10 rows x 2 columns)

      >>> df.groupby("a").head(2)
         a  b
      0  0  0
      1  1  1
      2  2  2
      3  0  3
      4  1  4
      5  2  5 (6 rows x 2 columns)



   .. py:method:: sample(n=None, frac=None, replace=False, weights=None, random_state=None)

      Return a random sample from each group.

      You can either specify the number of elements
      or the fraction of elements to be sampled. random_state can be used for reproducibility

      :param n: Number of items to return for each group.
                Cannot be used with frac and must be no larger than
                the smallest group unless replace is True.
                Default is one if frac is None.
      :type n: int, optional
      :param frac: Fraction of items to return. Cannot be used with n.
      :type frac: float, optional
      :param replace: Allow or disallow sampling of the same row more than once.
      :type replace: bool, default False
      :param weights: Default None results in equal probability weighting.
                      If passed a pdarray, then values must have the same length as the underlying DataFrame
                      and will be used as sampling probabilities after normalization within each group.
                      Weights must be non-negative with at least one positive element within each group.
      :type weights: pdarray, optional
      :param random_state: If int, seed for random number generator.
                           If ak.random.Generator, use as given.
      :type random_state: int or ak.random.Generator, optional

      :returns: A new DataFrame containing items randomly sampled from each group
                sorted according to the grouped columns.
      :rtype: DataFrame

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({"A":[3,1,2,1,2,3],"B":[3,4,5,6,7,8]})
      >>> df
         A  B
      0  3  3
      1  1  4
      2  2  5
      3  1  6
      4  2  7
      5  3  8 (6 rows x 2 columns)

      >>> df.groupby("A").sample(random_state=6)
         A  B
      3  1  6
      4  2  7
      5  3  8 (3 rows x 2 columns)

      >>> df.groupby("A").sample(frac=0.5, random_state=3, weights=ak.array([1,1,1,0,0,0]))
         A  B
      1  1  4
      2  2  5
      0  3  3 (3 rows x 2 columns)

      >>> df.groupby("A").sample(n=3, replace=True, random_state=ak.random.default_rng(7))
         A  B
      1  1  4
      3  1  6
      1  1  4
      4  2  7
      4  2  7
      4  2  7
      0  3  3
      5  3  8
      5  3  8 (9 rows x 2 columns)



   .. py:method:: size(as_series=None, sort_index=True)

      Compute the size of each value as the total number of rows, including NaN values.

      :param as_series: Indicates whether to return arkouda.pandas.dataframe.DataFrame (if as_series = False) or
                        arkouda.pandas.series.Series (if as_series = True)
      :type as_series: bool, default=None
      :param sort_index: If True, results will be returned with index values sorted in ascending order.
      :type sort_index: bool, default=True

      :rtype: arkouda.pandas.dataframe.DataFrame or arkouda.pandas.series.Series

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({"A":[1,2,2,3],"B":[3,4,5,6]})
      >>> df
         A  B
      0  1  3
      1  2  4
      2  2  5
      3  3  6 (4 rows x 2 columns)

      >>> df.groupby("A").size(as_series = False)
         size
      A
      1     1
      2     2
      3     1 (3 rows x 1 columns)



   .. py:method:: tail(n: int = 5, sort_index: bool = True) -> DataFrame

      Return the last n rows from each group.

      :param n: Maximum number of rows to return for each group.
                If the number of rows in a group is less than n,
                all the rows from that group will be returned.
      :type n: int, optional, default = 5
      :param sort_index: If true, return the DataFrame with indices sorted.
      :type sort_index: bool, default = True

      :rtype: DataFrame

      .. rubric:: Examples

      >>> import arkouda as ak
      >>> df = ak.DataFrame({"a":ak.arange(10) %3 , "b":ak.arange(10)})
      >>> df
         a  b
      0  0  0
      1  1  1
      2  2  2
      3  0  3
      4  1  4
      5  2  5
      6  0  6
      7  1  7
      8  2  8
      9  0  9 (10 rows x 2 columns)

      >>> df.groupby("a").tail(2)
         a  b
      4  1  4
      5  2  5
      6  0  6
      7  1  7
      8  2  8
      9  0  9 (6 rows x 2 columns)



   .. py:attribute:: where_not_nan
      :value: None



.. py:class:: DiffAggregate(gb, series)

   A column in a GroupBy that has been differenced.

   Aggregation operations can be done on the result.

   .. attribute:: gb

      GroupBy object, where the aggregation keys are values of column(s) of a dataframe.

      :type: GroupBy

   .. attribute:: values

      A column to compute the difference on.

      :type: Series


   .. py:attribute:: gb
      :type:  arkouda.pandas.groupbyclass.GroupBy


   .. py:attribute:: values
      :type:  arkouda.pandas.series.Series


.. py:function:: intersect(a, b, positions=True, unique=False)

   Find the intersection of two arkouda arrays.

   This function can be especially useful when `positions=True` so
   that the caller gets the indices of values present in both arrays.

   :param a: An array of strings.
   :type a: Strings or pdarray
   :param b: An array of strings.
   :type b: Strings or pdarray
   :param positions: Return tuple of boolean pdarrays that indicate positions in `a` and `b`
                     of the intersection values.
   :type positions: bool, default=True
   :param unique: If the number of distinct values in `a` (and `b`) is equal to the size of
                  `a` (and `b`), there is a more efficient method to compute the intersection.
   :type unique: bool, default=False

   :returns: * *(arkouda.numpy.pdarrayclass.pdarray, arkouda.numpy.pdarrayclass.pdarray) or*
             * *arkouda.numpy.pdarrayclass.pdarray* -- The indices of `a` and `b` where any element occurs at least once in both
               arrays.

   .. rubric:: Examples

   >>> import arkouda as ak
   >>> a = ak.arange(10)
   >>> print(a)
   [0 1 2 3 4 5 6 7 8 9]

   >>> b = 2 * ak.arange(10)
   >>> print(b)
   [0 2 4 6 8 10 12 14 16 18]

   >>> intersect(a,b, positions=True)
   (array([True False True False True False True False True False]),
   array([True True True True True False False False False False]))

   >>> intersect(a,b, positions=False)
   array([0 2 4 6 8])


.. py:function:: intx(a, b)

   Find all the rows that are in both dataframes.

   Columns should be in identical order.

   Note: does not work for columns of floating point values, but does work for
   Strings, pdarrays of int64 type, and Categorical *should* work.

   .. rubric:: Examples

   >>> import arkouda as ak
   >>> a = ak.DataFrame({'a':ak.arange(5),'b': 2* ak.arange(5)})
   >>> a
      a  b
   0  0  0
   1  1  2
   2  2  4
   3  3  6
   4  4  8 (5 rows x 2 columns)

   >>> b = ak.DataFrame({'a':ak.arange(5),'b':ak.array([0,3,4,7,8])})
   >>> b
      a  b
   0  0  0
   1  1  3
   2  2  4
   3  3  7
   4  4  8 (5 rows x 2 columns)

   >>> intx(a,b)
   array([True False True False True])
   >>> intersect_df = a[intx(a,b)]
   >>> intersect_df
      a  b
   0  0  0
   2  2  4
   4  4  8 (3 rows x 2 columns)


.. py:function:: invert_permutation(perm)

   Find the inverse of a permutation array.

   :param perm: The permutation array.
   :type perm: pdarray

   :returns: The inverse of the permutation array.
   :rtype: arkouda.numpy.pdarrayclass.pdarray

   .. rubric:: Examples

   >>> import arkouda as ak
   >>> from arkouda.index import Index
   >>> i = Index(ak.array([1,2,0,5,4]))
   >>> perm = i.argsort()
   >>> print(perm)
   [2 0 1 4 3]
   >>> invert_permutation(perm)
   array([1 2 0 4 3])


.. py:function:: merge(left: DataFrame, right: DataFrame, on: Optional[Union[str, List[str]]] = None, left_on: Optional[Union[str, List[str]]] = None, right_on: Optional[Union[str, List[str]]] = None, how: str = 'inner', left_suffix: str = '_x', right_suffix: str = '_y', convert_ints: bool = True, sort: bool = True) -> DataFrame

   Merge Arkouda DataFrames with a database-style join.

   The resulting dataframe contains rows from both DataFrames as specified by
   the merge condition (based on the "how" and "on" parameters).

   Based on pandas merge functionality.
   https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html

   :param left: The Left DataFrame to be joined.
   :type left: DataFrame
   :param right: The Right DataFrame to be joined.
   :type right: DataFrame
   :param on: The name or list of names of the DataFrame column(s) to join on.
              If on is None, this defaults to the intersection of the columns in both DataFrames.
   :type on: Optional[Union[str, List[str]]] = None
   :param left_on: Column name or names to join on in the left DataFrame. If this is not None, then right_on
                   must also not be None, and this will override `on`.
   :type left_on: str or List of str, optional
   :param right_on: Column name or names to join on in the right DataFrame. If this is not None, then left_on
                    must also not be None, and this will override `on`.
   :type right_on: str or List of str, optional
   :param how: The merge condition.
               Must be one of "inner", "left", "right", or "outer".
   :type how: str, default = "inner"
   :param left_suffix: A string indicating the suffix to add to columns from the left dataframe for overlapping
                       column names in both left and right. Defaults to "_x". Only used when how is "inner".
   :type left_suffix: str, default = "_x"
   :param right_suffix: A string indicating the suffix to add to columns from the right dataframe for overlapping
                        column names in both left and right. Defaults to "_y". Only used when how is "inner".
   :type right_suffix: str, default = "_y"
   :param convert_ints: If True, convert columns with missing int values (due to the join) to float64.
                        This is to match pandas.
                        If False, do not convert the column dtypes.
                        This has no effect when how = "inner".
   :type convert_ints: bool = True
   :param sort: If True, DataFrame is returned sorted by "on".
                Otherwise, the DataFrame is not sorted.
   :type sort: bool = True

   :returns: Joined Arkouda DataFrame.
   :rtype: DataFrame

   .. note:: Multiple column joins are only supported for integer columns.

   .. rubric:: Examples

   >>> import arkouda as ak
   >>> from arkouda import merge
   >>> left_df = ak.DataFrame({'col1': ak.arange(5), 'col2': -1 * ak.arange(5)})
   >>> left_df
      col1  col2
   0     0     0
   1     1    -1
   2     2    -2
   3     3    -3
   4     4    -4 (5 rows x 2 columns)

   >>> right_df = ak.DataFrame({'col1': 2 * ak.arange(5), 'col2': 2 * ak.arange(5)})
   >>> right_df
      col1  col2
   0     0     0
   1     2     2
   2     4     4
   3     6     6
   4     8     8 (5 rows x 2 columns)

   >>> merge(left_df, right_df, on = "col1")
      col1  col2_x  col2_y
   0     0       0       0
   1     2      -2       2
   2     4      -4       4 (3 rows x 3 columns)

   >>> merge(left_df, right_df, on = "col1", how = "left")
      col1  col2_x  col2_y
   0     0       0     0.0
   1     1      -1     NaN
   2     2      -2     2.0
   3     3      -3     NaN
   4     4      -4     4.0 (5 rows x 3 columns)

   >>> merge(left_df, right_df, on = "col1", how = "right")
      col1  col2_x  col2_y
   0     0     0.0       0
   1     2    -2.0       2
   2     4    -4.0       4
   3     6     NaN       6
   4     8     NaN       8 (5 rows x 3 columns)

   >>> merge(left_df, right_df, on = "col1", how = "outer")
      col1  col2_x  col2_y
   0     0     0.0     0.0
   1     1    -1.0     NaN
   2     2    -2.0     2.0
   3     3    -3.0     NaN
   4     4    -4.0     4.0
   5     6     NaN     6.0
   6     8     NaN     8.0 (7 rows x 3 columns)


