arkouda.pdarraycreation
=======================

.. py:module:: arkouda.pdarraycreation


Functions
---------

.. autoapisummary::

   arkouda.pdarraycreation.arange
   arkouda.pdarraycreation.array
   arkouda.pdarraycreation.bigint_from_uint_arrays
   arkouda.pdarraycreation.from_series
   arkouda.pdarraycreation.full
   arkouda.pdarraycreation.full_like
   arkouda.pdarraycreation.linspace
   arkouda.pdarraycreation.ones
   arkouda.pdarraycreation.ones_like
   arkouda.pdarraycreation.promote_to_common_dtype
   arkouda.pdarraycreation.randint
   arkouda.pdarraycreation.random_strings_lognormal
   arkouda.pdarraycreation.random_strings_uniform
   arkouda.pdarraycreation.scalar_array
   arkouda.pdarraycreation.standard_normal
   arkouda.pdarraycreation.uniform
   arkouda.pdarraycreation.zeros
   arkouda.pdarraycreation.zeros_like


Package Contents
----------------

.. py:function:: arange(*args, **kwargs) -> arkouda.numpy.pdarrayclass.pdarray

   arange([start,] stop[, stride,] dtype=int64)

   Create a pdarray of consecutive integers within the interval [start, stop).
   If only one arg is given then arg is the stop parameter. If two args are
   given, then the first arg is start and second is stop. If three args are
   given, then the first arg is start, second is stop, third is stride.

   The return value is cast to type dtype

   :param start: Starting value (inclusive)
   :type start: int_scalars, optional
   :param stop: Stopping value (exclusive)
   :type stop: int_scalars
   :param stride: The difference between consecutive elements, the default stride is 1,
                  if stride is specified then start must also be specified.
   :type stride: int_scalars, optional
   :param dtype: The target dtype to cast values to
   :type dtype: np.dtype, type, or str
   :param max_bits: Specifies the maximum number of bits; only used for bigint pdarrays
   :type max_bits: int

   :returns: Integers from start (inclusive) to stop (exclusive) by stride
   :rtype: pdarray, dtype

   :raises TypeError: Raised if start, stop, or stride is not an int object
   :raises ZeroDivisionError: Raised if stride == 0

   .. seealso:: :obj:`linspace`, :obj:`zeros`, :obj:`ones`, :obj:`randint`

   .. rubric:: Notes

   Negative strides result in decreasing values. Currently, only int64
   pdarrays can be created with this method. For float64 arrays, use
   the linspace method.

   .. rubric:: Examples

   >>> ak.arange(0, 5, 1)
   array([0 1 2 3 4])

   >>> ak.arange(5, 0, -1)
   array([5 4 3 2 1])

   >>> ak.arange(0, 10, 2)
   array([0 2 4 6 8])

   >>> ak.arange(-5, -10, -1)
   array([-5 -6 -7 -8 -9])


.. py:function:: array(a: Union[arkouda.numpy.pdarrayclass.pdarray, numpy.ndarray, Iterable], dtype: Union[numpy.dtype, type, str, None] = None, max_bits: int = -1) -> Union[arkouda.numpy.pdarrayclass.pdarray, arkouda.numpy.strings.Strings]

   Convert a Python or Numpy Iterable to a pdarray or Strings object, sending
   the corresponding data to the arkouda server.

   :param a: array of a supported dtype
   :type a: Union[pdarray, np.ndarray]
   :param dtype: The target dtype to cast values to
   :type dtype: np.dtype, type, or str
   :param max_bits: Specifies the maximum number of bits; only used for bigint pdarrays
   :type max_bits: int

   :returns: A pdarray instance stored on arkouda server or Strings instance, which
             is composed of two pdarrays stored on arkouda server
   :rtype: pdarray or Strings

   :raises TypeError: Raised if a is not a pdarray, np.ndarray, or Python Iterable such as a
       list, array, tuple, or deque
   :raises RuntimeError: Raised if nbytes > maxTransferBytes, a.dtype is not supported (not in DTypes),
       or if the product of a size and a.itemsize > maxTransferBytes
   :raises ValueError: Raised if a has rank is not in get_array_ranks(), or if the returned message is malformed or does
       not contain the fields required to generate the array.

   .. seealso:: :obj:`pdarray.to_ndarray`

   .. rubric:: Notes

   The number of bytes in the input array cannot exceed `ak.client.maxTransferBytes`,
   otherwise a RuntimeError will be raised. This is to protect the user
   from overwhelming the connection between the Python client and the arkouda
   server, under the assumption that it is a low-bandwidth connection. The user
   may override this limit by setting ak.client.maxTransferBytes to a larger value,
   but should proceed with caution.

   If the pdrray or ndarray is of type U, this method is called twice recursively
   to create the Strings object and the two corresponding pdarrays for string
   bytes and offsets, respectively.

   .. rubric:: Examples

   >>> ak.array(np.arange(1,10))
   array([1 2 3 4 5 6 7 8 9])

   >>> ak.array(range(1,10))
   array([1 2 3 4 5 6 7 8 9])

   >>> strings = ak.array([f'string {i}' for i in range(0,5)])
   >>> type(strings)
   <class 'arkouda.numpy.strings.Strings'>


.. py:function:: bigint_from_uint_arrays(arrays, max_bits=-1)

   Create a bigint pdarray from an iterable of uint pdarrays.
   The first item in arrays will be the highest 64 bits and
   the last item will be the lowest 64 bits.

   :param arrays: An iterable of uint pdarrays used to construct the bigint pdarray.
                  The first item in arrays will be the highest 64 bits and
                  the last item will be the lowest 64 bits.
   :type arrays: Sequence[pdarray]
   :param max_bits: Specifies the maximum number of bits; only used for bigint pdarrays
   :type max_bits: int

   :returns: bigint pdarray constructed from uint arrays
   :rtype: pdarray

   :raises TypeError: Raised if any pdarray in arrays has a dtype other than uint or
       if the pdarrays are not the same size.
   :raises RuntimeError: Raised if there is a server-side error thrown

   .. seealso:: :obj:`pdarray.bigint_to_uint_arrays`

   .. rubric:: Examples

   >>> a = ak.bigint_from_uint_arrays([ak.ones(5, dtype=ak.uint64), ak.arange(5, dtype=ak.uint64)])
   >>> a
   array([18446744073709551616 18446744073709551617 18446744073709551618
   18446744073709551619 18446744073709551620])

   >>> a.dtype
   dtype(bigint)

   >>> all(a[i] == 2**64 + i for i in range(5))
   True


.. py:function:: from_series(series: pandas.Series, dtype: Optional[Union[type, str]] = None) -> Union[arkouda.numpy.pdarrayclass.pdarray, arkouda.numpy.strings.Strings]

   Converts a Pandas Series to an Arkouda pdarray or Strings object. If
   dtype is None, the dtype is inferred from the Pandas Series. Otherwise,
   the dtype parameter is set if the dtype of the Pandas Series is to be
   overridden or is  unknown (for example, in situations where the Series
   dtype is object).

   :param series: The Pandas Series with a dtype of bool, float64, int64, or string
   :type series: Pandas Series
   :param dtype: The valid dtype types are np.bool, np.float64, np.int64, and np.str
   :type dtype: Optional[type]

   :rtype: Union[pdarray,Strings]

   :raises TypeError: Raised if series is not a Pandas Series object
   :raises ValueError: Raised if the Series dtype is not bool, float64, int64, string, datetime, or timedelta

   .. rubric:: Examples

   >>> np.random.seed(1701)
   >>> ak.from_series(pd.Series(np.random.randint(0,10,5)))
   array([4 3 3 5 0])

   >>> ak.from_series(pd.Series(['1', '2', '3', '4', '5']),dtype=np.int64)
   array([1 2 3 4 5])

   >>> np.random.seed(1701)
   >>> ak.from_series(pd.Series(np.random.uniform(low=0.0,high=1.0,size=3)))
   array([0.089433234324597599 0.1153776854774361 0.51874393620990389])

   >>> ak.from_series(pd.Series(['0.57600036956445599', '0.41619265571741659',
                      '0.6615356693784662']), dtype=np.float64)
   array([0.57600036956445599 0.41619265571741659 0.6615356693784662])

   >>> np.random.seed(1864)
   >>> ak.from_series(pd.Series(np.random.choice([True, False],size=5)))
   array([True True True False False])

   >>> ak.from_series(pd.Series(['True', 'False', 'False', 'True', 'True']), dtype=bool)
   array([True True True True True])

   >>> ak.from_series(pd.Series(['a', 'b', 'c', 'd', 'e'], dtype="string"))
   array(['a', 'b', 'c', 'd', 'e'])

   >>> ak.from_series(pd.Series(pd.to_datetime(['1/1/2018', np.datetime64('2018-01-01')])))
   array([1514764800000000000 1514764800000000000])

   .. rubric:: Notes

   The supported datatypes are bool, float64, int64, string, and datetime64[ns]. The
   data type is either inferred from the the Series or is set via the dtype parameter.

   Series of datetime or timedelta are converted to Arkouda arrays of dtype int64 (nanoseconds)

   A Pandas Series containing strings has a dtype of object. Arkouda assumes the Series
   contains strings and sets the dtype to str


.. py:function:: full(size: Union[arkouda.numpy.dtypes.int_scalars, Tuple[arkouda.numpy.dtypes.int_scalars, Ellipsis], str], fill_value: Union[arkouda.numpy.dtypes.numeric_scalars, str], dtype: Union[numpy.dtype, type, str, arkouda.numpy.dtypes.bigint] = float64, max_bits: Optional[int] = None) -> Union[arkouda.numpy.pdarrayclass.pdarray, arkouda.numpy.strings.Strings]

   Create a pdarray filled with fill_value.

   :param size: Size or shape of the array
   :type size: int_scalars or tuple of int_scalars
   :param fill_value: Value with which the array will be filled
   :type fill_value: int_scalars or str
   :param dtype: Resulting array type, default float64
   :type dtype: all_scalars
   :param max_bits: Specifies the maximum number of bits; only used for bigint pdarrays
   :type max_bits: int

   :returns: array of the requested size and dtype filled with fill_value
   :rtype: pdarray or Strings

   :raises TypeError: Raised if the supplied dtype is not supported
   :raises RuntimeError: Raised if the size parameter is neither an int nor a str that is parseable to an int.
   :raises ValueError: Raised if the rank of the given shape is not in get_array_ranks() or is empty
       Raised if max_bits is not NONE and ndim does not equal 1

   .. seealso:: :obj:`zeros`, :obj:`ones`

   .. rubric:: Examples

   >>> ak.full(5, 7, dtype=ak.int64)
   array([7 7 7 7 7])

   >>> ak.full(5, 9, dtype=ak.float64)
   array([9.00000000000000000 9.00000000000000000 9.00000000000000000
          9.00000000000000000 9.00000000000000000])

   >>> ak.full(5, 5, dtype=ak.bool_)
   array([True True True True True])


.. py:function:: full_like(pda: arkouda.numpy.pdarrayclass.pdarray, fill_value: arkouda.numpy.dtypes.numeric_scalars) -> Union[arkouda.numpy.pdarrayclass.pdarray, arkouda.numpy.strings.Strings]

   Create a pdarray filled with fill_value of the same size and dtype as an existing
   pdarray.

   :param pda: Array to use for size and dtype
   :type pda: pdarray
   :param fill_value: Value with which the array will be filled
   :type fill_value: int_scalars

   :returns: Equivalent to ak.full(pda.size, fill_value, pda.dtype)
   :rtype: pdarray

   :raises TypeError: Raised if the pda parameter is not a pdarray.

   .. seealso:: :obj:`ones_like`, :obj:`zeros_like`

   .. rubric:: Notes

   Logic for generating the pdarray is delegated to the ak.full method.
   Accordingly, the supported dtypes match are defined by the ak.full method.

   .. rubric:: Examples

   >>> ak.full_like(ak.full(5,7,dtype=ak.int64),6)
   array([6 6 6 6 6])

   >>> ak.full_like(ak.full(7,9,dtype=ak.float64),10)
   array([10.00000000000000000 10.00000000000000000 10.00000000000000000
          10.00000000000000000 10.00000000000000000 10.00000000000000000 10.00000000000000000])

   >>> ak.full_like(ak.full(5,True,dtype=ak.bool_),False)
   array([False False False False False])


.. py:function:: linspace(start: arkouda.numpy.dtypes.numeric_scalars, stop: arkouda.numpy.dtypes.numeric_scalars, length: arkouda.numpy.dtypes.int_scalars) -> arkouda.numpy.pdarrayclass.pdarray

   Create a pdarray of linearly-spaced floats in a closed interval.

   :param start: Start of interval (inclusive)
   :type start: numeric_scalars
   :param stop: End of interval (inclusive)
   :type stop: numeric_scalars
   :param length: Number of points
   :type length: int_scalars

   :returns: Array of evenly spaced float values along the interval
   :rtype: pdarray, float64

   :raises TypeError: Raised if start or stop is not a float or int or if length is not an int

   .. seealso:: :obj:`arange`

   .. rubric:: Notes

   If that start is greater than stop, the pdarray values are generated
   in descending order.

   .. rubric:: Examples

   >>> ak.linspace(0, 1, 5)
   array([0.00000000000000000 0.25 0.5 0.75 1.00000000000000000])

   >>> ak.linspace(start=1, stop=0, length=5)
   array([1.00000000000000000 0.75 0.5 0.25 0.00000000000000000])

   >>> ak.linspace(start=-5, stop=0, length=5)
   array([-5.00000000000000000 -3.75 -2.5 -1.25 0.00000000000000000])


.. py:function:: ones(size: Union[arkouda.numpy.dtypes.int_scalars, Tuple[arkouda.numpy.dtypes.int_scalars, Ellipsis], str], dtype: Union[numpy.dtype, type, str, arkouda.numpy.dtypes.bigint] = float64, max_bits: Optional[int] = None) -> arkouda.numpy.pdarrayclass.pdarray

   Create a pdarray filled with ones.

   :param size: Size or shape of the array
   :type size: int_scalars or tuple of int_scalars
   :param dtype: Resulting array type, default ak.float64
   :type dtype: Union[float64, int64, bool]
   :param max_bits: Specifies the maximum number of bits; only used for bigint pdarrays
                    Included for consistency, as ones are all zeros ending on a one, regardless
                    of max_bits
   :type max_bits: int

   :returns: Ones of the requested size or shape and dtype
   :rtype: pdarray

   :raises TypeError: Raised if the supplied dtype is not supported
   :raises RuntimeError: Raised if the size parameter is neither an int nor a str that is parseable to an int.
   :raises ValueError: Raised if the rank of the given shape is not in get_array_ranks() or is empty

   .. seealso:: :obj:`zeros`, :obj:`ones_like`

   .. rubric:: Examples

   >>> ak.ones(5, dtype=ak.int64)
   array([1 1 1 1 1])

   >>> ak.ones(5, dtype=ak.float64)
   array([1.00000000000000000 1.00000000000000000 1.00000000000000000
          1.00000000000000000 1.00000000000000000])

   >>> ak.ones(5, dtype=ak.bool_)
   array([True True True True True])

   .. rubric:: Notes

   Logic for generating the pdarray is delegated to the ak.full method.


.. py:function:: ones_like(pda: arkouda.numpy.pdarrayclass.pdarray) -> arkouda.numpy.pdarrayclass.pdarray

   Create a one-filled pdarray of the same size and dtype as an existing
   pdarray.

   :param pda: Array to use for size and dtype
   :type pda: pdarray

   :returns: Equivalent to ak.ones(pda.size, pda.dtype)
   :rtype: pdarray

   :raises TypeError: Raised if the pda parameter is not a pdarray.

   .. seealso:: :obj:`ones`, :obj:`zeros_like`

   .. rubric:: Notes

   Logic for generating the pdarray is delegated to the ak.ones method.
   Accordingly, the supported dtypes match are defined by the ak.ones method.

   .. rubric:: Examples

   >>> ak.ones_like(ak.zeros(5,dtype=ak.int64))
   array([1 1 1 1 1])

   >>> ak.ones_like(ak.zeros(5,dtype=ak.float64))
   array([1.00000000000000000 1.00000000000000000 1.00000000000000000
          1.00000000000000000 1.00000000000000000])

   >>> ak.ones_like(ak.zeros(5,dtype=ak.bool_))
   array([True True True True True])


.. py:function:: promote_to_common_dtype(arrays: List[arkouda.numpy.pdarrayclass.pdarray]) -> Tuple[Any, List[arkouda.numpy.pdarrayclass.pdarray]]

   Promote a list of pdarrays to a common dtype.

   :param arrays: List of pdarrays to promote
   :type arrays: List[pdarray]

   :returns: The common dtype of the pdarrays and the list of pdarrays promoted to that dtype
   :rtype: dtype, List[pdarray]

   :raises TypeError: Raised if any pdarray is a non-numeric type

   .. seealso:: :obj:`pdarray.promote_dtype`

   .. rubric:: Examples

   >>> a = ak.arange(5)
   >>> b = ak.ones(5, dtype=ak.float64)
   >>> dtype, promoted = ak.promote_to_common_dtype([a, b])
   >>> dtype
   dtype('float64')
   >>> all(isinstance(p, ak.pdarray) and p.dtype == dtype for p in promoted)
   True


.. py:function:: randint(low: arkouda.numpy.dtypes.numeric_scalars, high: arkouda.numpy.dtypes.numeric_scalars, size: Union[arkouda.numpy.dtypes.int_scalars, Tuple[arkouda.numpy.dtypes.int_scalars, Ellipsis]] = 1, dtype=akint64, seed: Optional[arkouda.numpy.dtypes.int_scalars] = None) -> arkouda.numpy.pdarrayclass.pdarray

   Generate a pdarray of randomized int, float, or bool values in a
   specified range bounded by the low and high parameters.

   :param low: The low value (inclusive) of the range
   :type low: numeric_scalars
   :param high: The high value (exclusive for int, inclusive for float) of the range
   :type high: numeric_scalars
   :param size: The size or shape of the returned array
   :type size: int_scalars or tuple of int_scalars
   :param dtype: The dtype of the array
   :type dtype: Union[int64, float64, bool]
   :param seed: Index for where to pull the first returned value
   :type seed: int_scalars, optional

   :returns: Values drawn uniformly from the specified range having the desired dtype
   :rtype: pdarray

   :raises TypeError: Raised if dtype.name not in DTypes, size is not an int, low or high is
       not an int or float, or seed is not an int
   :raises ValueError: Raised if size < 0 or if high < low

   .. rubric:: Notes

   Calling randint with dtype=float64 will result in uniform non-integral
   floating point values.

   Ranges >= 2**64 in size is undefined behavior because
   it exceeds the maximum value that can be stored on the server (uint64)

   .. rubric:: Examples

   >>> ak.randint(0, 10, 5, seed=1701)
   array([6 5 1 6 3])

   >>> ak.randint(0, 1, 3, seed=1701, dtype=ak.float64)
   array([0.011410423448327005 0.73618171558685619 0.12367222192448891])

   >>> ak.randint(0, 1, 5, seed=1701, dtype=ak.bool_)
   array([False True False True False])


.. py:function:: random_strings_lognormal(logmean: arkouda.numpy.dtypes.numeric_scalars, logstd: arkouda.numpy.dtypes.numeric_scalars, size: arkouda.numpy.dtypes.int_scalars, characters: str = 'uppercase', seed: Optional[arkouda.numpy.dtypes.int_scalars] = None) -> arkouda.numpy.strings.Strings

   Generate random strings with log-normally distributed lengths and
   with characters drawn from a specified set.

   :param logmean: The log-mean of the length distribution
   :type logmean: numeric_scalars
   :param logstd: The log-standard-deviation of the length distribution
   :type logstd: numeric_scalars
   :param size: The number of strings to generate
   :type size: int_scalars
   :param characters: The set of characters to draw from
   :type characters: (uppercase, lowercase, numeric, printable, binary)
   :param seed: Value used to initialize the random number generator
   :type seed: int_scalars, optional

   :returns: The Strings object encapsulating a pdarray of random strings
   :rtype: Strings

   :raises TypeError: Raised if logmean is neither a float nor a int, logstd is not a float,
       seed is not an int, size is not an int, or if characters is not a str
   :raises ValueError: Raised if logstd <= 0 or size < 0

   .. seealso:: :obj:`random_strings_lognormal`, :obj:`randint`

   .. rubric:: Notes

   The lengths of the generated strings are distributed $Lognormal(\mu, \sigma^2)$,
   with :math:`\mu = logmean` and :math:`\sigma = logstd`. Thus, the strings will
   have an average length of :math:`exp(\mu + 0.5*\sigma^2)`, a minimum length of
   zero, and a heavy tail towards longer strings.

   .. rubric:: Examples

   >>> ak.random_strings_lognormal(2, 0.25, 5, seed=1)
   array(['VWHJEX', 'BEBBXJHGM', 'RWOVKBUR', 'LNJCSDXD', 'NKEDQC'])

   >>> ak.random_strings_lognormal(2, 0.25, 5, seed=1, characters='printable')
   array(['eL96<O', ')o-GOe lR', ')PV yHf(', '._b3Yc&K', ',7Wjef'])


.. py:function:: random_strings_uniform(minlen: arkouda.numpy.dtypes.int_scalars, maxlen: arkouda.numpy.dtypes.int_scalars, size: arkouda.numpy.dtypes.int_scalars, characters: str = 'uppercase', seed: Union[None, arkouda.numpy.dtypes.int_scalars] = None) -> arkouda.numpy.strings.Strings

   Generate random strings with lengths uniformly distributed between
   minlen and maxlen, and with characters drawn from a specified set.

   :param minlen: The minimum allowed length of string
   :type minlen: int_scalars
   :param maxlen: The maximum allowed length of string
   :type maxlen: int_scalars
   :param size: The number of strings to generate
   :type size: int_scalars
   :param characters: The set of characters to draw from
   :type characters: (uppercase, lowercase, numeric, printable, binary)
   :param seed: Value used to initialize the random number generator
   :type seed: Union[None, int_scalars], optional

   :returns: The array of random strings
   :rtype: Strings

   :raises ValueError: Raised if minlen < 0, maxlen < minlen, or size < 0

   .. seealso:: :obj:`random_strings_lognormal`, :obj:`randint`

   .. rubric:: Examples

   >>> ak.random_strings_uniform(minlen=1, maxlen=5, seed=8675309, size=5)
   array(['ECWO', 'WSS', 'TZG', 'RW', 'C'])

   >>> ak.random_strings_uniform(minlen=1, maxlen=5, seed=8675309, size=5,
   ... characters='printable')
   array(['2 .z', 'aom', '2d|', 'o(', 'M'])


.. py:function:: scalar_array(value: arkouda.numpy.dtypes.numeric_scalars, dtype: Optional[Union[numpy.dtype, type, str, arkouda.numpy.dtypes.bigint]] = None) -> arkouda.numpy.pdarrayclass.pdarray

   Create a pdarray from a single scalar value.

   :param value: Value to create pdarray from
   :type value: numeric_scalars

   :returns: pdarray with a single element
   :rtype: pdarray

   .. rubric:: Examples

   >>> ak.scalar_array(5)
   array([5])

   >>> ak.scalar_array(7.0)
   array([7.00000000000000000])

   :raises RuntimeError: Raised if value cannot be cast as dtype


.. py:function:: standard_normal(size: arkouda.numpy.dtypes.int_scalars, seed: Union[None, arkouda.numpy.dtypes.int_scalars] = None) -> arkouda.numpy.pdarrayclass.pdarray

   Draw real numbers from the standard normal distribution.

   :param size: The number of samples to draw (size of the returned array)
   :type size: int_scalars
   :param seed: Value used to initialize the random number generator
   :type seed: int_scalars

   :returns: The array of random numbers
   :rtype: pdarray, float64

   :raises TypeError: Raised if size is not an int
   :raises ValueError: Raised if size < 0

   .. seealso:: :obj:`randint`

   .. rubric:: Notes

   For random samples from :math:`N(\mu, \sigma^2)`, use:

   ``(sigma * standard_normal(size)) + mu``

   .. rubric:: Examples

   >>> ak.standard_normal(3,1)
   array([-0.68586185091150265 1.1723810583573377 0.567584107142031])


.. py:function:: uniform(size: arkouda.numpy.dtypes.int_scalars, low: arkouda.numpy.dtypes.numeric_scalars = float(0.0), high: arkouda.numpy.dtypes.numeric_scalars = 1.0, seed: Union[None, arkouda.numpy.dtypes.int_scalars] = None) -> arkouda.numpy.pdarrayclass.pdarray

   Generate a pdarray with uniformly distributed random float values
   in a specified range.

   :param low: The low value (inclusive) of the range, defaults to 0.0
   :type low: float_scalars
   :param high: The high value (inclusive) of the range, defaults to 1.0
   :type high: float_scalars
   :param size: The length of the returned array
   :type size: int_scalars
   :param seed: Value used to initialize the random number generator
   :type seed: int_scalars, optional

   :returns: Values drawn uniformly from the specified range
   :rtype: pdarray, float64

   :raises TypeError: Raised if dtype.name not in DTypes, size is not an int, or if
       either low or high is not an int or float
   :raises ValueError: Raised if size < 0 or if high < low

   .. rubric:: Notes

   The logic for uniform is delegated to the ak.randint method which
   is invoked with a dtype of float64

   .. rubric:: Examples

   >>> ak.uniform(3,seed=1701)
   array([0.011410423448327005 0.73618171558685619 0.12367222192448891])

   >>> ak.uniform(size=3,low=0,high=5,seed=0)
   array([0.30013431967121934 0.47383036230759112 1.0441791878997098])


.. py:function:: zeros(size: Union[arkouda.numpy.dtypes.int_scalars, Tuple[arkouda.numpy.dtypes.int_scalars, Ellipsis], str], dtype: Union[numpy.dtype, type, str, arkouda.numpy.dtypes.bigint] = float64, max_bits: Optional[int] = None) -> arkouda.numpy.pdarrayclass.pdarray

   Create a pdarray filled with zeros.

   :param size: Size or shape of the array
   :type size: int_scalars or tuple of int_scalars
   :param dtype: Type of resulting array, default ak.float64
   :type dtype: all_scalars
   :param max_bits: Specifies the maximum number of bits; only used for bigint pdarrays
                    Included for consistency, as zeros are represented as all zeros, regardless
                    of the value of max_bits
   :type max_bits: int

   :returns: Zeros of the requested size or shape and dtype
   :rtype: pdarray

   :raises TypeError: Raised if the supplied dtype is not supported
   :raises RuntimeError: Raised if the size parameter is neither an int nor a str that is parseable to an int.
   :raises ValueError: Raised if the rank of the given shape is not in get_array_ranks() or is empty
       Raised if max_bits is not NONE and ndim does not equal 1

   .. seealso:: :obj:`ones`, :obj:`zeros_like`

   .. rubric:: Examples

   >>> ak.zeros(5, dtype=ak.int64)
   array([0 0 0 0 0])

   >>> ak.zeros(5, dtype=ak.float64)
   array([0.00000000000000000 0.00000000000000000 0.00000000000000000
          0.00000000000000000 0.00000000000000000])

   >>> ak.zeros(5, dtype=ak.bool_)
   array([False False False False False])


.. py:function:: zeros_like(pda: arkouda.numpy.pdarrayclass.pdarray) -> arkouda.numpy.pdarrayclass.pdarray

   Create a zero-filled pdarray of the same size and dtype as an existing
   pdarray.

   :param pda: Array to use for size and dtype
   :type pda: pdarray

   :returns: Equivalent to ak.zeros(pda.size, pda.dtype)
   :rtype: pdarray

   :raises TypeError: Raised if the pda parameter is not a pdarray.

   .. seealso:: :obj:`zeros`, :obj:`ones_like`

   .. rubric:: Examples

   >>> ak.zeros_like(ak.ones(5,dtype=ak.int64))
   array([0 0 0 0 0])

   >>> ak.zeros_like(ak.ones(5,dtype=ak.float64))
   array([0.00000000000000000 0.00000000000000000 0.00000000000000000
          0.00000000000000000 0.00000000000000000])

   >>> ak.zeros_like(ak.ones(5,dtype=ak.bool_))
   array([False False False False False])


