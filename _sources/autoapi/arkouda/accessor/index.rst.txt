arkouda.accessor
================

.. py:module:: arkouda.accessor

.. autoapi-nested-parse::

   Accessor utilities for Arkouda Series-like objects.

   This module defines infrastructure for namespace-based accessors (e.g., `.str`, `.dt`)
   on Arkouda Series, mimicking the behavior of pandas-style accessors. It supports
   extension methods for string and datetime-like values, enabling operations to be
   performed in a clean, grouped syntax.

   Components
   ----------
   :class:`.CachedAccessor`
       Descriptor that lazily initializes and caches accessor objects, such as `.str` or `.dt`.

   :class:`.DatetimeAccessor`
       Implements datetime-like operations (e.g., floor, ceil, round) via the `.dt` accessor.

   :class:`.StringAccessor`
       Implements string-like operations (e.g., contains, startswith, endswith) via the `.str` accessor.

   :class:`.Properties`
       Base class that provides `_make_op` for dynamically attaching operations to accessors.

   :func:`.date_operators`
       Class decorator that adds datetime operations to `DatetimeAccessor`.

   :func:`.string_operators`
       Class decorator that adds string operations to `StringAccessor`.

   Usage
   -----
   >>> import arkouda as ak
   >>> from arkouda import Series
   >>> s = Series(["apple", "banana", "apricot"])
   >>> s.str.startswith("a")
   0     True
   1    False
   2     True
   dtype: bool

   >>> from arkouda import Datetime
   >>> t = Series(Datetime(ak.array([1_000_000_000_000])))
   >>> t.dt.floor("D")
   0   1970-01-01
   dtype: datetime64[ns]

   .. rubric:: Notes

   These accessors are automatically attached to compatible Series objects.
   Users should not instantiate accessors directly â€” use `.str` and `.dt` instead.



Classes
-------

.. autoapisummary::

   arkouda.accessor.CachedAccessor
   arkouda.accessor.DatetimeAccessor
   arkouda.accessor.Properties
   arkouda.accessor.StringAccessor


Functions
---------

.. autoapisummary::

   arkouda.accessor.date_operators
   arkouda.accessor.string_operators


Module Contents
---------------

.. py:class:: CachedAccessor(name: str, accessor)

   Descriptor for caching namespace-based accessors.

   This custom property-like object enables lazy initialization of accessors
   (e.g., `.str`, `.dt`) on Series-like objects, similar to pandas-style extension
   accessors.

   :param name: The name of the namespace to be accessed (e.g., ``df.foo``).
   :type name: str
   :param accessor: A class implementing the accessor logic.
   :type accessor: type

   .. rubric:: Notes

   The `accessor` class's ``__init__`` method must accept a single positional
   argument, which should be one of ``Series``, ``DataFrame``, or ``Index``.


.. py:class:: DatetimeAccessor(series)

   Bases: :py:obj:`Properties`


   Accessor for datetime-like operations on Arkouda Series.

   Provides datetime methods such as `.floor()`, `.ceil()`, and `.round()`,
   mirroring the `.dt` accessor in pandas.

   This accessor is automatically attached to Series objects that wrap
   `arkouda.Datetime` values. It should not be instantiated directly.

   :param series: The Series object containing `Datetime` values.
   :type series: arkouda.pandas.Series

   :raises AttributeError: If the underlying Series values are not of type `arkouda.Datetime`.

   .. rubric:: Examples

   >>> import arkouda as ak
   >>> from arkouda import Datetime, Series
   >>> s = Series(Datetime(ak.array([1_000_000_000_000])))
   >>> s.dt.floor("D")
   0   1970-01-01
   dtype: datetime64[ns]


   .. py:attribute:: series


.. py:class:: Properties

   Base class for accessor implementations in Arkouda.

   Provides the `_make_op` class method to dynamically generate accessor methods
   that wrap underlying `Strings` or `Datetime` operations and return new Series.

   .. rubric:: Notes

   This class is subclassed by `StringAccessor` and `DatetimeAccessor`, and is not
   intended to be used directly.

   .. rubric:: Examples

   Subclasses should define `_make_op("operation_name")`, which will generate
   a method that applies `series.values.operation_name(...)` and returns a new Series.


.. py:class:: StringAccessor(series)

   Bases: :py:obj:`Properties`


   Accessor for string operations on Arkouda Series.

   Provides string-like methods such as `.contains()`, `.startswith()`, and
   `.endswith()` via the `.str` accessor, similar to pandas.

   This accessor is automatically attached to Series objects that wrap
   `arkouda.Strings` or `arkouda.Categorical` values. It should not be instantiated directly.

   :param series: The Series object containing `Strings` or `Categorical` values.
   :type series: arkouda.pandas.Series

   :raises AttributeError: If the underlying Series values are not `Strings` or `Categorical`.

   .. rubric:: Examples

   >>> import arkouda as ak
   >>> from arkouda import Series
   >>> s = Series(["apple", "banana", "apricot"])
   >>> s.str.startswith("a")
   0     True
   1    False
   2     True
   dtype: bool


   .. py:attribute:: series


.. py:function:: date_operators(cls)

   Add common datetime operation methods to a DatetimeAccessor class.

   This class decorator dynamically attaches datetime operations (`floor`,
   `ceil`, `round`) to the given class using the `_make_op` helper.

   :param cls: The accessor class to decorate.
   :type cls: type

   :returns: The accessor class with datetime methods added.
   :rtype: type

   .. rubric:: Notes

   Used internally to implement the `.dt` accessor API.


.. py:function:: string_operators(cls)

   Add common string operation methods to a StringAccessor class.

   This class decorator dynamically attaches string operations (`contains`,
   `startswith`, `endswith`) to the given class using the `_make_op` helper.

   :param cls: The accessor class to decorate.
   :type cls: type

   :returns: The accessor class with string methods added.
   :rtype: type

   .. rubric:: Notes

   Used internally to implement the `.str` accessor API.


