arkouda.accessor
================

.. py:module:: arkouda.accessor

.. autoapi-nested-parse::

   Accessor utilities for Arkouda Series-like objects.

   This module defines infrastructure for namespace-based accessors (e.g., `.str`, `.dt`)
   on Arkouda Series, mimicking the behavior of pandas-style accessors. It supports
   extension methods for string and datetime-like values, enabling operations to be
   performed in a clean, grouped syntax.

   Exports
   -------
   __all__ = [
       "CachedAccessor",
       "DatetimeAccessor",
       "Properties",
       "StringAccessor",
       "date_operators",
       "string_operators",
   ]

   Components
   ----------
   CachedAccessor : class
       Descriptor that lazily initializes and caches accessor objects, such as `.str` or `.dt`.

   DatetimeAccessor : class
       Implements datetime-like operations (e.g., floor, ceil, round) via the `.dt` accessor.

   StringAccessor : class
       Implements string-like operations (e.g., contains, startswith, endswith) via the `.str` accessor.

   Properties : base class
       Base class that provides `_make_op` for dynamically attaching operations to accessors.

   date_operators : function
       Class decorator that adds datetime operations to `DatetimeAccessor`.

   string_operators : function
       Class decorator that adds string operations to `StringAccessor`.

   Usage
   -----
   >>> import arkouda as ak
   >>> from arkouda import Series
   >>> s = Series(["apple", "banana", "apricot"])
   >>> s.str.startswith("a")
   0     True
   1    False
   2     True
   dtype: bool

   >>> from arkouda import Datetime
   >>> t = Series(Datetime(ak.array([1_000_000_000_000])))
   >>> t.dt.floor("D")
   0   1970-01-01
   dtype: datetime64[ns]

   .. rubric:: Notes

   These accessors are automatically attached to compatible Series objects.
   Users should not instantiate accessors directly â€” use `.str` and `.dt` instead.



Classes
-------

.. autoapisummary::

   arkouda.accessor.CachedAccessor
   arkouda.accessor.DatetimeAccessor
   arkouda.accessor.Properties
   arkouda.accessor.StringAccessor


Functions
---------

.. autoapisummary::

   arkouda.accessor.date_operators
   arkouda.accessor.string_operators


Module Contents
---------------

.. py:class:: CachedAccessor(name: str, accessor)

   Custom property-like object.

   A descriptor for caching accessors.

   :param name: Namespace that will be accessed under, e.g. ``df.foo``.
   :type name: str
   :param accessor: Class with the extension methods.
   :type accessor: cls

   .. rubric:: Notes

   For accessor, The class's __init__ method assumes that one of
   ``Series``, ``DataFrame`` or ``Index`` as the
   single argument ``data``.


.. py:class:: DatetimeAccessor(series)

   Bases: :py:obj:`Properties`


   .. py:attribute:: series


.. py:class:: Properties

.. py:class:: StringAccessor(series)

   Bases: :py:obj:`Properties`


   .. py:attribute:: series


.. py:function:: date_operators(cls)

.. py:function:: string_operators(cls)

