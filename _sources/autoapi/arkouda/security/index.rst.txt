arkouda.security
================

.. py:module:: arkouda.security

.. autoapi-nested-parse::

   Security and user identity utilities for Arkouda clients.

   The `arkouda.security` module provides functionality for managing access credentials,
   user identity, and secure client-side metadata used in communicating with the Arkouda server.

   Features
   --------
   - Platform-independent retrieval of the current user’s username and home directory.
   - Creation and management of a `.arkouda` directory for client-specific data.
   - Secure generation of authentication tokens using Python’s `secrets` module.
   - Serialization of user credentials for use with token-based server authentication.

   Functions
   ---------
   generate_token(length=32)
       Generate a secure hexadecimal token using `secrets.token_hex`.

   generate_username_token_json(token)
       Return a JSON-formatted string containing both the current user's username and a token.

   get_home_directory()
       Return the user's home directory in a cross-platform manner.

   get_arkouda_client_directory()
       Get or create the `.arkouda` directory where client configuration and credentials are stored.

   get_username()
       Determine the system username based on the user's home directory path.

   .. rubric:: Notes

   - The `.arkouda` directory can be overridden using the `ARKOUDA_CLIENT_DIRECTORY` environment variable.
   - This module supports Linux, macOS (Darwin), and Windows platforms.
   - Token storage conventions in this module differ from the Arkouda server’s expectations /
   and must not be confused.

   .. rubric:: Examples

   >>> from arkouda.security import generate_token, get_username, generate_username_token_json
   >>> token = generate_token()
   >>> print(token)  # doctest: +SKIP
   '8f3a52e1b75f44d1a3a57a869488b637'

   >>> user = get_username()
   >>> print(user)  # doctest: +SKIP
   'emma'

   >>> generate_username_token_json(token)  # doctest: +SKIP
   '{"username": "emma", "token": "8f3a52e1b75f44d1a3a57a869488b637"}'



Functions
---------

.. autoapisummary::

   arkouda.security.generate_token
   arkouda.security.generate_username_token_json
   arkouda.security.get_arkouda_client_directory
   arkouda.security.get_home_directory
   arkouda.security.get_username


Module Contents
---------------

.. py:function:: generate_token(length: int = 32) -> str

   Use the secrets.token_hex() method to generate a hexidecimal token.

   :param length: The desired length of token
   :type length: int

   :returns: The hexidecimal string generated by Python
   :rtype: str

   .. rubric:: Notes

   This method uses the Python secrets.token_hex method


.. py:function:: generate_username_token_json(token: str) -> str

   Generate a JSON object encapsulating the user's username and token.

   These credentials are for connecting to an arkouda server with basic
   authentication enabled.

   :param token: The token to be used to access arkouda server
   :type token: string

   :returns: The JSON-formatted string encapsulating username and token
   :rtype: str


.. py:function:: get_arkouda_client_directory() -> pathlib.Path

   Find a path to the current user's .arkouda directory.

   Artifacts such as server access tokens are stored in a platform-independent manner
   in the .arkouda directory.

   :returns: Path corresponding to the user's .arkouda directory path
   :rtype: Path

   .. rubric:: Notes

   The default implementation is to place the .arkouda
   directory in the current user's home directory. The
   default can be overridden by setting the ARKOUDA_CLIENT_DIRECTORY
   environment variable.  It is important this is not the same location
   as the server's token directory as the file format is different.


.. py:function:: get_home_directory() -> str

   Find a path to the current user's home directory in a platform-independent manner.

   :returns: The user's home directory path
   :rtype: str

   .. rubric:: Notes

   This method uses the Python os.path.expanduser method
   to retrieve the user's home directory


.. py:function:: get_username() -> str

   Retrieve the current user's username for the host system in a platform-independent manner.

   :returns: The username in the form of string
   :rtype: str

   :raises EnvironmentError: Raised if the host OS is unsupported

   .. rubric:: Notes

   The currently supported operating systems are Windows, Linux,
   and MacOS AKA Darwin


