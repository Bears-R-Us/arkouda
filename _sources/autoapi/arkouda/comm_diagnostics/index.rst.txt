arkouda.comm_diagnostics
========================

.. py:module:: arkouda.comm_diagnostics

.. autoapi-nested-parse::

   Communication diagnostics and instrumentation utilities for Arkouda.

   This module provides tools to collect, reset, and report Chapel communication statistics
   used in Arkouda operations. It is useful for profiling and debugging distributed communication
   patterns in both blocking and non-blocking modes. The diagnostics can be queried at a per-locale
   level and printed as a markdown-formatted summary.

   Features
   --------
   - Start/stop/reset communication diagnostics tracking
   - Enable verbose reporting of communication events
   - Retrieve statistics on blocking/non-blocking gets, puts, AMOs, and remote execution
   - Inspect remote cache usage (hits, misses, prefetch, readahead)
   - Aggregate results into a DataFrame
   - Export markdown summary tables

   Functions
   ---------
   start_comm_diagnostics()
   stop_comm_diagnostics()
   reset_comm_diagnostics()
   print_comm_diagnostics_table(print_empty_columns=False)
   start_verbose_comm()
   stop_verbose_comm()

   Getters for specific metrics:
   - get_comm_diagnostics_{put, get, put_nb, get_nb, try_nb, wait_nb, amo}
   - get_comm_diagnostics_{execute_on, execute_on_fast, execute_on_nb}
   - get_comm_diagnostics_cache_{get_hits, get_misses, put_hits, put_misses,
     num_prefetches, num_page_readaheads, prefetch_unused, prefetch_waited,
     readahead_unused, readahead_waited}

   get_comm_diagnostics() → DataFrame
       Collect all diagnostics into a single DataFrame.

   .. rubric:: Examples

   >>> import arkouda as ak
   >>> import arkouda.comm_diagnostics as cd
   >>> ak.connect()
   >>> from arkouda.comm_diagnostics import start_comm_diagnostics, stop_comm_diagnostics, get_comm_diagnostics, print_comm_diagnostics_table
   >>> start_comm_diagnostics()
   'commDiagnostics started.'
   >>> a = ak.randint(0, 100, 1_000_000)
   >>> b = ak.sort(a)
   >>> stop_comm_diagnostics()
   'commDiagnostics stopped.'
   >>> df = get_comm_diagnostics()
   >>> df.columns
   Index(['put', 'get', 'put_nb', 'get_nb', 'try_nb', 'amo', 'execute_on', 'execute_on_fast', 'execute_on_nb', 'cache_get_hits', 'cache_get_misses', 'cache_put_hits', 'cache_put_misses', 'cache_num_prefetches', 'cache_num_page_readaheads', 'cache_prefetch_unused', 'cache_prefetch_waited', 'cache_readahead_unused', 'cache_readahead_waited', 'wait_nb'], dtype='<U0')
   >>> df[["put","get"]]  # doctest: +SKIP
      put  get
   0  162  118
   1  170  198
   2  170  198
   3  170  198 (4 rows x 2 columns)

   >>> print_comm_diagnostics_table()  # doctest: +SKIP
   +----+-------+-------+--------------+-----------------+
   |    |   put |   get |   execute_on |   execute_on_nb |
   +====+=======+=======+==============+=================+
   |  0 |   162 |   118 |          180 |             126 |
   +----+-------+-------+--------------+-----------------+
   |  1 |   170 |   198 |          184 |               0 |
   +----+-------+-------+--------------+-----------------+
   |  2 |   170 |   198 |          184 |               0 |
   +----+-------+-------+--------------+-----------------+
   |  3 |   170 |   198 |          184 |               0 |
   +----+-------+-------+--------------+-----------------+
   'commDiagnostics printed.'

   ...

   .. rubric:: Notes

   Printed tables and verbose messages appear in the server-side Chapel logs.

   .. seealso:: :py:obj:`arkouda.DataFrame`, :py:obj:`arkouda.client.generic_msg`



Functions
---------

.. autoapisummary::

   arkouda.comm_diagnostics.get_comm_diagnostics
   arkouda.comm_diagnostics.get_comm_diagnostics_amo
   arkouda.comm_diagnostics.get_comm_diagnostics_cache_get_hits
   arkouda.comm_diagnostics.get_comm_diagnostics_cache_get_misses
   arkouda.comm_diagnostics.get_comm_diagnostics_cache_num_page_readaheads
   arkouda.comm_diagnostics.get_comm_diagnostics_cache_num_prefetches
   arkouda.comm_diagnostics.get_comm_diagnostics_cache_prefetch_unused
   arkouda.comm_diagnostics.get_comm_diagnostics_cache_prefetch_waited
   arkouda.comm_diagnostics.get_comm_diagnostics_cache_put_hits
   arkouda.comm_diagnostics.get_comm_diagnostics_cache_put_misses
   arkouda.comm_diagnostics.get_comm_diagnostics_cache_readahead_unused
   arkouda.comm_diagnostics.get_comm_diagnostics_cache_readahead_waited
   arkouda.comm_diagnostics.get_comm_diagnostics_execute_on
   arkouda.comm_diagnostics.get_comm_diagnostics_execute_on_fast
   arkouda.comm_diagnostics.get_comm_diagnostics_execute_on_nb
   arkouda.comm_diagnostics.get_comm_diagnostics_get
   arkouda.comm_diagnostics.get_comm_diagnostics_get_nb
   arkouda.comm_diagnostics.get_comm_diagnostics_put
   arkouda.comm_diagnostics.get_comm_diagnostics_put_nb
   arkouda.comm_diagnostics.get_comm_diagnostics_try_nb
   arkouda.comm_diagnostics.get_comm_diagnostics_wait_nb
   arkouda.comm_diagnostics.print_comm_diagnostics_table
   arkouda.comm_diagnostics.reset_comm_diagnostics
   arkouda.comm_diagnostics.start_comm_diagnostics
   arkouda.comm_diagnostics.start_verbose_comm
   arkouda.comm_diagnostics.stop_comm_diagnostics
   arkouda.comm_diagnostics.stop_verbose_comm


Module Contents
---------------

.. py:function:: get_comm_diagnostics() -> arkouda.pandas.dataframe.DataFrame

   Return a DataFrame with the communication diagnostics statistics.

   :rtype: DataFrame


.. py:function:: get_comm_diagnostics_amo()

   Return atomic memory operations statistic.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_cache_get_hits()

   Return number of gets that were handled by the cache.

   Gets counted here did not require the cache to communicate in order to return the result.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_cache_get_misses()

   Return number of gets that were not handled by the cache.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_cache_num_page_readaheads()

   Return number of readaheads issued to the remote cache at the granularity of cache pages.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_cache_num_prefetches()

   Return number of prefetches issued to the remote cache at the granularity of cache pages.

   This counter is specifically triggered via calls to chpl_comm_remote_prefetch.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_cache_prefetch_unused()

   Return number of cache pages that were prefetched but unused.

   Return number of cache pages that were prefetched but evicted from the cache before being accessed
   (i.e., the prefetches were too early).

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_cache_prefetch_waited()

   Return number of cache pages that were prefetched but waited.

   Number of cache pages that were prefetched but did not arrive in the cache before being accessed
   (i.e., the prefetches were too late).

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_cache_put_hits()

   Return number of puts that were stored in cache pages that already existed.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_cache_put_misses()

   Return number of puts that required the cache to create a new page to store them.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_cache_readahead_unused()

   Return number of cache pages that were read ahead but unused.

   The number of cache pages that were read ahead but evicted from the cache before being accessed
   (i.e., the readaheads were too early).

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_cache_readahead_waited()

   Return number of cache pages that were read ahead but waited.

   Return number of cache pages that were read ahead
   but did not arrive in the cache before being accessed
   (i.e., the readaheads were too late).

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_execute_on()

   Return blocking remote executions, in which initiator waits for completion.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_execute_on_fast()

   Return blocking remote executions performed by the target locale’s Active Message handler.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_execute_on_nb()

   Return non-blocking remote executions.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_get()

   Return blocking gets, in which initiator waits for completion.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_get_nb()

   Return non-blocking gets.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_put()

   Return blocking puts, in which initiator waits for completion.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_put_nb()

   Return non-blocking puts.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_try_nb()

   Return test statistics for non-blocking get/put completions.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: get_comm_diagnostics_wait_nb()

   Return blocking waits for non-blocking get/put completions.

   :returns: A pdarray, where the size is the number of locales,
             populated with the statistic value from each locale.
   :rtype: pdarray


.. py:function:: print_comm_diagnostics_table(print_empty_columns=False)

   Print the current communication counts in a markdown table.

   Uses a row per locale and a column per operation.
   By default, operations for which all locales have a count of zero are not displayed in the table,
   though an argument can be used to reverse that behavior.

   :param print_empty_columns:
   :type print_empty_columns: bool=False

   .. note:: The table will only be printed to the chapel logs.

   :returns: Completion message.
   :rtype: str


.. py:function:: reset_comm_diagnostics()

   Reset aggregate communication counts across the whole program.

   :returns: Completion message.
   :rtype: str


.. py:function:: start_comm_diagnostics()

   Start counting communication operations across the whole program.

   :returns: Completion message.
   :rtype: str


.. py:function:: start_verbose_comm()

   Start on-the-fly reporting of communication initiated on any locale.

   .. note:: Reporting will only be printed to the chapel logs.

   :returns: Completion message.
   :rtype: str


.. py:function:: stop_comm_diagnostics()

   Stop counting communication operations across the whole program.

   :returns: Completion message.
   :rtype: str


.. py:function:: stop_verbose_comm()

   Stop on-the-fly reporting of communication initiated on any locale.

   :returns: Completion message.
   :rtype: str


