arkouda.array_api.array_object
==============================

.. py:module:: arkouda.array_api.array_object

.. autoapi-nested-parse::

   Wrapper class around the ndarray object for the array API standard.

   The array API standard defines some behaviors differently than ndarray, in
   particular, type promotion rules are different (the standard has no
   value-based casting). The standard also specifies a more limited subset of
   array methods and functionalities than are implemented on ndarray. Since the
   goal of the array_api namespace is to be a minimal implementation of the array
   API standard, we need to define a separate wrapper class for the array_api
   namespace.

   The standard compliant class is only a wrapper class. It is *not* a subclass
   of ndarray.



Attributes
----------

.. autoapisummary::

   arkouda.array_api.array_object.HANDLED_FUNCTIONS


Classes
-------

.. autoapisummary::

   arkouda.array_api.array_object.Array


Functions
---------

.. autoapisummary::

   arkouda.array_api.array_object.implements_numpy


Module Contents
---------------

.. py:class:: Array

   n-d array object for the array API namespace.

   See the docstring of :py:obj:`np.ndarray <numpy.ndarray>` for more
   information.

   This is a wrapper around numpy.ndarray that restricts the usage to only
   those things that are required by the array API namespace. Note,
   attributes on this object that start with a single underscore are not part
   of the API specification and should only be used internally. This object
   should not be constructed directly. Rather, use one of the creation
   functions, such as asarray().



   .. py:property:: T
      :type: Array



   .. py:method:: chunk_info(/) -> List[List[int]]

      Get a list of indices indicating how the array is chunked across
      Locales (compute nodes). Although Arkouda arrays don't have a notion
      of chunking, like Dask arrays for example, it can be useful to know
      how the array is distributed across locales in order to write/read
      data to/from a chunked format like Zarr.

      Returns a nested list of integers, where the outer list corresponds to
      dimensions, and the inner lists correspond to locales. The value at [d][l]
      is the global array index where locale l's local subdomain along the
      d-th dimension begins.

      For example, calling this function on a 100x40 2D array stored across 4
      locales could return: [[0, 50], [0, 20]], indicating that the 4 "chunks"
      start at indices 0 and 50 in the first dimension, and 0 and 20 in the
      second dimension.



   .. py:property:: device
      :type: arkouda.array_api._typing.Device



   .. py:property:: dtype
      :type: arkouda.array_api._typing.Dtype



   .. py:method:: item()

      Get the scalar value from a 0-dimensional array.

      Raises a ValueError if the array has more than one element.



   .. py:property:: mT
      :type: Array



   .. py:property:: ndim
      :type: int



   .. py:property:: shape
      :type: Tuple[int, Ellipsis]



   .. py:property:: size
      :type: int



   .. py:method:: to_device(device: arkouda.array_api._typing.Device, /, stream: None = None) -> Array


   .. py:method:: to_ndarray()

      Convert the array to a numpy ndarray

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: tolist()

      Convert the array to a Python list or nested lists

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: transpose(axes: Optional[Tuple[int, Ellipsis]] = None)

      Return a view of the array with the specified axes transposed.

      For axes=None, reverse all the dimensions of the array.



.. py:data:: HANDLED_FUNCTIONS
   :type:  Dict[str, Callable]

.. py:function:: implements_numpy(numpy_function)

   Register an __array_function__ implementation for MyArray objects.


