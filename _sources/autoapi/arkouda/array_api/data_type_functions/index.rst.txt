arkouda.array_api.data_type_functions
=====================================

.. py:module:: arkouda.array_api.data_type_functions


Classes
-------

.. autoapisummary::

   arkouda.array_api.data_type_functions.Array
   arkouda.array_api.data_type_functions.finfo_object
   arkouda.array_api.data_type_functions.iinfo_object


Functions
---------

.. autoapisummary::

   arkouda.array_api.data_type_functions.astype
   arkouda.array_api.data_type_functions.can_cast
   arkouda.array_api.data_type_functions.finfo
   arkouda.array_api.data_type_functions.iinfo
   arkouda.array_api.data_type_functions.implements_numpy
   arkouda.array_api.data_type_functions.isdtype
   arkouda.array_api.data_type_functions.result_type


Module Contents
---------------

.. py:class:: Array

   n-d array object for the array API namespace.

   See the docstring of :py:obj:`np.ndarray <numpy.ndarray>` for more
   information.

   This is a wrapper around numpy.ndarray that restricts the usage to only
   those things that are required by the array API namespace. Note,
   attributes on this object that start with a single underscore are not part
   of the API specification and should only be used internally. This object
   should not be constructed directly. Rather, use one of the creation
   functions, such as asarray().



   .. py:property:: T
      :type: Array



   .. py:method:: chunk_info(/) -> List[List[int]]

      Get a list of indices indicating how the array is chunked across
      Locales (compute nodes). Although Arkouda arrays don't have a notion
      of chunking, like Dask arrays for example, it can be useful to know
      how the array is distributed across locales in order to write/read
      data to/from a chunked format like Zarr.

      Returns a nested list of integers, where the outer list corresponds to
      dimensions, and the inner lists correspond to locales. The value at [d][l]
      is the global array index where locale l's local subdomain along the
      d-th dimension begins.

      For example, calling this function on a 100x40 2D array stored across 4
      locales could return: [[0, 50], [0, 20]], indicating that the 4 "chunks"
      start at indices 0 and 50 in the first dimension, and 0 and 20 in the
      second dimension.



   .. py:property:: device
      :type: arkouda.array_api._typing.Device



   .. py:property:: dtype
      :type: arkouda.array_api._typing.Dtype



   .. py:method:: item()

      Get the scalar value from a 0-dimensional array.

      Raises a ValueError if the array has more than one element.



   .. py:property:: mT
      :type: Array



   .. py:property:: ndim
      :type: int



   .. py:property:: shape
      :type: Tuple[int, Ellipsis]



   .. py:property:: size
      :type: int



   .. py:method:: to_device(device: arkouda.array_api._typing.Device, /, stream: None = None) -> Array


   .. py:method:: to_ndarray()

      Convert the array to a numpy ndarray

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: tolist()

      Convert the array to a Python list or nested lists

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: transpose(axes: Optional[Tuple[int, Ellipsis]] = None)

      Return a view of the array with the specified axes transposed.

      For axes=None, reverse all the dimensions of the array.



.. py:function:: astype(x: arkouda.array_api.array_object.Array, dtype: arkouda.array_api._typing.Dtype, /, *, copy: bool = True) -> arkouda.array_api.array_object.Array

   Cast an array to a specified data type.


.. py:function:: can_cast(from_: Union[arkouda.array_api._typing.Dtype, arkouda.array_api.array_object.Array], to: arkouda.array_api._typing.Dtype, /) -> bool

   Determine whether an array or dtype can be cast to another dtype.


.. py:function:: finfo(type, /) -> finfo_object

.. py:class:: finfo_object

   .. py:attribute:: bits
      :type:  int


   .. py:attribute:: dtype
      :type:  arkouda.array_api._typing.Dtype


   .. py:attribute:: eps
      :type:  float


   .. py:attribute:: max
      :type:  float


   .. py:attribute:: min
      :type:  float


   .. py:attribute:: smallest_normal
      :type:  float


.. py:function:: iinfo(type, /) -> iinfo_object

.. py:class:: iinfo_object

   .. py:attribute:: bits
      :type:  int


   .. py:attribute:: dtype
      :type:  arkouda.array_api._typing.Dtype


   .. py:attribute:: max
      :type:  int


   .. py:attribute:: min
      :type:  int


.. py:function:: implements_numpy(numpy_function)

   Register an __array_function__ implementation for MyArray objects.


.. py:function:: isdtype(dtype: arkouda.array_api._typing.Dtype, kind: Union[arkouda.array_api._typing.Dtype, str, Tuple[Union[arkouda.array_api._typing.Dtype, str], Ellipsis]]) -> bool

   Returns a boolean indicating whether a provided dtype is of a specified data type ``kind``.


.. py:function:: result_type(*arrays_and_dtypes: Union[arkouda.array_api.array_object.Array, arkouda.array_api._typing.Dtype]) -> arkouda.array_api._typing.Dtype

   Compute the result dtype for a group of arrays and/or dtypes.


