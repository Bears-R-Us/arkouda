arkouda.array_api.data_type_functions
=====================================

.. py:module:: arkouda.array_api.data_type_functions


Classes
-------

.. autoapisummary::

   arkouda.array_api.data_type_functions.finfo_object
   arkouda.array_api.data_type_functions.iinfo_object


Functions
---------

.. autoapisummary::

   arkouda.array_api.data_type_functions.astype
   arkouda.array_api.data_type_functions.can_cast
   arkouda.array_api.data_type_functions.finfo
   arkouda.array_api.data_type_functions.iinfo
   arkouda.array_api.data_type_functions.isdtype
   arkouda.array_api.data_type_functions.result_type


Module Contents
---------------

.. py:function:: astype(x: arkouda.array_api.array_object.Array, dtype: arkouda.array_api._typing.Dtype, /, *, copy: bool = True) -> arkouda.array_api.array_object.Array

   Cast an array to a specified data type.


.. py:function:: can_cast(from_: Union[arkouda.array_api._typing.Dtype, arkouda.array_api.array_object.Array], to: arkouda.array_api._typing.Dtype, /) -> bool

   Determine whether an array or dtype can be cast to another dtype.


.. py:function:: finfo(type, /) -> finfo_object

.. py:class:: finfo_object

   .. py:attribute:: bits
      :type:  int


   .. py:attribute:: dtype
      :type:  arkouda.array_api._typing.Dtype


   .. py:attribute:: eps
      :type:  float


   .. py:attribute:: max
      :type:  float


   .. py:attribute:: min
      :type:  float


   .. py:attribute:: smallest_normal
      :type:  float


.. py:function:: iinfo(type, /) -> iinfo_object

.. py:class:: iinfo_object

   .. py:attribute:: bits
      :type:  int


   .. py:attribute:: dtype
      :type:  arkouda.array_api._typing.Dtype


   .. py:attribute:: max
      :type:  int


   .. py:attribute:: min
      :type:  int


.. py:function:: isdtype(dtype: arkouda.array_api._typing.Dtype, kind: Union[arkouda.array_api._typing.Dtype, str, Tuple[Union[arkouda.array_api._typing.Dtype, str], Ellipsis]]) -> bool

   Return a boolean indicating whether a provided dtype is of a specified data type ``kind``.


.. py:function:: result_type(*arrays_and_dtypes: Union[arkouda.array_api.array_object.Array, arkouda.array_api._typing.Dtype]) -> arkouda.array_api._typing.Dtype

   Compute the result dtype for a group of arrays and/or dtypes.


