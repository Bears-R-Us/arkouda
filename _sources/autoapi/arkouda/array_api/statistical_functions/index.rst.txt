arkouda.array_api.statistical_functions
=======================================

.. py:module:: arkouda.array_api.statistical_functions


Attributes
----------

.. autoapisummary::

   arkouda.array_api.statistical_functions.float64
   arkouda.array_api.statistical_functions.int64
   arkouda.array_api.statistical_functions.uint64


Classes
-------

.. autoapisummary::

   arkouda.array_api.statistical_functions.Array


Functions
---------

.. autoapisummary::

   arkouda.array_api.statistical_functions.akcast
   arkouda.array_api.statistical_functions.create_pdarray
   arkouda.array_api.statistical_functions.cumulative_sum
   arkouda.array_api.statistical_functions.generic_msg
   arkouda.array_api.statistical_functions.implements_numpy
   arkouda.array_api.statistical_functions.max
   arkouda.array_api.statistical_functions.mean
   arkouda.array_api.statistical_functions.mean_shim
   arkouda.array_api.statistical_functions.min
   arkouda.array_api.statistical_functions.parse_single_value
   arkouda.array_api.statistical_functions.prod
   arkouda.array_api.statistical_functions.scalar_array
   arkouda.array_api.statistical_functions.squeeze
   arkouda.array_api.statistical_functions.std
   arkouda.array_api.statistical_functions.sum
   arkouda.array_api.statistical_functions.var


Module Contents
---------------

.. py:class:: Array

   n-d array object for the array API namespace.

   See the docstring of :py:obj:`np.ndarray <numpy.ndarray>` for more
   information.

   This is a wrapper around numpy.ndarray that restricts the usage to only
   those things that are required by the array API namespace. Note,
   attributes on this object that start with a single underscore are not part
   of the API specification and should only be used internally. This object
   should not be constructed directly. Rather, use one of the creation
   functions, such as asarray().



   .. py:property:: T
      :type: Array



   .. py:method:: chunk_info(/) -> List[List[int]]

      Get a list of indices indicating how the array is chunked across
      Locales (compute nodes). Although Arkouda arrays don't have a notion
      of chunking, like Dask arrays for example, it can be useful to know
      how the array is distributed across locales in order to write/read
      data to/from a chunked format like Zarr.

      Returns a nested list of integers, where the outer list corresponds to
      dimensions, and the inner lists correspond to locales. The value at [d][l]
      is the global array index where locale l's local subdomain along the
      d-th dimension begins.

      For example, calling this function on a 100x40 2D array stored across 4
      locales could return: [[0, 50], [0, 20]], indicating that the 4 "chunks"
      start at indices 0 and 50 in the first dimension, and 0 and 20 in the
      second dimension.



   .. py:property:: device
      :type: arkouda.array_api._typing.Device



   .. py:property:: dtype
      :type: arkouda.array_api._typing.Dtype



   .. py:method:: item()

      Get the scalar value from a 0-dimensional array.

      Raises a ValueError if the array has more than one element.



   .. py:property:: mT
      :type: Array



   .. py:property:: ndim
      :type: int



   .. py:property:: shape
      :type: Tuple[int, Ellipsis]



   .. py:property:: size
      :type: int



   .. py:method:: to_device(device: arkouda.array_api._typing.Device, /, stream: None = None) -> Array


   .. py:method:: to_ndarray()

      Convert the array to a numpy ndarray

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: tolist()

      Convert the array to a Python list or nested lists

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: transpose(axes: Optional[Tuple[int, Ellipsis]] = None)

      Return a view of the array with the specified axes transposed.

      For axes=None, reverse all the dimensions of the array.



.. py:function:: akcast(pda: Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings, arkouda.categorical.Categorical], dt: Union[numpy.dtype, type, str, arkouda.dtypes.BigInt], errors: ErrorMode = ErrorMode.strict) -> Union[Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings, arkouda.categorical.Categorical], Tuple[arkouda.pdarrayclass.pdarray, arkouda.pdarrayclass.pdarray]]

   Cast an array to another dtype.

   :param pda: The array of values to cast
   :type pda: pdarray or Strings
   :param dt: The target dtype to cast values to
   :type dt: np.dtype, type, or str
   :param errors: Controls how errors are handled when casting strings to a numeric type
                  (ignored for casts from numeric types).
                      - strict: raise RuntimeError if *any* string cannot be converted
                      - ignore: never raise an error. Uninterpretable strings get
                          converted to NaN (float64), -2**63 (int64), zero (uint64 and
                          uint8), or False (bool)
                      - return_validity: in addition to returning the same output as
                        "ignore", also return a bool array indicating where the cast
                        was successful.
   :type errors: {strict, ignore, return_validity}

   :returns: * *pdarray or Strings* -- Array of values cast to desired dtype
             * **[validity** (*pdarray(bool)]*) -- If errors="return_validity" and input is Strings, a second array is
               returned with True where the cast succeeded and False where it failed.

   .. rubric:: Notes

   The cast is performed according to Chapel's casting rules and is NOT safe
   from overflows or underflows. The user must ensure that the target dtype
   has the precision and capacity to hold the desired result.

   .. rubric:: Examples

   >>> ak.cast(ak.linspace(1.0,5.0,5), dt=ak.int64)
   array([1, 2, 3, 4, 5])

   >>> ak.cast(ak.arange(0,5), dt=ak.float64).dtype
   dtype('float64')

   >>> ak.cast(ak.arange(0,5), dt=ak.bool)
   array([False, True, True, True, True])

   >>> ak.cast(ak.linspace(0,4,5), dt=ak.bool)
   array([False, True, True, True, True])


.. py:function:: create_pdarray(repMsg: str, max_bits=None) -> pdarray

   Return a pdarray instance pointing to an array created by the arkouda server.
   The user should not call this function directly.

   :param repMsg: space-delimited string containing the pdarray name, datatype, size
                  dimension, shape,and itemsize
   :type repMsg: str

   :returns: A pdarray with the same attributes and data as the pdarray; on GPU
   :rtype: pdarray

   :raises ValueError: If there's an error in parsing the repMsg parameter into the six
       values needed to create the pdarray instance
   :raises RuntimeError: Raised if a server-side error is thrown in the process of creating
       the pdarray instance


.. py:function:: cumulative_sum(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[int] = None, dtype: Optional[arkouda.array_api._typing.Dtype] = None, include_initial: bool = False) -> arkouda.array_api.array_object.Array

   Compute the cumulative sum of the elements of an array along a given axis.

   :param x: The array to compute the cumulative sum of
   :type x: Array
   :param axis: The axis along which to compute the cumulative sum. If x is 1D, this argument is optional,
                otherwise it is required.
   :type axis: int, optional
   :param dtype: The dtype of the returned array. If None, the dtype of the input array is used.
   :type dtype: Dtype, optional
   :param include_initial: Whether to include the initial value as the first element of the output.
   :type include_initial: bool, optional


.. py:data:: float64

.. py:function:: generic_msg(cmd: str, args: Optional[Dict] = None, payload: Optional[memoryview] = None, send_binary: bool = False, recv_binary: bool = False) -> Union[str, memoryview]

   Sends a binary or string message composed of a command and corresponding
   arguments to the arkouda_server, returning the response sent by the server.

   :param cmd: The server-side command to be executed
   :type cmd: str
   :param args: A space-delimited list of command arguments
   :type args: str
   :param payload: The payload when sending binary data
   :type payload: memoryview
   :param send_binary: Indicates if the message to be sent is a string or binary
   :type send_binary: bool
   :param recv_binary: Indicates if the return message will be a string or binary
   :type recv_binary: bool

   :returns: The string or binary return message
   :rtype: Union[str, memoryview]

   :raises KeyboardInterrupt: Raised if the user interrupts during command execution
   :raises RuntimeError: Raised if the client is not connected to the server or if
       there is a server-side error thrown

   .. rubric:: Notes

   If the server response is a string, the string corresponds to a success
   confirmation, warn message, or error message. A memoryview response
   corresponds to an Arkouda array output as a numpy array.


.. py:function:: implements_numpy(numpy_function)

   Register an __array_function__ implementation for MyArray objects.


.. py:data:: int64

.. py:function:: max(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Compute the maximum values of an array along a given axis or axes.

   :param x: The array to compute the maximum of
   :type x: Array
   :param axis: The axis or axes along which to compute the maximum values. If None, the maximum value of the
                entire array is computed (returning a scalar-array).
   :type axis: int or Tuple[int, ...], optional
   :param keepdims: Whether to keep the singleton dimension(s) along `axis` in the result.
   :type keepdims: bool, optional


.. py:function:: mean(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Compute the minimum values of an array along a given axis or axes.

   :param x: The array to compute the minimum of
   :type x: Array
   :param axis: The axis or axes along which to compute the mean. If None, the mean of the entire array is
                computed (returning a scalar-array).
   :type axis: int or Tuple[int, ...], optional
   :param keepdims: Whether to keep the singleton dimension(s) along `axis` in the result.
   :type keepdims: bool, optional


.. py:function:: mean_shim(x: arkouda.array_api.array_object.Array, axis=None, dtype=None, out=None, keepdims=False)

.. py:function:: min(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Compute the mean of an array along a given axis or axes.

   :param x: The array to compute the mean of
   :type x: Array
   :param axis: The axis or axes along which to compute the minimum values. If None, the minimum of the entire
                array is computed (returning a scalar-array).
   :type axis: int or Tuple[int, ...], optional
   :param keepdims: Whether to keep the singleton dimension(s) along `axis` in the result.
   :type keepdims: bool, optional


.. py:function:: parse_single_value(msg: str) -> object

   Attempt to convert a scalar return value from the arkouda server to a
   numpy scalar in Python. The user should not call this function directly.

   :param msg: scalar value in string form to be converted to a numpy scalar
   :type msg: str

   :rtype: object numpy scalar


.. py:function:: prod(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None, dtype: Optional[arkouda.array_api._typing.Dtype] = None, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Compute the product of an array along a given axis or axes.

   :param x: The array to compute the product of
   :type x: Array
   :param axis: The axis or axes along which to compute the product. If None, the product of the entire array
                is computed (returning a scalar-array).
   :type axis: int or Tuple[int, ...], optional
   :param dtype: The dtype of the returned array. If None, the dtype of the input array is used.
   :type dtype: Dtype, optional
   :param keepdims: Whether to keep the singleton dimension(s) along `axis` in the result.
   :type keepdims: bool, optional


.. py:function:: scalar_array(value: arkouda.dtypes.numeric_scalars)

   Create a pdarray from a single scalar value.

   :param value: Value to create pdarray from
   :type value: numeric_scalars

   :returns: pdarray with a single element
   :rtype: pdarray


.. py:function:: squeeze(x: arkouda.array_api.array_object.Array, /, axis: Union[int, Tuple[int, Ellipsis]]) -> arkouda.array_api.array_object.Array

   Remove degenerate (size one) dimensions from an array.

   :param x: The array to squeeze
   :type x: Array
   :param axis: The axis or axes to squeeze (must have a size of one).
   :type axis: int or Tuple[int, ...]


.. py:function:: std(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None, correction: Union[int, float] = 0.0, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Compute the standard deviation of an array along a given axis or axes.

   :param x: The array to compute the standard deviation of
   :type x: Array
   :param axis: The axis or axes along which to compute the standard deviation. If None, the standard deviation
                of the entire array is computed (returning a scalar-array).
   :type axis: int or Tuple[int, ...], optional
   :param correction: The degrees of freedom correction to apply. The default is 0.
   :type correction: int or float, optional
   :param keepdims: Whether to keep the singleton dimension(s) along `axis` in the result.
   :type keepdims: bool, optional


.. py:function:: sum(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None, dtype: Optional[arkouda.array_api._typing.Dtype] = None, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Compute the sum of an array along a given axis or axes.

   :param x: The array to compute the sum of
   :type x: Array
   :param axis: The axis or axes along which to compute the sum. If None, the sum of the entire array is
                computed (returning a scalar-array).
   :type axis: int or Tuple[int, ...], optional
   :param dtype: The dtype of the returned array. If None, the dtype of the input array is used.
   :type dtype: Dtype, optional
   :param keepdims: Whether to keep the singleton dimension(s) along `axis` in the result.
   :type keepdims: bool, optional


.. py:data:: uint64

.. py:function:: var(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None, correction: Union[int, float] = 0.0, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Compute the variance of an array along a given axis or axes.

   :param x: The array to compute the variance of
   :type x: Array
   :param axis: The axis or axes along which to compute the variance. If None, the variance of the entire array
                is computed (returning a scalar-array).
   :type axis: int or Tuple[int, ...], optional
   :param correction: The degrees of freedom correction to apply. The default is 0.
   :type correction: int or float, optional
   :param keepdims: Whether to keep the singleton dimension(s) along `axis` in the result.
   :type keepdims: bool, optional


