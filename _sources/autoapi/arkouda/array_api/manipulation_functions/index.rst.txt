arkouda.array_api.manipulation_functions
========================================

.. py:module:: arkouda.array_api.manipulation_functions


Classes
-------

.. autoapisummary::

   arkouda.array_api.manipulation_functions.Array


Functions
---------

.. autoapisummary::

   arkouda.array_api.manipulation_functions.broadcast_arrays
   arkouda.array_api.manipulation_functions.broadcast_dims
   arkouda.array_api.manipulation_functions.broadcast_to
   arkouda.array_api.manipulation_functions.concat
   arkouda.array_api.manipulation_functions.create_pdarray
   arkouda.array_api.manipulation_functions.expand_dims
   arkouda.array_api.manipulation_functions.flip
   arkouda.array_api.manipulation_functions.generic_msg
   arkouda.array_api.manipulation_functions.implements_numpy
   arkouda.array_api.manipulation_functions.moveaxis
   arkouda.array_api.manipulation_functions.permute_dims
   arkouda.array_api.manipulation_functions.repeat
   arkouda.array_api.manipulation_functions.reshape
   arkouda.array_api.manipulation_functions.roll
   arkouda.array_api.manipulation_functions.scalar_array
   arkouda.array_api.manipulation_functions.squeeze
   arkouda.array_api.manipulation_functions.stack
   arkouda.array_api.manipulation_functions.tile
   arkouda.array_api.manipulation_functions.unstack


Module Contents
---------------

.. py:class:: Array

   n-d array object for the array API namespace.

   See the docstring of :py:obj:`np.ndarray <numpy.ndarray>` for more
   information.

   This is a wrapper around numpy.ndarray that restricts the usage to only
   those things that are required by the array API namespace. Note,
   attributes on this object that start with a single underscore are not part
   of the API specification and should only be used internally. This object
   should not be constructed directly. Rather, use one of the creation
   functions, such as asarray().



   .. py:property:: T
      :type: Array



   .. py:method:: chunk_info(/) -> List[List[int]]

      Get a list of indices indicating how the array is chunked across
      Locales (compute nodes). Although Arkouda arrays don't have a notion
      of chunking, like Dask arrays for example, it can be useful to know
      how the array is distributed across locales in order to write/read
      data to/from a chunked format like Zarr.

      Returns a nested list of integers, where the outer list corresponds to
      dimensions, and the inner lists correspond to locales. The value at [d][l]
      is the global array index where locale l's local subdomain along the
      d-th dimension begins.

      For example, calling this function on a 100x40 2D array stored across 4
      locales could return: [[0, 50], [0, 20]], indicating that the 4 "chunks"
      start at indices 0 and 50 in the first dimension, and 0 and 20 in the
      second dimension.



   .. py:property:: device
      :type: arkouda.array_api._typing.Device



   .. py:property:: dtype
      :type: arkouda.array_api._typing.Dtype



   .. py:method:: item()

      Get the scalar value from a 0-dimensional array.

      Raises a ValueError if the array has more than one element.



   .. py:property:: mT
      :type: Array



   .. py:property:: ndim
      :type: int



   .. py:property:: shape
      :type: Tuple[int, Ellipsis]



   .. py:property:: size
      :type: int



   .. py:method:: to_device(device: arkouda.array_api._typing.Device, /, stream: None = None) -> Array


   .. py:method:: to_ndarray()

      Convert the array to a numpy ndarray

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: tolist()

      Convert the array to a Python list or nested lists

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: transpose(axes: Optional[Tuple[int, Ellipsis]] = None)

      Return a view of the array with the specified axes transposed.

      For axes=None, reverse all the dimensions of the array.



.. py:function:: broadcast_arrays(*arrays: arkouda.array_api.array_object.Array) -> List[arkouda.array_api.array_object.Array]

   Broadcast arrays to a common shape.

   Throws a ValueError if a common shape cannot be determined.


.. py:function:: broadcast_dims(sa: Sequence[int], sb: Sequence[int]) -> Tuple[int, Ellipsis]

   Algorithm to determine shape of broadcasted PD array given two array shapes

   see: https://data-apis.org/array-api/latest/API_specification/broadcasting.html#algorithm


.. py:function:: broadcast_to(x: arkouda.array_api.array_object.Array, /, shape: Tuple[int, Ellipsis]) -> arkouda.array_api.array_object.Array

   Broadcast the array to the specified shape.

   See: https://data-apis.org/array-api/latest/API_specification/broadcasting.html for details.


.. py:function:: concat(arrays: Union[Tuple[arkouda.array_api.array_object.Array, Ellipsis], List[arkouda.array_api.array_object.Array]], /, *, axis: Optional[int] = 0) -> arkouda.array_api.array_object.Array

   Concatenate arrays along an axis.

   :param arrays: The arrays to concatenate. Must have the same shape except along the concatenation axis.
   :type arrays: Tuple[Array, ...] or List[Array]
   :param axis: The axis along which to concatenate the arrays. The default is 0. If None, the arrays are
                flattened before concatenation.
   :type axis: int, optional


.. py:function:: create_pdarray(repMsg: str, max_bits=None) -> pdarray

   Return a pdarray instance pointing to an array created by the arkouda server.
   The user should not call this function directly.

   :param repMsg: space-delimited string containing the pdarray name, datatype, size
                  dimension, shape,and itemsize
   :type repMsg: str

   :returns: A pdarray with the same attributes and data as the pdarray; on GPU
   :rtype: pdarray

   :raises ValueError: If there's an error in parsing the repMsg parameter into the six
       values needed to create the pdarray instance
   :raises RuntimeError: Raised if a server-side error is thrown in the process of creating
       the pdarray instance


.. py:function:: expand_dims(x: arkouda.array_api.array_object.Array, /, *, axis: int) -> arkouda.array_api.array_object.Array

   Create a new array with an additional dimension inserted at the specified axis.

   :param x: The array to expand
   :type x: Array
   :param axis: The axis at which to insert the new (size one) dimension. Must be in the range
                `[-x.ndim-1, x.ndim]`.
   :type axis: int


.. py:function:: flip(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None) -> arkouda.array_api.array_object.Array

   Reverse an array's values along a particular axis or axes.

   :param x: The array to flip
   :type x: Array
   :param axis: The axis or axes along which to flip the array. If None, flip the array along all axes.
   :type axis: int or Tuple[int, ...], optional


.. py:function:: generic_msg(cmd: str, args: Optional[Dict] = None, payload: Optional[memoryview] = None, send_binary: bool = False, recv_binary: bool = False) -> Union[str, memoryview]

   Sends a binary or string message composed of a command and corresponding
   arguments to the arkouda_server, returning the response sent by the server.

   :param cmd: The server-side command to be executed
   :type cmd: str
   :param args: A space-delimited list of command arguments
   :type args: str
   :param payload: The payload when sending binary data
   :type payload: memoryview
   :param send_binary: Indicates if the message to be sent is a string or binary
   :type send_binary: bool
   :param recv_binary: Indicates if the return message will be a string or binary
   :type recv_binary: bool

   :returns: The string or binary return message
   :rtype: Union[str, memoryview]

   :raises KeyboardInterrupt: Raised if the user interrupts during command execution
   :raises RuntimeError: Raised if the client is not connected to the server or if
       there is a server-side error thrown

   .. rubric:: Notes

   If the server response is a string, the string corresponds to a success
   confirmation, warn message, or error message. A memoryview response
   corresponds to an Arkouda array output as a numpy array.


.. py:function:: implements_numpy(numpy_function)

   Register an __array_function__ implementation for MyArray objects.


.. py:function:: moveaxis(x: arkouda.array_api.array_object.Array, source: Union[int, Tuple[int, Ellipsis]], destination: Union[int, Tuple[int, Ellipsis]], /) -> arkouda.array_api.array_object.Array

   Move axes of an array to new positions.

   :param x: The array whose axes are to be reordered
   :type x: Array
   :param source: Original positions of the axes to move. Values must be unique and fall within the range
                  `[-x.ndim, x.ndim)`.
   :type source: int or Tuple[int, ...]
   :param destination: Destination positions for each of the original axes. Must be the same length as `source`.
                       Values must be unique and fall within the range `[-x.ndim, x.ndim)`.
   :type destination: int or Tuple[int, ...]


.. py:function:: permute_dims(x: arkouda.array_api.array_object.Array, /, axes: Tuple[int, Ellipsis]) -> arkouda.array_api.array_object.Array

   Permute the dimensions of an array.

   :param x: The array whose dimensions are to be permuted
   :type x: Array
   :param axes: The new order of the dimensions. Must be a permutation of the integers from 0 to `x.ndim-1`.
   :type axes: Tuple[int, ...]


.. py:function:: repeat(x: arkouda.array_api.array_object.Array, repeats: Union[int, arkouda.array_api.array_object.Array], /, *, axis: Optional[int] = None) -> arkouda.array_api.array_object.Array

   Repeat elements of an array.

   :param x: The array whose values to repeat
   :type x: Array
   :param repeats:
                   The number of repetitions for each element.
                    * If axis is None, must be an integer, or a 1D array of integers with the same size as `x`.
                    * If axis is not None, must be an integer, or a 1D array of integers whose size matches the
                      number of elements along the specified axis.
   :type repeats: int or Array
   :param axis: The axis along which to repeat elements. If None, the array is flattened before repeating.
   :type axis: int, optional


.. py:function:: reshape(x: arkouda.array_api.array_object.Array, /, shape: Tuple[int, Ellipsis], *, copy: Optional[bool] = None) -> arkouda.array_api.array_object.Array

   Reshape an array to a new shape.

   :param x: The array to reshape
   :type x: Array
   :param shape: The new shape for the array. Must have the same number of elements as the original array.
   :type shape: Tuple[int, ...]
   :param copy: Whether to create a copy of the array.
                WARNING: currently always creates a copy, ignoring the value of this parameter.
   :type copy: bool, optional


.. py:function:: roll(x: arkouda.array_api.array_object.Array, /, shift: Union[int, Tuple[int, Ellipsis]], *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None) -> arkouda.array_api.array_object.Array

   Roll the values in an array by the specified shift(s) along the specified axis or axes.
   Elements that roll beyond the last position are re-introduced at the first position.

   :param x: The array to roll
   :type x: Array
   :param shift: The number of positions by which to shift each axis. If `axis` and `shift` are both tuples, they
                 must have the same length and the `i`-th element of `shift` is the number of positions to shift
                 `axis[i]`. If axis is a tuple and shift is an integer, the same shift is applied to each axis.
                 If axis is None, must be an integer or a one-tuple.
   :type shift: int or Tuple[int, ...]
   :param axis: The axis or axes along which to roll the array. If None, the array is flattened before
                rolling.
   :type axis: int or Tuple[int, ...], optional


.. py:function:: scalar_array(value: arkouda.dtypes.numeric_scalars)

   Create a pdarray from a single scalar value.

   :param value: Value to create pdarray from
   :type value: numeric_scalars

   :returns: pdarray with a single element
   :rtype: pdarray


.. py:function:: squeeze(x: arkouda.array_api.array_object.Array, /, axis: Union[int, Tuple[int, Ellipsis]]) -> arkouda.array_api.array_object.Array

   Remove degenerate (size one) dimensions from an array.

   :param x: The array to squeeze
   :type x: Array
   :param axis: The axis or axes to squeeze (must have a size of one).
   :type axis: int or Tuple[int, ...]


.. py:function:: stack(arrays: Union[Tuple[arkouda.array_api.array_object.Array, Ellipsis], List[arkouda.array_api.array_object.Array]], /, *, axis: int = 0) -> arkouda.array_api.array_object.Array

   Stack arrays along a new axis.

   The resulting array will have one more dimension than the input arrays with a size
   equal to the number of input arrays.

   :param arrays: The arrays to stack. Must have the same shape.
   :type arrays: Tuple[Array, ...] or List[Array]
   :param axis: The axis along which to stack the arrays. Must be in the range `[-N, N)`, where N is the number
                of dimensions in the input arrays. The default is 0.
   :type axis: int, optional


.. py:function:: tile(x: arkouda.array_api.array_object.Array, repetitions: Tuple[int, Ellipsis], /) -> arkouda.array_api.array_object.Array

   Tile an array with the specified number of repetitions along each dimension.

   :param x: The array to tile
   :type x: Array
   :param repetitions: The number of repetitions along each dimension. If there are more repetitions than array
                       dimensions, singleton dimensions are prepended to the array to make it match the number of
                       repetitions. If there are more array dimensions than repetitions, ones are prepended to the
                       repetitions tuple to make it's length match the number of array dimensions.
   :type repetitions: Tuple[int, ...]


.. py:function:: unstack(x: arkouda.array_api.array_object.Array, /, *, axis: int = 0) -> Tuple[arkouda.array_api.array_object.Array, Ellipsis]

   Decompose an array along an axis into multiple arrays of the same shape.

   :param x: The array to unstack
   :type x: Array
   :param axis: The axis along which to unstack the array. The default is 0.
   :type axis: int, optional


