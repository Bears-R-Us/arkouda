arkouda.array_api.utility_functions
===================================

.. py:module:: arkouda.array_api.utility_functions


Classes
-------

.. autoapisummary::

   arkouda.array_api.utility_functions.Array


Functions
---------

.. autoapisummary::

   arkouda.array_api.utility_functions.all
   arkouda.array_api.utility_functions.any
   arkouda.array_api.utility_functions.clip
   arkouda.array_api.utility_functions.concat
   arkouda.array_api.utility_functions.create_pdarray
   arkouda.array_api.utility_functions.diff
   arkouda.array_api.utility_functions.generic_msg
   arkouda.array_api.utility_functions.pad
   arkouda.array_api.utility_functions.scalar_array


Module Contents
---------------

.. py:class:: Array

   n-d array object for the array API namespace.

   See the docstring of :py:obj:`np.ndarray <numpy.ndarray>` for more
   information.

   This is a wrapper around numpy.ndarray that restricts the usage to only
   those things that are required by the array API namespace. Note,
   attributes on this object that start with a single underscore are not part
   of the API specification and should only be used internally. This object
   should not be constructed directly. Rather, use one of the creation
   functions, such as asarray().



   .. py:property:: T
      :type: Array



   .. py:method:: chunk_info(/) -> List[List[int]]

      Get a list of indices indicating how the array is chunked across
      Locales (compute nodes). Although Arkouda arrays don't have a notion
      of chunking, like Dask arrays for example, it can be useful to know
      how the array is distributed across locales in order to write/read
      data to/from a chunked format like Zarr.

      Returns a nested list of integers, where the outer list corresponds to
      dimensions, and the inner lists correspond to locales. The value at [d][l]
      is the global array index where locale l's local subdomain along the
      d-th dimension begins.

      For example, calling this function on a 100x40 2D array stored across 4
      locales could return: [[0, 50], [0, 20]], indicating that the 4 "chunks"
      start at indices 0 and 50 in the first dimension, and 0 and 20 in the
      second dimension.



   .. py:property:: device
      :type: arkouda.array_api._typing.Device



   .. py:property:: dtype
      :type: arkouda.array_api._typing.Dtype



   .. py:method:: item()

      Get the scalar value from a 0-dimensional array.

      Raises a ValueError if the array has more than one element.



   .. py:property:: mT
      :type: Array



   .. py:property:: ndim
      :type: int



   .. py:property:: shape
      :type: Tuple[int, Ellipsis]



   .. py:property:: size
      :type: int



   .. py:method:: to_device(device: arkouda.array_api._typing.Device, /, stream: None = None) -> Array


   .. py:method:: to_ndarray()

      Convert the array to a numpy ndarray

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: tolist()

      Convert the array to a Python list or nested lists

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: transpose(axes: Optional[Tuple[int, Ellipsis]] = None)

      Return a view of the array with the specified axes transposed.

      For axes=None, reverse all the dimensions of the array.



.. py:function:: all(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Check whether all elements of an array evaluate to True along a given axis.

   :param x: The array to check for all True values
   :type x: Array
   :param axis: The axis or axes along which to check for all True values. If None, check all elements.
   :type axis: int or Tuple[int], optional
   :param keepdims: Whether to keep the singleton dimensions along `axis` in the result.
   :type keepdims: bool, optional


.. py:function:: any(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Check whether any elements of an array evaluate to True along a given axis.

   :param x: The array to check for any True values
   :type x: Array
   :param axis: The axis or axes along which to check for any True values. If None, check all elements.
   :type axis: int or Tuple[int], optional
   :param keepdims: Whether to keep the singleton dimensions along `axis` in the result.
   :type keepdims: bool, optional


.. py:function:: clip(a: arkouda.array_api.array_object.Array, a_min, a_max, /) -> arkouda.array_api.array_object.Array

   Clip (limit) the values in an array to a given range.

   :param a: The array to clip
   :type a: Array
   :param a_min: The minimum value
   :type a_min: scalar
   :param a_max: The maximum value
   :type a_max: scalar


.. py:function:: concat(arrays: Union[Tuple[arkouda.array_api.array_object.Array, Ellipsis], List[arkouda.array_api.array_object.Array]], /, *, axis: Optional[int] = 0) -> arkouda.array_api.array_object.Array

   Concatenate arrays along an axis.

   :param arrays: The arrays to concatenate. Must have the same shape except along the concatenation axis.
   :type arrays: Tuple[Array, ...] or List[Array]
   :param axis: The axis along which to concatenate the arrays. The default is 0. If None, the arrays are
                flattened before concatenation.
   :type axis: int, optional


.. py:function:: create_pdarray(repMsg: str, max_bits=None) -> pdarray

   Return a pdarray instance pointing to an array created by the arkouda server.
   The user should not call this function directly.

   :param repMsg: space-delimited string containing the pdarray name, datatype, size
                  dimension, shape,and itemsize
   :type repMsg: str

   :returns: A pdarray with the same attributes and data as the pdarray; on GPU
   :rtype: pdarray

   :raises ValueError: If there's an error in parsing the repMsg parameter into the six
       values needed to create the pdarray instance
   :raises RuntimeError: Raised if a server-side error is thrown in the process of creating
       the pdarray instance


.. py:function:: diff(a: arkouda.array_api.array_object.Array, /, n: int = 1, axis: int = -1, prepend=None, append=None) -> arkouda.array_api.array_object.Array

   Calculate the n-th discrete difference along the given axis.

   :param a: The array to calculate the difference
   :type a: Array
   :param n: The order of the finite difference. Default is 1.
   :type n: int, optional
   :param axis: The axis along which to calculate the difference. Default is the last axis.
   :type axis: int, optional
   :param prepend: Array to prepend to `a` along `axis` before calculating the difference.
   :type prepend: Array, optional
   :param append: Array to append to `a` along `axis` before calculating the difference.
   :type append: Array, optional


.. py:function:: generic_msg(cmd: str, args: Optional[Dict] = None, payload: Optional[memoryview] = None, send_binary: bool = False, recv_binary: bool = False) -> Union[str, memoryview]

   Sends a binary or string message composed of a command and corresponding
   arguments to the arkouda_server, returning the response sent by the server.

   :param cmd: The server-side command to be executed
   :type cmd: str
   :param args: A space-delimited list of command arguments
   :type args: str
   :param payload: The payload when sending binary data
   :type payload: memoryview
   :param send_binary: Indicates if the message to be sent is a string or binary
   :type send_binary: bool
   :param recv_binary: Indicates if the return message will be a string or binary
   :type recv_binary: bool

   :returns: The string or binary return message
   :rtype: Union[str, memoryview]

   :raises KeyboardInterrupt: Raised if the user interrupts during command execution
   :raises RuntimeError: Raised if the client is not connected to the server or if
       there is a server-side error thrown

   .. rubric:: Notes

   If the server response is a string, the string corresponds to a success
   confirmation, warn message, or error message. A memoryview response
   corresponds to an Arkouda array output as a numpy array.


.. py:function:: pad(array: arkouda.array_api.array_object.Array, pad_width, mode='constant', **kwargs) -> arkouda.array_api.array_object.Array

   Pad an array.

   :param array: The array to pad
   :type array: Array
   :param pad_width: Number of values padded to the edges of each axis. If a single int, the same value is used for
                     all axes. If a tuple of two ints, those values are used for all axes. If a tuple of tuples, each
                     inner tuple specifies the number of values padded to the beginning and end of each axis.
   :type pad_width: int or Tuple[int, int] or Tuple[Tuple[int, int], ...]
   :param mode: Padding mode. Only 'constant' is currently supported. Use the `constant_values` keyword argument
                to specify the padding value or values (in the same format as `pad_width`).
   :type mode: str, optional


.. py:function:: scalar_array(value: arkouda.dtypes.numeric_scalars)

   Create a pdarray from a single scalar value.

   :param value: Value to create pdarray from
   :type value: numeric_scalars

   :returns: pdarray with a single element
   :rtype: pdarray


