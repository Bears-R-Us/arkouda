arkouda.array_api.sorting_functions
===================================

.. py:module:: arkouda.array_api.sorting_functions


Classes
-------

.. autoapisummary::

   arkouda.array_api.sorting_functions.Array


Functions
---------

.. autoapisummary::

   arkouda.array_api.sorting_functions.argsort
   arkouda.array_api.sorting_functions.flip
   arkouda.array_api.sorting_functions.sort


Module Contents
---------------

.. py:class:: Array

   n-d array object for the array API namespace.

   See the docstring of :py:obj:`np.ndarray <numpy.ndarray>` for more
   information.

   This is a wrapper around numpy.ndarray that restricts the usage to only
   those things that are required by the array API namespace. Note,
   attributes on this object that start with a single underscore are not part
   of the API specification and should only be used internally. This object
   should not be constructed directly. Rather, use one of the creation
   functions, such as asarray().



   .. py:property:: T
      :type: Array



   .. py:method:: chunk_info(/) -> List[List[int]]

      Get a list of indices indicating how the array is chunked across
      Locales (compute nodes). Although Arkouda arrays don't have a notion
      of chunking, like Dask arrays for example, it can be useful to know
      how the array is distributed across locales in order to write/read
      data to/from a chunked format like Zarr.

      Returns a nested list of integers, where the outer list corresponds to
      dimensions, and the inner lists correspond to locales. The value at [d][l]
      is the global array index where locale l's local subdomain along the
      d-th dimension begins.

      For example, calling this function on a 100x40 2D array stored across 4
      locales could return: [[0, 50], [0, 20]], indicating that the 4 "chunks"
      start at indices 0 and 50 in the first dimension, and 0 and 20 in the
      second dimension.



   .. py:property:: device
      :type: arkouda.array_api._typing.Device



   .. py:property:: dtype
      :type: arkouda.array_api._typing.Dtype



   .. py:method:: item()

      Get the scalar value from a 0-dimensional array.

      Raises a ValueError if the array has more than one element.



   .. py:property:: mT
      :type: Array



   .. py:property:: ndim
      :type: int



   .. py:property:: shape
      :type: Tuple[int, Ellipsis]



   .. py:property:: size
      :type: int



   .. py:method:: to_device(device: arkouda.array_api._typing.Device, /, stream: None = None) -> Array


   .. py:method:: to_ndarray()

      Convert the array to a numpy ndarray

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: tolist()

      Convert the array to a Python list or nested lists

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: transpose(axes: Optional[Tuple[int, Ellipsis]] = None)

      Return a view of the array with the specified axes transposed.

      For axes=None, reverse all the dimensions of the array.



.. py:function:: argsort(x: arkouda.array_api.array_object.Array, /, *, axis: int = -1, descending: bool = False, stable: bool = True) -> arkouda.array_api.array_object.Array

   Return the indices that sort an array along a specified axis.

   :param x: The array to sort
   :type x: Array
   :param axis: The axis along which to sort.
   :type axis: int, optional
   :param descending: Whether to sort in descending order.
   :type descending: bool, optional
   :param stable: Whether to use a stable sorting algorithm. Note: arkouda's sorting algorithm is always stable so
                  this argument is ignored.
   :type stable: bool, optional


.. py:function:: flip(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None) -> arkouda.array_api.array_object.Array

   Reverse an array's values along a particular axis or axes.

   :param x: The array to flip
   :type x: Array
   :param axis: The axis or axes along which to flip the array. If None, flip the array along all axes.
   :type axis: int or Tuple[int, ...], optional


.. py:function:: sort(x: arkouda.array_api.array_object.Array, /, *, axis: int = -1, descending: bool = False, stable: bool = True) -> arkouda.array_api.array_object.Array

   Return a sorted copy of an array along a specified axis.

   :param x: The array to sort
   :type x: Array
   :param axis: The axis along which to sort.
   :type axis: int, optional
   :param descending: Whether to sort in descending order.
   :type descending: bool, optional
   :param stable: Whether to use a stable sorting algorithm. Note: arkouda's sorting algorithm is always stable so
                  this argument is ignored.
   :type stable: bool, optional


