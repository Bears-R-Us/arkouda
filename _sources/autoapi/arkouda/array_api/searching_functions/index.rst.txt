arkouda.array_api.searching_functions
=====================================

.. py:module:: arkouda.array_api.searching_functions


Functions
---------

.. autoapisummary::

   arkouda.array_api.searching_functions.argmax
   arkouda.array_api.searching_functions.argmin
   arkouda.array_api.searching_functions.nonzero
   arkouda.array_api.searching_functions.searchsorted
   arkouda.array_api.searching_functions.where


Module Contents
---------------

.. py:function:: argmax(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[int] = None, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Return an array with the indices of the maximum values along a given axis.

   :param x: The array to search for maximum values
   :type x: Array
   :param axis: The axis along which to search for maximum values. If None, the array is flattened before
                searching.
   :type axis: int, optional
   :param keepdims: Whether to keep the singleton dimension along `axis` in the result.
   :type keepdims: bool, optional


.. py:function:: argmin(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[int] = None, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Return an array with the indices of the minimum values along a given axis.

   :param x: The array to search for minimum values
   :type x: Array
   :param axis: The axis along which to search for minimum values. If None, the array is flattened before
                searching.
   :type axis: int, optional
   :param keepdims: Whether to keep the singleton dimension along `axis` in the result.
   :type keepdims: bool, optional


.. py:function:: nonzero(x: arkouda.array_api.array_object.Array, /) -> Tuple[arkouda.array_api.array_object.Array, Ellipsis]

   Return a tuple of arrays containing the indices of the non-zero elements of the input array.


.. py:function:: searchsorted(x1: arkouda.array_api.array_object.Array, x2: arkouda.array_api.array_object.Array, /, *, side: Literal['left', 'right'] = 'left', x2_sorted: bool = False, sorter: Optional[arkouda.array_api.array_object.Array] = None) -> arkouda.array_api.array_object.Array

   Given a sorted array `x1`, find the indices to insert elements from another array `x2` such that
   the sorted order is maintained.

   :param x1: The sorted array to search in.
   :type x1: Array
   :param x2: The values to search for in `x1`.
   :type x2: Array
   :param side: If 'left', the index of the first suitable location found is given. If 'right', return the
                last such index. Default is 'left'.
   :type side: {'left', 'right'}, optional
   :param sorter: The indices that would sort `x1` in ascending order. If None, `x1` is assumed to be sorted.
   :type sorter: Array, optional
   :param x2_sorted: If True, assumes that `x2` is already sorted in ascending order. This can improve performance
                     for large, sorted search arrays. If False, no assumption is made about the order of `x2`.
   :type x2_sorted: bool, default=False


.. py:function:: where(condition: arkouda.array_api.array_object.Array, x1: arkouda.array_api.array_object.Array, x2: arkouda.array_api.array_object.Array, /) -> arkouda.array_api.array_object.Array

   Return elements, either from `x1` or `x2`, depending on `condition`.

   :param condition: When condition[i] is True, store x1[i] in the output array, otherwise store x2[i].
   :type condition: Array
   :param x1: Values selected at indices where `condition` is True.
   :type x1: Array
   :param x2: Values selected at indices where `condition` is False.
   :type x2: Array


