arkouda.array_api.searching_functions
=====================================

.. py:module:: arkouda.array_api.searching_functions


Classes
-------

.. autoapisummary::

   arkouda.array_api.searching_functions.Array


Functions
---------

.. autoapisummary::

   arkouda.array_api.searching_functions.akcast
   arkouda.array_api.searching_functions.argmax
   arkouda.array_api.searching_functions.argmin
   arkouda.array_api.searching_functions.broadcast_arrays
   arkouda.array_api.searching_functions.create_pdarray
   arkouda.array_api.searching_functions.generic_msg
   arkouda.array_api.searching_functions.nonzero
   arkouda.array_api.searching_functions.parse_single_value
   arkouda.array_api.searching_functions.reshape
   arkouda.array_api.searching_functions.scalar_array
   arkouda.array_api.searching_functions.searchsorted
   arkouda.array_api.searching_functions.squeeze
   arkouda.array_api.searching_functions.where


Module Contents
---------------

.. py:class:: Array

   n-d array object for the array API namespace.

   See the docstring of :py:obj:`np.ndarray <numpy.ndarray>` for more
   information.

   This is a wrapper around numpy.ndarray that restricts the usage to only
   those things that are required by the array API namespace. Note,
   attributes on this object that start with a single underscore are not part
   of the API specification and should only be used internally. This object
   should not be constructed directly. Rather, use one of the creation
   functions, such as asarray().



   .. py:property:: T
      :type: Array



   .. py:method:: chunk_info(/) -> List[List[int]]

      Get a list of indices indicating how the array is chunked across
      Locales (compute nodes). Although Arkouda arrays don't have a notion
      of chunking, like Dask arrays for example, it can be useful to know
      how the array is distributed across locales in order to write/read
      data to/from a chunked format like Zarr.

      Returns a nested list of integers, where the outer list corresponds to
      dimensions, and the inner lists correspond to locales. The value at [d][l]
      is the global array index where locale l's local subdomain along the
      d-th dimension begins.

      For example, calling this function on a 100x40 2D array stored across 4
      locales could return: [[0, 50], [0, 20]], indicating that the 4 "chunks"
      start at indices 0 and 50 in the first dimension, and 0 and 20 in the
      second dimension.



   .. py:property:: device
      :type: arkouda.array_api._typing.Device



   .. py:property:: dtype
      :type: arkouda.array_api._typing.Dtype



   .. py:method:: item()

      Get the scalar value from a 0-dimensional array.

      Raises a ValueError if the array has more than one element.



   .. py:property:: mT
      :type: Array



   .. py:property:: ndim
      :type: int



   .. py:property:: shape
      :type: Tuple[int, Ellipsis]



   .. py:property:: size
      :type: int



   .. py:method:: to_device(device: arkouda.array_api._typing.Device, /, stream: None = None) -> Array


   .. py:method:: to_ndarray()

      Convert the array to a numpy ndarray

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: tolist()

      Convert the array to a Python list or nested lists

      This involves copying the data from the server to the client, and thus
      will fail if the array is too large (see:
      :func:`~arkouda.client.maxTransferBytes`)



   .. py:method:: transpose(axes: Optional[Tuple[int, Ellipsis]] = None)

      Return a view of the array with the specified axes transposed.

      For axes=None, reverse all the dimensions of the array.



.. py:function:: akcast(pda: Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings, arkouda.categorical.Categorical], dt: Union[numpy.dtype, type, str, arkouda.dtypes.BigInt], errors: ErrorMode = ErrorMode.strict) -> Union[Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings, arkouda.categorical.Categorical], Tuple[arkouda.pdarrayclass.pdarray, arkouda.pdarrayclass.pdarray]]

   Cast an array to another dtype.

   :param pda: The array of values to cast
   :type pda: pdarray or Strings
   :param dt: The target dtype to cast values to
   :type dt: np.dtype, type, or str
   :param errors: Controls how errors are handled when casting strings to a numeric type
                  (ignored for casts from numeric types).
                      - strict: raise RuntimeError if *any* string cannot be converted
                      - ignore: never raise an error. Uninterpretable strings get
                          converted to NaN (float64), -2**63 (int64), zero (uint64 and
                          uint8), or False (bool)
                      - return_validity: in addition to returning the same output as
                        "ignore", also return a bool array indicating where the cast
                        was successful.
   :type errors: {strict, ignore, return_validity}

   :returns: * *pdarray or Strings* -- Array of values cast to desired dtype
             * **[validity** (*pdarray(bool)]*) -- If errors="return_validity" and input is Strings, a second array is
               returned with True where the cast succeeded and False where it failed.

   .. rubric:: Notes

   The cast is performed according to Chapel's casting rules and is NOT safe
   from overflows or underflows. The user must ensure that the target dtype
   has the precision and capacity to hold the desired result.

   .. rubric:: Examples

   >>> ak.cast(ak.linspace(1.0,5.0,5), dt=ak.int64)
   array([1, 2, 3, 4, 5])

   >>> ak.cast(ak.arange(0,5), dt=ak.float64).dtype
   dtype('float64')

   >>> ak.cast(ak.arange(0,5), dt=ak.bool)
   array([False, True, True, True, True])

   >>> ak.cast(ak.linspace(0,4,5), dt=ak.bool)
   array([False, True, True, True, True])


.. py:function:: argmax(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[int] = None, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Returns an array with the indices of the maximum values along a given axis.

   :param x: The array to search for maximum values
   :type x: Array
   :param axis: The axis along which to search for maximum values. If None, the array is flattened before
                searching.
   :type axis: int, optional
   :param keepdims: Whether to keep the singleton dimension along `axis` in the result.
   :type keepdims: bool, optional


.. py:function:: argmin(x: arkouda.array_api.array_object.Array, /, *, axis: Optional[int] = None, keepdims: bool = False) -> arkouda.array_api.array_object.Array

   Returns an array with the indices of the minimum values along a given axis.

   :param x: The array to search for minimum values
   :type x: Array
   :param axis: The axis along which to search for minimum values. If None, the array is flattened before
                searching.
   :type axis: int, optional
   :param keepdims: Whether to keep the singleton dimension along `axis` in the result.
   :type keepdims: bool, optional


.. py:function:: broadcast_arrays(*arrays: arkouda.array_api.array_object.Array) -> List[arkouda.array_api.array_object.Array]

   Broadcast arrays to a common shape.

   Throws a ValueError if a common shape cannot be determined.


.. py:function:: create_pdarray(repMsg: str, max_bits=None) -> pdarray

   Return a pdarray instance pointing to an array created by the arkouda server.
   The user should not call this function directly.

   :param repMsg: space-delimited string containing the pdarray name, datatype, size
                  dimension, shape,and itemsize
   :type repMsg: str

   :returns: A pdarray with the same attributes and data as the pdarray; on GPU
   :rtype: pdarray

   :raises ValueError: If there's an error in parsing the repMsg parameter into the six
       values needed to create the pdarray instance
   :raises RuntimeError: Raised if a server-side error is thrown in the process of creating
       the pdarray instance


.. py:function:: generic_msg(cmd: str, args: Optional[Dict] = None, payload: Optional[memoryview] = None, send_binary: bool = False, recv_binary: bool = False) -> Union[str, memoryview]

   Sends a binary or string message composed of a command and corresponding
   arguments to the arkouda_server, returning the response sent by the server.

   :param cmd: The server-side command to be executed
   :type cmd: str
   :param args: A space-delimited list of command arguments
   :type args: str
   :param payload: The payload when sending binary data
   :type payload: memoryview
   :param send_binary: Indicates if the message to be sent is a string or binary
   :type send_binary: bool
   :param recv_binary: Indicates if the return message will be a string or binary
   :type recv_binary: bool

   :returns: The string or binary return message
   :rtype: Union[str, memoryview]

   :raises KeyboardInterrupt: Raised if the user interrupts during command execution
   :raises RuntimeError: Raised if the client is not connected to the server or if
       there is a server-side error thrown

   .. rubric:: Notes

   If the server response is a string, the string corresponds to a success
   confirmation, warn message, or error message. A memoryview response
   corresponds to an Arkouda array output as a numpy array.


.. py:function:: nonzero(x: arkouda.array_api.array_object.Array, /) -> Tuple[arkouda.array_api.array_object.Array, Ellipsis]

   Returns a tuple of arrays containing the indices of the non-zero elements of the input array.


.. py:function:: parse_single_value(msg: str) -> object

   Attempt to convert a scalar return value from the arkouda server to a
   numpy scalar in Python. The user should not call this function directly.

   :param msg: scalar value in string form to be converted to a numpy scalar
   :type msg: str

   :rtype: object numpy scalar


.. py:function:: reshape(x: arkouda.array_api.array_object.Array, /, shape: Tuple[int, Ellipsis], *, copy: Optional[bool] = None) -> arkouda.array_api.array_object.Array

   Reshape an array to a new shape.

   :param x: The array to reshape
   :type x: Array
   :param shape: The new shape for the array. Must have the same number of elements as the original array.
   :type shape: Tuple[int, ...]
   :param copy: Whether to create a copy of the array.
                WARNING: currently always creates a copy, ignoring the value of this parameter.
   :type copy: bool, optional


.. py:function:: scalar_array(value: arkouda.dtypes.numeric_scalars)

   Create a pdarray from a single scalar value.

   :param value: Value to create pdarray from
   :type value: numeric_scalars

   :returns: pdarray with a single element
   :rtype: pdarray


.. py:function:: searchsorted(x1: arkouda.array_api.array_object.Array, x2: arkouda.array_api.array_object.Array, /, *, side: Literal['left', 'right'] = 'left', sorter: Optional[arkouda.array_api.array_object.Array] = None) -> arkouda.array_api.array_object.Array

   Given a sorted array `x1`, find the indices to insert elements from another array `x2` such that
   the sorted order is maintained.

   :param x1: The sorted array to search in.
   :type x1: Array
   :param x2: The values to search for in `x1`.
   :type x2: Array
   :param side: If 'left', the index of the first suitable location found is given. If 'right', return the
                last such index. Default is 'left'.
   :type side: {'left', 'right'}, optional
   :param sorter: The indices that would sort `x1` in ascending order. If None, `x1` is assumed to be sorted.
   :type sorter: Array, optional


.. py:function:: squeeze(x: arkouda.array_api.array_object.Array, /, axis: Union[int, Tuple[int, Ellipsis]]) -> arkouda.array_api.array_object.Array

   Remove degenerate (size one) dimensions from an array.

   :param x: The array to squeeze
   :type x: Array
   :param axis: The axis or axes to squeeze (must have a size of one).
   :type axis: int or Tuple[int, ...]


.. py:function:: where(condition: arkouda.array_api.array_object.Array, x1: arkouda.array_api.array_object.Array, x2: arkouda.array_api.array_object.Array, /) -> arkouda.array_api.array_object.Array

   Return elements, either from `x1` or `x2`, depending on `condition`.

   :param condition: When condition[i] is True, store x1[i] in the output array, otherwise store x2[i].
   :type condition: Array
   :param x1: Values selected at indices where `condition` is True.
   :type x1: Array
   :param x2: Values selected at indices where `condition` is False.
   :type x2: Array


