.. default-domain:: chpl

.. module:: SparseMatrix

SparseMatrix
============
**Usage**

.. code-block:: chapel

   use SparseMatrix;


or

.. code-block:: chapel

   import SparseMatrix;

**Submodules**

.. toctree::
   :maxdepth: 1
   :glob:

   SparseMatrix/*

.. function:: proc fillSparseMatrix(ref spsMat, const A: [?D] ?eltType) throws

.. function:: proc sparseMatToPdarrayCSR(const ref spsMat, ref rows, ref cols, ref vals)

   
   Fill the rows, cols, and vals arrays with the non-zero indices and values
   from the sparse matrix in row-major order.
   

.. function:: proc sparseMatToPdarrayCSC(const ref spsMat, ref rows, ref cols, ref vals)

   
   Fill the rows, cols, and vals arrays with the non-zero indices and values
   from the sparse matrix in col-major order.
   

.. function:: proc flattenedExScanCSR(in nnzPerColBlock: [?d] int, nRowGroups: int, nTasksPerRowBlock: int, nRowsPerGroup: int)

.. function:: proc flattenedExScanCSC(in nnzPerRowBlock: [?d] int, nColGroups: int, nTasksPerColBlock: int, nColsPerGroup: int)

.. function:: proc sparseMatMatMult(A, B, ref spsData)

.. function:: proc sparseMatMatMult(A, B) where !A.chpl_isNonDistributedArray() && !B.chpl_isNonDistributedArray()

.. function:: proc denseMatMatMult(A, B)

.. function:: proc randSparseMatrix(size, density, param layout, param distributed = false, type eltType)

