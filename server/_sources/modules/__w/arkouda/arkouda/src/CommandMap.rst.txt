.. default-domain:: chpl

.. module:: CommandMap

CommandMap
==========
**Usage**

.. code-block:: chapel

   use CommandMap;


or

.. code-block:: chapel

   import CommandMap;

.. function:: proc akMsgSign(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws

   *
   * This is a dummy function to get the signature of the Arkouda
   * server FCF. Ideally, the `func()` function would be able to
   * construct the FCF type, but there is no way to generate a
   * FCF that throws using `func()` today.
   

.. data:: var commandMap: map(string, f.type)

.. data:: var moduleMap: map(string, (string, int))

.. data:: var usedModules: set(string)

.. function:: proc registerFunction(cmd: string, fcf: f.type, modName: string = "", line: int = -1)

   *
   * Register command->function in the CommandMap
   * This binds a server command to its corresponding function matching the standard
   * function signature & MsgTuple return type
   

.. function:: proc writeUsedModulesJson(ref mods: set(string))

.. function:: proc writeUsedModules(fmt: string = "cfg")

.. function:: proc dumpCommandMap(): string throws

   *
   * Dump the combined contents of the command maps as a single json encoded string
   

.. function:: proc executeCommand(cmd: string, msgArgs, st): MsgTuple throws

