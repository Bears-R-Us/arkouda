Search.setIndex({"docnames": ["index", "modules/__w/arkouda/arkouda/src/AryUtil", "modules/__w/arkouda/arkouda/src/BigIntMsg", "modules/__w/arkouda/arkouda/src/Cast", "modules/__w/arkouda/arkouda/src/CommAggregation", "modules/__w/arkouda/arkouda/src/CommAggregation/BigIntegerAggregation", "modules/__w/arkouda/arkouda/src/CommPrimitives", "modules/__w/arkouda/arkouda/src/CommandMap", "modules/__w/arkouda/arkouda/src/DynamicSort", "modules/__w/arkouda/arkouda/src/ExternalIntegration", "modules/__w/arkouda/arkouda/src/FileIO", "modules/__w/arkouda/arkouda/src/GenSymIO", "modules/__w/arkouda/arkouda/src/IOUtils", "modules/__w/arkouda/arkouda/src/In1d", "modules/__w/arkouda/arkouda/src/Logging", "modules/__w/arkouda/arkouda/src/MemoryMgmt", "modules/__w/arkouda/arkouda/src/Message", "modules/__w/arkouda/arkouda/src/MetricsMsg", "modules/__w/arkouda/arkouda/src/MsgProcessing", "modules/__w/arkouda/arkouda/src/MultiTypeRegEntry", "modules/__w/arkouda/arkouda/src/MultiTypeSymEntry", "modules/__w/arkouda/arkouda/src/MultiTypeSymbolTable", "modules/__w/arkouda/arkouda/src/NumPyDType", "modules/__w/arkouda/arkouda/src/NumericUnicodes", "modules/__w/arkouda/arkouda/src/RadixSortLSD", "modules/__w/arkouda/arkouda/src/Registry", "modules/__w/arkouda/arkouda/src/Security", "modules/__w/arkouda/arkouda/src/SegStringSort", "modules/__w/arkouda/arkouda/src/SegmentedComputation", "modules/__w/arkouda/arkouda/src/SegmentedString", "modules/__w/arkouda/arkouda/src/ServerConfig", "modules/__w/arkouda/arkouda/src/ServerDaemon", "modules/__w/arkouda/arkouda/src/ServerErrorStrings", "modules/__w/arkouda/arkouda/src/ServerErrors", "modules/__w/arkouda/arkouda/src/SipHash", "modules/__w/arkouda/arkouda/src/SparseMatrix", "modules/__w/arkouda/arkouda/src/SparseMatrix/SpsMatUtil", "modules/__w/arkouda/arkouda/src/StatusMsg", "modules/__w/arkouda/arkouda/src/SymArrayDmap", "modules/__w/arkouda/arkouda/src/Unique", "modules/__w/arkouda/arkouda/src/arkouda_server", "modules/__w/arkouda/arkouda/src/compat/eq-22/ArkoudaJSONCompat", "modules/__w/arkouda/arkouda/src/compat/eq-22/ArkoudaPythonCompat", "modules/__w/arkouda/arkouda/src/compat/eq-22/ArkoudaSortCompat", "modules/__w/arkouda/arkouda/src/compat/eq-22/ArkoudaSparseMatrixCompat", "modules/__w/arkouda/arkouda/src/compat/eq-22/ArkoudaTimeCompat", "modules/__w/arkouda/arkouda/src/registry/RegistrationConfig"], "filenames": ["index.rst", "modules/__w/arkouda/arkouda/src/AryUtil.rst", "modules/__w/arkouda/arkouda/src/BigIntMsg.rst", "modules/__w/arkouda/arkouda/src/Cast.rst", "modules/__w/arkouda/arkouda/src/CommAggregation.rst", "modules/__w/arkouda/arkouda/src/CommAggregation/BigIntegerAggregation.rst", "modules/__w/arkouda/arkouda/src/CommPrimitives.rst", "modules/__w/arkouda/arkouda/src/CommandMap.rst", "modules/__w/arkouda/arkouda/src/DynamicSort.rst", "modules/__w/arkouda/arkouda/src/ExternalIntegration.rst", "modules/__w/arkouda/arkouda/src/FileIO.rst", "modules/__w/arkouda/arkouda/src/GenSymIO.rst", "modules/__w/arkouda/arkouda/src/IOUtils.rst", "modules/__w/arkouda/arkouda/src/In1d.rst", "modules/__w/arkouda/arkouda/src/Logging.rst", "modules/__w/arkouda/arkouda/src/MemoryMgmt.rst", "modules/__w/arkouda/arkouda/src/Message.rst", "modules/__w/arkouda/arkouda/src/MetricsMsg.rst", "modules/__w/arkouda/arkouda/src/MsgProcessing.rst", "modules/__w/arkouda/arkouda/src/MultiTypeRegEntry.rst", "modules/__w/arkouda/arkouda/src/MultiTypeSymEntry.rst", "modules/__w/arkouda/arkouda/src/MultiTypeSymbolTable.rst", "modules/__w/arkouda/arkouda/src/NumPyDType.rst", "modules/__w/arkouda/arkouda/src/NumericUnicodes.rst", "modules/__w/arkouda/arkouda/src/RadixSortLSD.rst", "modules/__w/arkouda/arkouda/src/Registry.rst", "modules/__w/arkouda/arkouda/src/Security.rst", "modules/__w/arkouda/arkouda/src/SegStringSort.rst", "modules/__w/arkouda/arkouda/src/SegmentedComputation.rst", "modules/__w/arkouda/arkouda/src/SegmentedString.rst", "modules/__w/arkouda/arkouda/src/ServerConfig.rst", "modules/__w/arkouda/arkouda/src/ServerDaemon.rst", "modules/__w/arkouda/arkouda/src/ServerErrorStrings.rst", "modules/__w/arkouda/arkouda/src/ServerErrors.rst", "modules/__w/arkouda/arkouda/src/SipHash.rst", "modules/__w/arkouda/arkouda/src/SparseMatrix.rst", "modules/__w/arkouda/arkouda/src/SparseMatrix/SpsMatUtil.rst", "modules/__w/arkouda/arkouda/src/StatusMsg.rst", "modules/__w/arkouda/arkouda/src/SymArrayDmap.rst", "modules/__w/arkouda/arkouda/src/Unique.rst", "modules/__w/arkouda/arkouda/src/arkouda_server.rst", "modules/__w/arkouda/arkouda/src/compat/eq-22/ArkoudaJSONCompat.rst", "modules/__w/arkouda/arkouda/src/compat/eq-22/ArkoudaPythonCompat.rst", "modules/__w/arkouda/arkouda/src/compat/eq-22/ArkoudaSortCompat.rst", "modules/__w/arkouda/arkouda/src/compat/eq-22/ArkoudaSparseMatrixCompat.rst", "modules/__w/arkouda/arkouda/src/compat/eq-22/ArkoudaTimeCompat.rst", "modules/__w/arkouda/arkouda/src/registry/RegistrationConfig.rst"], "titles": ["chpldoc documentation", "AryUtil", "BigIntMsg", "Cast", "CommAggregation", "BigIntegerAggregation", "CommPrimitives", "CommandMap", "DynamicSort", "ExternalIntegration", "FileIO", "GenSymIO", "IOUtils", "In1d", "Logging", "MemoryMgmt", "Message", "MetricsMsg", "MsgProcessing", "MultiTypeRegEntry", "MultiTypeSymEntry", "MultiTypeSymbolTable", "NumPyDType", "NumericUnicodes", "RadixSortLSD", "Registry", "Security", "SegStringSort", "SegmentedComputation", "SegmentedString", "ServerConfig", "ServerDaemon", "ServerErrorStrings", "ServerErrors", "SipHash", "SparseMatrix", "SpsMatUtil", "StatusMsg", "SymArrayDmap", "Unique", "arkouda_server", "ArkoudaJSONCompat", "ArkoudaPythonCompat", "ArkoudaSortCompat", "ArkoudaSparseMatrixCompat", "ArkoudaTimeCompat", "RegistrationConfig"], "terms": {"content": [0, 1, 7, 46], "aryutil": 0, "bigintmsg": 0, "cast": [0, 11, 20], "commaggreg": [0, 5], "bigintegeraggreg": [0, 4], "commprimit": 0, "commandmap": [0, 18, 31], "dynamicsort": 0, "externalintegr": 0, "fileio": 0, "gensymio": 0, "ioutil": 0, "in1d": [0, 29], "log": [0, 30], "memorymgmt": 0, "messag": [0, 1, 14, 18, 21, 30, 31, 33], "metricsmsg": 0, "msgprocess": 0, "multityperegentri": 0, "multitypesymentri": 0, "multitypesymbolt": 0, "numpydtyp": [0, 16], "numericunicod": 0, "radixsortlsd": 0, "registri": [0, 21], "secur": 0, "segstringsort": 0, "segmentedcomput": 0, "segmentedstr": 0, "serverconfig": [0, 15, 17, 20], "serverdaemon": [0, 7], "servererrorstr": 0, "servererror": 0, "siphash": [0, 29], "sparsematrix": [0, 36], "spsmatutil": [0, 35], "statusmsg": 0, "symarraydmap": 0, "uniqu": [0, 13], "arkouda_serv": [0, 9, 30, 31], "arkoudajsoncompat": 0, "arkoudapythoncompat": 0, "arkoudasortcompat": 0, "arkoudasparsematrixcompat": 0, "arkoudatimecompat": 0, "registrationconfig": 0, "index": [0, 1, 10, 16, 21, 29, 30], "chapel": [0, 11, 12, 20, 22, 29, 30, 33], "modul": [0, 15, 31, 33, 42], "search": [0, 18, 21], "page": 0, "usag": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "us": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "import": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "param": [1, 2, 4, 11, 12, 15, 16, 18, 20, 22, 28, 29, 30, 32, 34, 35, 38, 39, 42, 44, 46], "bitsperdigit": 1, "rslsd_bitsperdigit": [1, 30], "const": [1, 2, 3, 4, 5, 6, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40], "aulogg": 1, "new": [1, 2, 3, 4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27, 29, 30, 31, 33, 34, 36, 37, 39, 40], "logger": [1, 2, 3, 9, 10, 11, 14, 15, 17, 18, 19, 20, 21, 24, 25, 27, 29, 30, 31, 34, 37, 39, 40], "loglevel": [1, 2, 3, 9, 10, 11, 14, 15, 17, 18, 19, 20, 21, 24, 25, 27, 29, 30, 31, 34, 37, 39, 40], "logchannel": [1, 2, 9, 10, 11, 14, 15, 17, 18, 19, 20, 21, 24, 25, 27, 29, 30, 31, 34, 37, 39, 40], "var": [1, 4, 5, 7, 9, 14, 15, 16, 17, 19, 20, 21, 25, 29, 30, 31, 32, 33, 36], "printthresh": 1, "30": 1, "threshold": [1, 20, 21], "amount": [1, 30], "data": [1, 4, 8, 11, 16, 18, 20, 21, 33, 39], "print": [1, 20, 21, 30], "arrai": [1, 10, 11, 12, 13, 16, 18, 19, 20, 21, 22, 24, 29, 30, 35, 38, 39, 46], "larger": 1, "than": [1, 20, 21], "less": [1, 20, 21], "proc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45], "formatari": 1, "A": [1, 35], "d": [1, 18, 20, 27, 28, 29, 34, 35, 38], "string": [1, 2, 3, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 42, 46], "throw": [1, 2, 3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 37, 38, 39], "pass": [1, 20, 21, 29, 33], "argument": [1, 12, 13, 16, 18, 20, 21, 22, 29, 31, 32, 33, 38, 39], "name": [1, 10, 11, 16, 17, 18, 19, 20, 21, 25, 29, 30, 31, 32, 33], "printari": 1, "printownership": 1, "x": [1, 5, 29, 36], "1": [1, 7, 10, 16, 17, 20, 29, 30, 31, 33, 38, 46], "18": 1, "version": [1, 17, 29, 30], "out": [1, 9, 21, 29], "localsubdomain": 1, "issort": [1, 29], "t": [1, 11, 12, 13, 16, 18, 20, 21, 22, 24, 28, 29, 32, 34, 38], "bool": [1, 3, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 29, 30, 31, 39], "where": [1, 2, 4, 11, 14, 16, 18, 20, 22, 29, 30, 33, 34, 35, 38], "rank": [1, 20, 38, 46], "determin": [1, 10, 20, 29, 30, 33], "i": [1, 4, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 25, 27, 29, 30, 31, 32, 33, 46], "sort": [1, 13, 24, 29, 30, 39], "check": [1, 10, 13, 15, 20, 21, 25, 29, 30], "issortedov": 1, "ref": [1, 3, 4, 5, 6, 7, 8, 11, 13, 16, 27, 28, 29, 34, 35, 36], "slice": [1, 29], "axisidx": 1, "int": [1, 2, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 45, 46], "along": [1, 10, 39], "given": [1, 11, 12, 16, 21, 29], "axi": 1, "within": [1, 9, 15, 30, 31], "domain": [1, 10, 13, 20, 21, 27, 29, 38, 39], "onli": [1, 4, 11, 13, 16, 18, 20, 29, 33], "indic": [1, 10, 15, 16, 18, 21, 29, 30, 31, 35, 46], "thi": [1, 7, 11, 15, 16, 17, 20, 21, 29, 30, 31, 32, 46], "ar": [1, 4, 10, 14, 16, 17, 18, 20, 22, 25, 29, 31, 33, 39], "validatenegativeax": 1, "nd": [1, 21, 32], "modifi": 1, "an": [1, 9, 10, 12, 16, 17, 18, 20, 21, 22, 25, 29, 30, 31, 33, 38, 46], "potenti": 1, "neg": [1, 16], "posit": [1, 16], "rang": [1, 29, 39], "number": [1, 10, 16, 17, 20, 29, 30, 33, 39], "dimens": [1, 18, 20, 21, 38, 46], "while": 1, "confirm": 1, "ax": 1, "valid": 1, "convert": [1, 11, 18, 21, 22, 31], "return": [1, 7, 10, 11, 13, 15, 16, 17, 18, 20, 21, 22, 24, 29, 30, 31, 32, 33, 38, 39], "tupl": [1, 10, 16, 20, 39, 46], "boolean": [1, 13, 15, 21, 29, 31], "whether": [1, 10, 15, 21, 29, 30, 31], "list": [1, 10, 11, 16, 18, 19, 21, 25, 29, 31, 40, 46], "domonaxi": 1, "idx": [1, 10, 19, 29, 36], "na": 1, "get": [1, 4, 7, 16, 17, 18, 21, 30], "select": 1, "th": 1, "set": [1, 7, 13, 16, 17, 18, 19, 20, 29, 30, 31], "specifi": [1, 9, 11, 20, 21, 33, 38], "must": [1, 16, 29, 31], "have": [1, 11, 20], "same": [1, 29], "subset": [1, 22], "For": [1, 11, 13, 18, 20, 29, 46], "exampl": [1, 18, 20, 39, 46], "repres": [1, 10, 20, 29], "stack": 1, "1000": 1, "10x10": 1, "matric": [1, 20], "ex": 1, "10": [1, 30], "Then": 1, "25": 1, "0": [1, 4, 5, 9, 11, 17, 18, 20, 21, 24, 29, 30, 31, 36], "e": [1, 29], "25th": 1, "matrix": [1, 35], "ad": [1, 20, 24, 27, 39], "domoffaxi": 1, "over": [1, 13, 29, 30, 38], "orthogon": 1, "iter": [1, 4, 16, 17, 21], "axisslic": 1, "all": [1, 14, 15, 16, 17, 18, 20, 21, 29, 31, 39], "tag": 1, "iterkind": 1, "standalon": 1, "n": [1, 10, 11, 12, 20, 21, 29, 31, 33, 38], "subdomchunk": 1, "dom": [1, 20, 38, 44], "chunkidx": 1, "nchunk": 1, "creat": [1, 4, 9, 11, 14, 16, 18, 20, 21, 31], "chunk": [1, 18], "input": [1, 12, 20, 29], "split": [1, 29], "0th": 1, "roughli": 1, "equal": [1, 20, 21, 29], "size": [1, 4, 12, 13, 16, 17, 18, 20, 21, 22, 24, 29, 38, 39], "take": [1, 18, 21, 22, 29], "greater": [1, 20, 21], "first": [1, 13, 16, 18, 20, 21, 29], "empti": [1, 29, 31], "last": [1, 20, 21], "contain": [1, 11, 13, 16, 18, 20, 21, 25, 29, 39, 46], "entir": [1, 21, 29], "reducedshap": 1, "shape": [1, 11, 20, 21, 35, 38], "make": [1, 20, 31, 38], "degener": 1, "astat": 1, "real": [1, 15, 16, 17, 18, 22, 31, 34, 36, 39, 46], "stat": 1, "form": [1, 11, 21], "produc": 1, "statist": 1, "a_min": 1, "a_max": 1, "a_mean": 1, "a_vari": 1, "a_stddevi": 1, "filluniform": 1, "seed": [1, 36], "241": 1, "concatarrai": 1, "b": [1, 10, 16, 22, 35], "bd": 1, "order": [1, 17, 35], "true": [1, 11, 14, 15, 16, 24, 29, 30, 31, 39], "concaten": 1, "2": [1, 20, 27, 29, 30, 31, 34, 35, 36, 38, 46], "result": [1, 13, 22, 29], "offset": [1, 11, 20, 27, 29], "ind": [1, 27], "israng": 1, "isdomain": 1, "manner": 1, "base": [1, 9, 10, 20, 30, 31, 39], "local": [1, 4, 9, 10, 13, 15, 17, 18, 30, 31, 33, 35], "id": [1, 17], "can": [1, 11, 20, 21, 22, 29, 30, 33], "avoid": [1, 20], "do": [1, 17, 20, 31], "commun": 1, "lockstep": 1, "contiguousindic": 1, "map": [1, 7, 10, 11, 13, 17, 18, 19, 21, 25, 38], "contigu": [1, 29], "memori": [1, 4, 15, 18, 29, 30, 33], "validatearrayssamelength": 1, "type": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 16, 18, 20, 21, 22, 28, 29, 30, 31, 32, 33, 35, 36, 38, 43, 46], "st": [1, 2, 3, 7, 10, 11, 16, 17, 18, 19, 21, 29, 31, 37], "borrow": [1, 2, 3, 7, 10, 11, 16, 17, 18, 19, 20, 21, 29, 37], "symtab": [1, 2, 3, 7, 10, 11, 17, 18, 19, 21, 29, 31, 33, 37], "variabl": 1, "from": [1, 9, 10, 11, 12, 16, 18, 20, 21, 29, 31, 33, 35], "command": [1, 7, 9, 15, 16, 18, 30, 31, 33], "them": 1, "thei": [1, 18, 20], "exist": [1, 9, 14, 16, 17, 21], "length": [1, 19, 20, 21, 27, 29], "metadata": 1, "about": [1, 20], "arg": [1, 10, 11, 16, 18, 20, 21, 29, 31, 32], "field": [1, 16, 29], "deriv": [1, 14, 31], "symbol": [1, 16, 18, 20, 21, 25, 29, 32], "tabl": [1, 18, 20, 21, 29, 32], "hasstr": 1, "objtyp": [1, 11, 19, 30], "getbitwidth": 1, "uint": [1, 5, 11, 15, 16, 18, 20, 27, 29, 30, 31, 34], "ishomogeneoustupl": 1, "getdigit": 1, "kei": [1, 16, 19, 24, 30], "rshift": 1, "_tupl": 1, "getnumdigitsnumericarrai": 1, "mergenumericarrai": 1, "numdigit": 1, "totaldigit": 1, "bitwidth": 1, "record": [1, 4, 5, 15, 16, 17, 24, 27, 31, 36], "lowlevellocalizingslic": 1, "meant": 1, "low": [1, 24, 27, 29], "level": [1, 13, 14, 30], "altern": [1, 29], "assign": [1, 20], "better": [1, 21], "perform": [1, 21], "fewer": 1, "alloc": [1, 15, 18, 20, 29, 30], "especi": 1, "when": [1, 4, 13, 16, 20, 30, 31, 46], "region": [1, 29], "being": [1, 10, 13, 30, 31, 33], "pointer": 1, "store": [1, 22, 29], "isown": 1, "fals": [1, 4, 11, 13, 15, 16, 24, 29, 30, 31, 39], "remot": [1, 4], "non": [1, 13, 31, 35], "copi": [1, 4, 5], "buffer": [1, 4], "ptr": 1, "c_ptr": [1, 4, 5, 6], "nil": 1, "we": [1, 11, 20, 22, 30], "own": [1, 14, 17, 21, 29, 31], "init": [1, 9, 14, 16, 17, 19, 20, 29, 31, 33], "deinit": [1, 4, 5, 20], "removedegenrank": 1, "remov": [1, 9, 20, 21, 29], "": [1, 3, 9, 16, 17, 20, 21, 22, 29, 33, 39], "minu": 1, "halt": [1, 20], "condit": [1, 29], "isn": [1, 29], "met": 1, "see": [1, 15, 16, 21, 25], "also": [1, 22, 29, 39], "manipulationmsg": [1, 16], "squeezemsg": 1, "broadcastshap": 1, "sa": 1, "sb": 1, "nb": 1, "algorithm": [1, 39], "broadcast": [1, 13, 18], "pd": 1, "two": [1, 22, 29], "http": [1, 9], "api": [1, 22], "org": 1, "latest": 1, "api_specif": 1, "html": 1, "n1": 1, "n2": 1, "removeaxi": 1, "appendaxi": 1, "valu": [1, 3, 11, 13, 16, 17, 18, 19, 20, 21, 27, 28, 29, 34, 35, 36, 39, 42], "unflatten": 1, "bigint": [1, 2, 5, 11, 16, 20, 22, 46], "1d": [1, 20], "multi": 1, "dimension": [1, 30], "flatten": 1, "accumranks": 1, "indextoord": 1, "64": [1, 15, 17, 18, 22, 34], "bilogg": 2, "bigintcreationmsg": 2, "cmd": [2, 7, 10, 11, 16, 17, 18, 31, 37], "msgarg": [2, 7, 10, 11, 17, 18, 37], "messagearg": [2, 7, 10, 11, 16, 17, 18, 31, 37], "array_dtyp": [2, 11, 18], "array_nd": [2, 11, 18], "msgtupl": [2, 3, 7, 10, 11, 16, 17, 18, 21, 31, 37], "biginttouintarraysmsg": 2, "getmaxbitsmsg": 2, "setmaxbitsmsg": 2, "castlogg": 3, "castgensymentrytostr": 3, "gse": [3, 20], "gensymentri": [3, 20, 21, 29], "fromtyp": 3, "enum": [3, 9, 10, 14, 15, 16, 17, 19, 20, 22, 28, 29, 30, 31, 36, 38], "errormod": 3, "strict": 3, "ignor": [3, 18], "return_valid": 3, "constant": [3, 9, 10, 14, 15, 16, 17, 19, 20, 22, 28, 29, 30, 31, 36, 38], "stringtonumericstrict": [3, 28], "rng": [3, 29], "totyp": [3, 11], "stringtonumericignor": [3, 28], "stringtonumericreturnvalid": [3, 28], "caststringtosymentri": 3, "segstr": [3, 11, 27, 29, 33, 39], "error": [3, 10, 14, 16, 21, 29, 30, 32, 33], "caststringtobigint": 3, "submodul": [4, 35], "newdstaggreg": 4, "elemtyp": 4, "useunorderedcopi": 4, "destin": 4, "aggreg": 4, "dst": [4, 5], "lh": 4, "newsrcaggreg": 4, "sourc": 4, "src": [4, 5], "rh": 4, "dstaggreg": 4, "optim": 4, "Not": 4, "parallel": [4, 13], "safe": 4, "expect": 4, "per": [4, 13, 29, 30], "task": [4, 24, 27, 31], "basi": 4, "high": [4, 13, 24, 27, 29], "sinc": [4, 20], "aggtyp": [4, 5], "buffers": [4, 5], "dstbuffsiz": [4, 5], "mylocalespac": [4, 5], "numlocal": [4, 5, 17], "lastlocal": [4, 5], "opsuntilyield": [4, 5], "yieldfrequ": [4, 5], "lbuffer": [4, 5], "rbuffer": [4, 5], "remotebuff": [4, 5], "bufferidx": [4, 5], "postinit": [4, 5], "flush": [4, 5], "srcval": 4, "flushbuff": [4, 5], "loc": [4, 5, 17, 24, 27], "freedata": [4, 5], "dstunorderedaggreg": 4, "unord": 4, "instead": [4, 20, 29], "actual": [4, 20], "srcaggreg": 4, "work": [4, 11, 29], "srcbuffsiz": [4, 5], "dstaddr": [4, 5], "lsrcaddr": [4, 5], "lsrcval": [4, 5], "rsrcaddr": [4, 5], "rsrcval": [4, 5], "srcunorderedaggreg": 4, "cachedalloc": 4, "localit": 4, "localfre": 4, "markfre": 4, "put": [4, 9, 13], "larr": 4, "isdefaultrectangular": [4, 20, 38], "bufferidxalloc": 4, "serializeds": 5, "serializeinto": 5, "8": [5, 11, 16, 18, 20, 21, 27, 29, 30, 34], "deserializefrom": 5, "dstaggregatorbigint": 5, "c_sizeof": 5, "mp_size_t": 5, "mp_limb_t": 5, "srcaggregatorbigint": 5, "uintbuffers": 5, "getaddr": 6, "p": [6, 16], "akmsgsign": 7, "dummi": [7, 20], "function": [7, 12, 17, 18, 20, 21, 28, 29, 31, 33, 42], "signatur": [7, 18, 31], "arkouda": [7, 9, 14, 15, 16, 30, 31, 33, 40, 46], "server": [7, 11, 16, 17, 18, 20, 30, 31, 33], "fcf": 7, "ideal": 7, "func": 7, "would": [7, 30], "abl": [7, 20], "construct": [7, 30], "wai": 7, "gener": [7, 10, 16, 17, 18, 20, 29, 31, 32, 33, 36], "todai": 7, "f": 7, "modulemap": 7, "usedmodul": 7, "registerfunct": 7, "modnam": 7, "line": [7, 10, 14, 31, 33], "regist": [7, 9, 21, 30, 31], "bind": [7, 39], "its": [7, 20, 29], "correspond": [7, 15, 16, 17, 29, 31, 33], "match": [7, 10, 16, 18, 21, 22, 29, 30, 31, 33], "standard": [7, 18, 30, 31], "emptystartasynccheckpointdaemon": 7, "sd": [7, 35], "defaultserverdaemon": [7, 31], "support": [7, 10, 20, 29, 30], "asynchron": [7, 31], "checkpoint": [7, 31], "funstartasynccheckpointdaemon": 7, "writeusedmodulesjson": 7, "mod": 7, "writeusedmodul": 7, "fmt": 7, "cfg": [7, 30, 31], "dumpcommandmap": 7, "dump": [7, 21], "combin": [7, 36], "singl": [7, 20, 34], "json": [7, 9, 11, 12, 16, 18, 20, 21, 30, 31, 46], "encod": [7, 18], "executecommand": 7, "dynamictwoarrayradixsort": 8, "compar": [8, 29, 31], "rec": 8, "defaultcompar": [8, 43], "eilogg": 9, "curlopt_verbos": 9, "curlopt": 9, "libcurl": 9, "c": [9, 11, 29], "requir": [9, 11, 31, 33], "configur": [9, 14, 18, 20, 31, 33, 40], "curl": 9, "core": 9, "httpchannel": 9, "object": [9, 11, 14, 16, 20, 21, 29, 31, 33, 40], "curlopt_usernam": 9, "curlopt_password": 9, "curlopt_use_ssl": 9, "curlopt_sslcert": 9, "curlopt_sslkei": 9, "curlopt_keypasswd": 9, "curlopt_sslcerttyp": 9, "curlopt_capath": 9, "curlopt_cainfo": 9, "curlopt_url": 9, "curlopt_httphead": 9, "curlopt_postfield": 9, "curlopt_customrequest": 9, "curlopt_failonerror": 9, "curlinfo_response_cod": 9, "curlopt_ssl_verifyp": 9, "systemtyp": 9, "kubernet": [9, 30, 31], "redi": 9, "consul": 9, "none": [9, 20], "extern": [9, 31], "system": [9, 17, 20, 31], "integr": [9, 31], "channeltyp": 9, "stdout": [9, 14], "file": [9, 10, 14, 30, 31, 33], "describ": 9, "channel": [9, 14, 30], "write": [9, 14, 30], "serviceendpoint": [9, 31], "arkouda_cli": 9, "metric": [9, 17, 31], "servic": 9, "endpoint": [9, 31], "client": [9, 16, 20, 30, 31, 32, 33], "socket": [9, 31], "httprequesttyp": 9, "post": 9, "patch": 9, "delet": [9, 10, 18, 21, 31], "request": [9, 15, 16, 17, 18, 30, 31, 33, 46], "via": [9, 31, 33], "httprequestformat": 9, "text": 9, "multipart": 9, "format": [9, 11, 12, 16, 18, 20, 21, 30, 33], "getconnecthostip": 9, "retriev": [9, 11, 20, 21, 29, 30, 31], "host": [9, 15, 33], "ip": 9, "address": 9, "process": [9, 15, 21, 30, 31, 39], "which": [9, 10, 11, 20, 22, 29, 30, 31, 33, 39, 46], "cloud": [9, 30], "environ": [9, 30], "class": [9, 14, 16, 17, 19, 20, 21, 25, 29, 31, 32, 33, 36, 42], "defin": [9, 14, 20, 21, 25, 29, 31], "interfac": [9, 14], "consist": [9, 20, 32], "method": [9, 14, 17, 18, 20, 21, 29, 33, 40], "payload": [9, 11, 16, 18], "filechannel": 9, "The": [9, 14, 15, 17, 18, 29, 31, 33, 40], "either": [9, 15, 30, 33], "append": [9, 10, 20, 29, 33], "overwrit": 9, "path": [9, 10], "overrid": [9, 14, 16, 17, 20, 31], "url": 9, "requesttyp": 9, "requestformat": 9, "configurechannel": 9, "generatehead": 9, "instanc": [9, 29, 31, 33], "attribut": [9, 21, 29], "httpschannel": 9, "cacert": 9, "token": [9, 16, 30, 31], "overridden": [9, 17, 31], "add": [9, 17, 20, 36], "tl": 9, "header": [9, 10], "registerwithkubernet": 9, "appnam": 9, "servicenam": 9, "serviceport": 9, "targetserviceport": 9, "deploi": [9, 30], "outsid": 9, "enabl": 9, "discoveri": 9, "applic": 9, "deregisterfromkubernet": 9, "compos": [9, 10, 16, 29], "access": [9, 33], "getkubernetesregistrationparamet": 9, "getkubernetesderegisterparamet": 9, "registerwithexternalsystem": 9, "startup": [9, 30, 31], "default": [9, 15, 17, 20, 22, 29, 30, 31], "deregisterfromexternalsystem": 9, "deregist": [9, 31], "upon": [9, 10, 31], "receipt": 9, "shutdown": [9, 31], "fiologg": 10, "filetyp": 10, "hdf5": [10, 33], "arrow": 10, "parquet": 10, "csv": 10, "unknown": [10, 20, 30], "appendfil": 10, "filepath": [10, 14], "writetofil": [10, 14], "writelinestofil": 10, "getlinefromfil": 10, "lineindex": 10, "delimitedfiletomap": 10, "delimit": [10, 16, 29, 31], "initdirectori": 10, "ensureclos": 10, "tmpf": 10, "ensur": 10, "close": [10, 31], "disregard": 10, "isglobpattern": 10, "filenam": 10, "glob": 10, "express": [10, 29], "oppos": 10, "specif": [10, 20], "generatefilenam": 10, "prefix": [10, 20, 29], "extens": 10, "targetlocaless": 10, "written": [10, 14], "provid": [10, 14, 16, 18, 21, 31, 33], "user": [10, 16, 17, 31, 33], "getmatchingfilenam": 10, "mode": [10, 33], "truncat": 10, "warn": [10, 14, 16, 29], "overwritten": 10, "deletematchingfilenamesmsg": 10, "follow": [10, 16, 17, 22, 29, 31], "pattern": [10, 21, 29], "_local": 10, "deletematchingfilenam": 10, "deletefil": 10, "getfilemetadata": 10, "magic_parquet": 10, "byte": [10, 11, 16, 21, 22, 29, 30], "par1": 10, "magic_hdf5": 10, "x89hdf": 10, "r": 10, "x1a": 10, "magic_arrow": 10, "arrow1": 10, "x00": 10, "magic_csv": 10, "getfiletypebymag": 10, "public": 10, "magic": 10, "domain_intersect": 10, "d1": 10, "d2": 10, "getfirsteightbytesfromfil": 10, "getfiletyp": 10, "getfiletypemsg": 10, "lsanymsg": 10, "globexpansionmsg": 10, "gslogger": 11, "config": [11, 15, 18, 24, 29, 30, 36, 38, 46], "null_strings_valu": [11, 29], "pdarrai": [11, 20, 29, 30], "side": 11, "makearrayfrombyt": 11, "arraysegstr": 11, "segmentedcalcoffset": 11, "valuesdom": 11, "calcul": [11, 17], "find": [11, 13, 21, 29, 39], "null": [11, 29], "termin": [11, 29], "should": [11, 13, 20, 29, 30], "alreadi": [11, 21, 31], "been": [11, 33], "uint8": [11, 22], "tondarrai": 11, "output": 11, "numpi": [11, 20, 22], "ndarrai": 11, "checkcast": 11, "util": [11, 20], "test": [11, 29], "wa": [11, 16, 29, 30, 33], "success": [11, 16], "otherwis": [11, 16, 20, 29, 30], "buildreadallmsgjson": 11, "rname": 11, "allowerror": 11, "fileerrorcount": 11, "fileerror": 11, "jsontomap": 11, "simpl": 11, "parser": 11, "allow": 11, "properli": 11, "THAT": 11, "doe": [11, 14, 16, 17, 29], "NOT": 11, "nest": 11, "formatjson": 12, "val": [12, 16, 17, 20, 30, 34, 35, 36], "jsontoarrai": 12, "deseri": [12, 16], "parsejson": [12, 21], "helper": [12, 20], "pars": [12, 16, 18, 33], "item": [12, 17, 21], "ar1": 13, "ad1": 13, "ar2": 13, "ad2": 13, "invert": [13, 29], "each": [13, 15, 16, 17, 20, 21, 29, 38, 39, 46], "membership": [13, 29], "second": [13, 18, 29], "truth": [13, 39], "distribut": [13, 20, 24, 38], "in1dar2perlocassoc": 13, "associ": [13, 18], "so": [13, 20], "appropri": 13, "term": 13, "space": [13, 16, 29], "small": 13, "in1dsort": 13, "strategi": 13, "At": 13, "both": 13, "intersect": 13, "back": [13, 20, 31, 33], "origin": [13, 29, 33], "scale": 13, "well": [13, 29, 33], "time": [13, 29, 31, 39], "ha": [13, 20, 31, 33], "trivial": 13, "overhead": 13, "typic": 13, "larg": [13, 39], "debug": 14, "info": [14, 18, 21, 30], "critic": 14, "strongli": 14, "mean": [14, 30, 39], "consol": [14, 30], "outputhandl": 14, "variou": 14, "consoleoutputhandl": 14, "fileoutputhandl": 14, "getoutputhandl": 14, "factori": [14, 20, 29, 33], "implement": [14, 16, 29, 32, 33], "structur": 14, "sensit": 14, "analog": 14, "other": [14, 18, 20, 22, 29], "languag": 14, "python": [14, 16, 18, 20, 22, 29, 30], "printdat": 14, "emit": 14, "msg": [14, 16, 18, 32, 33, 34, 36], "report": [14, 21, 33], "modulenam": [14, 33], "routinenam": [14, 33], "linenumb": [14, 33], "generatelogmessag": 14, "generatedatetimestr": 14, "tail": [14, 20], "mmlogger": 15, "memmgmttyp": 15, "static": 15, "dynam": 15, "captur": [15, 29, 30], "estim": [15, 30, 39], "suffici": 15, "avail": [15, 31, 33, 38], "execut": [15, 18, 31, 33], "availablememorypct": 15, "90": [15, 30], "percentag": [15, 30], "current": [15, 30, 33], "limit": [15, 20, 30], "mgmt": 15, "logic": [15, 29, 31], "localememorystatu": 15, "total_mem": 15, "avail_mem": 15, "pct_avail_mem": 15, "arkouda_mem_alloc": 15, "mem_us": 15, "locale_id": 15, "locale_hostnam": [15, 17], "issupportedo": 15, "getarkoudapid": 15, "getarkoudamemalloc": 15, "getavailmemori": 15, "gettotalmemori": 15, "getlocalememorystatus": 15, "localememavail": 15, "reqmemori": 15, "ismemavail": 15, "If": [15, 16, 17, 29, 31], "exce": [15, 33], "least": [15, 24], "one": [15, 16, 20, 29], "more": [15, 20, 29], "insuffici": 15, "addit": 15, "msgtype": [16, 18], "normal": 16, "msgformat": 16, "binari": [16, 32], "encapsul": [16, 17, 31], "requestmsg": [16, 31], "state": [16, 20, 31, 36], "sent": 16, "newsymbol": 16, "sym": [16, 18, 20, 21], "abstractsymentri": [16, 20, 21], "fromrespons": 16, "respons": [16, 18, 31], "group": [16, 20, 29, 30], "multipl": [16, 20, 31], "unstack": 16, "ani": [16, 20, 29, 33], "fromscalar": 16, "scalar": 16, "serial": 16, "parameterobj": [16, 21], "paramet": [16, 20, 29, 31, 33], "note": [16, 17, 20, 29], "dure": [16, 30], "transit": [16, 20], "part": [16, 20], "onc": [16, 31], "dtype": [16, 17, 18, 20, 21, 22, 32], "setkei": 16, "setval": 16, "getdtyp": 16, "getvalu": 16, "raw": 16, "trygetscalar": 16, "toscalar": 16, "errorwithcontext": [16, 33], "cannot": [16, 33], "toscalartupl": 16, "element": [16, 18, 20, 21, 29, 33, 46], "wrong": 16, "toscalarlist": 16, "toscalararrai": 16, "getscalarvalu": 16, "getintvalu": 16, "getpositiveintvalu": 16, "max": [16, 39], "rule": [16, 22], "getuintvalu": 16, "getuint8valu": 16, "getrealvalu": 16, "getboolvalu": 16, "getbigintvalu": 16, "getlist": 16, "gettupl": 16, "writeserializ": 16, "param_list": 16, "parsaf": 16, "addpayload": 16, "attach": 16, "writer": 16, "filewrit": 16, "identifi": 16, "keynotfound": 16, "getvalueof": 16, "parseparamet": 16, "individu": [16, 29], "compon": [16, 29, 46], "parsemessagearg": 16, "json_str": 16, "arg1": 16, "arg2": 16, "replymsg": 16, "repli": 16, "metriccategori": 17, "num_request": 17, "response_tim": 17, "avg_response_tim": 17, "total_response_tim": 17, "total_memory_us": 17, "server_info": 17, "num_error": 17, "metricscop": 17, "global": [17, 30], "metricdatatyp": 17, "mlogger": 17, "try": [17, 30, 31], "getenv": [17, 30], "metric_scop": 17, "servermetr": 17, "countert": 17, "requestmetr": 17, "avgresponsetimemetr": 17, "averagemeasurementt": 17, "responsetimemetr": 17, "measurementt": 17, "totalresponsetimemetr": 17, "totalmemoryusedmetr": 17, "usermetr": 17, "errormetr": 17, "getus": 17, "getusernam": 17, "metricvalu": 17, "realvalu": 17, "intvalu": 17, "datatyp": 17, "updat": 17, "avgmetricvalu": 17, "numvalu": 17, "inttot": 17, "realtot": 17, "keytyp": 17, "valtyp": 17, "share": [17, 19, 20, 21, 25, 29, 31], "getusermetr": 17, "incrementperuserrequestmetr": 17, "usernam": 17, "metricnam": 17, "increment": 17, "getperusernumrequestspercommandmetr": 17, "getperusernumrequestspercommandforallusersmetr": 17, "incrementnumrequestspercommand": 17, "incrementtotalnumrequest": 17, "measur": 17, "extend": 17, "averag": 17, "incom": [17, 31], "nummeasur": 17, "measurementtot": 17, "getnummeasur": 17, "getmeasurementtot": 17, "sum": 17, "design": 17, "invok": [17, 31, 40], "intern": [17, 20], "avg": 17, "run": [17, 30, 31, 40], "total": [17, 18, 21, 29], "divid": 17, "count": [17, 29, 39], "decrement": 17, "exportallmetr": 17, "getuserrequestmetr": 17, "getalluserrequestmetr": 17, "getservermetr": 17, "getnumrequestmetr": 17, "getnumerrormetr": 17, "getperusernumrequestmetr": 17, "getresponsetimemetr": 17, "getavgresponsetimemetr": 17, "gettotalresponsetimemetr": 17, "gettotalmemoryusedmetr": 17, "getmaxlocalememori": 17, "getsystemmetr": 17, "getserverinfo": 17, "categori": [17, 19], "scope": [17, 31], "timestamp": 17, "datetim": [17, 30], "now": [17, 20, 31], "arraymetr": 17, "localeinfo": 17, "hostnam": [17, 30], "number_of_processing_unit": 17, "physical_memori": 17, "max_number_of_task": 17, "serverinfo": 17, "server_port": 17, "number_of_local": 17, "localemetr": 17, "locale_num": 17, "locale_nam": 17, "mplogger": 18, "respond": 18, "act": 18, "createscalararrai": 18, "deletemsg": 18, "reqmsg": 18, "clearmsg": 18, "clear": [18, 21], "unregist": [18, 21], "infomsg": 18, "referenc": 18, "entri": [18, 20, 21, 29, 33], "getconfigmsg": 18, "queri": 18, "getregistrationconfig": 18, "registr": [18, 21, 30, 46], "getmemusedmsg": 18, "getmemavailmsg": 18, "availbl": 18, "getcommandmapmsg": 18, "here": [18, 20, 24], "similar": [18, 21, 29], "strmsg": 18, "__str__": 18, "str": [18, 39], "reprmsg": 18, "__repr__": 18, "repr": 18, "setmsg": 18, "undefinedsymbolerror": 18, "chunkinfoasstr": 18, "how": [18, 30], "across": 18, "100x40": 18, "2d": 18, "4": [18, 30, 34], "could": [18, 39], "50": 18, "20": [18, 30], "start": [18, 29, 31], "chunkinfoasarrai": 18, "reglogg": [19, 25], "registryentrytyp": 19, "abstractregentri": [19, 25], "genregentri": 19, "arrayregentri": [19, 25], "dataframeregentri": [19, 25], "groupbyregentri": [19, 25], "categoricalregentri": [19, 25], "segarrayregentri": [19, 25], "indexregentri": [19, 25], "seriesregentri": [19, 25], "bitvectorregentri": [19, 25], "entrytyp": [19, 20], "assignabletyp": [19, 20], "setnam": [19, 20], "todataframeregentri": 19, "array_nam": 19, "asmap": 19, "width": [19, 30], "revers": 19, "segment": [19, 28, 29], "column_nam": 19, "column": 19, "permut": [19, 24, 29], "uki": 19, "code": [19, 33], "nacod": 19, "genlogg": 20, "symbolentrytyp": 20, "typedarraysymentri": 20, "primitivetypedarraysymentri": 20, "complextypedarraysymentri": 20, "segstringsymentri": [20, 21, 29], "compositesymentri": 20, "gensparsesymentri": [20, 21], "sparsesymentri": 20, "generatorsymentri": 20, "anythingsymentri": 20, "unknownsymentri": 20, "build": [20, 29, 46], "our": [20, 31], "hierarchi": 20, "littl": 20, "concret": 20, "root": 20, "symbolt": 20, "symentri": [20, 21, 29], "inherit": 20, "ancestor": 20, "ultim": 20, "everyth": 20, "coercibl": 20, "subclass": 20, "maintain": 20, "isassignableto": 20, "help": 20, "coerc": 20, "anoth": [20, 29], "getsizeestim": 20, "hook": 20, "overmemlimit": [20, 30], "procedur": [20, 39], "entry__str__": 20, "thresh": [20, 21], "suffix": [20, 29], "baseformat": 20, "up": [20, 21], "entireti": [20, 21], "3": [20, 21, 29, 30, 31, 46], "prepend": [20, 29, 33], "front": [20, 33], "tosymentri": 20, "etyp": [20, 22, 38], "talk": 20, "instanti": 20, "singular": 20, "segarrai": [20, 30], "consid": 20, "items": [20, 24], "ndim": [20, 21], "len": [20, 26, 29], "fail": 20, "attrib": [20, 21], "differ": [20, 29, 33], "v": 20, "visibl": 20, "tupshap": 20, "live": 20, "stai": 20, "makedistarrai": [20, 38], "whose": 20, "makedist": 20, "vari": [20, 31], "accessor": 20, "max_bit": 20, "mydmap": [20, 38], "dmap": [20, 38], "defaultrectangular": [20, 38], "verbos": [20, 21], "flag": [20, 30], "6": [20, 30], "pre": 20, "pend": 20, "createsymentri": 20, "These": 20, "relat": [20, 30], "dataset": [20, 33], "createtypedsymentri": 20, "mem": 20, "offsetsentri": 20, "bytesentri": 20, "offsetssymentri": 20, "bytessymentri": 20, "nnz": [20, 36], "layoutstr": 20, "tosparsesymentri": 20, "layout": [20, 35, 36, 38, 44], "sparsegensymentri": 20, "layouttostr": 20, "l": [20, 35], "assum": 20, "matlayout": [20, 38], "spars": [20, 35, 39], "csc": [20, 35, 36], "csr": [20, 35, 36], "makesparsearrai": [20, 38], "elttyp": [20, 30, 35, 36, 38, 39], "parentdom": [20, 36], "noprefix": 20, "nosuffix": 20, "randomstream": [20, 36], "togensymentri": 20, "abstrcatsymentri": 20, "tocompositesymentri": 20, "tosegstringsymentri": 20, "togensparsesymentri": 20, "togeneratorsymentri": 20, "getarrayspecfromentri": 20, "temporari": 20, "shim": 20, "eas": 20, "attempt": [20, 21, 33], "valus": 20, "descend": 20, "retrun": 20, "synonym": 20, "tupshapestr": 20, "mtlogger": 21, "regtab": [21, 25], "track": 21, "tab": [21, 25], "serverid": 21, "id_": 21, "generatetoken": [21, 26], "_": [21, 27], "nid": 21, "nextnam": 21, "give": 21, "insert": 21, "creation": 21, "addentri": 21, "newli": 21, "deleteentri": 21, "symtabl": 21, "occur": [21, 29], "found": [21, 32], "checktabl": [21, 25], "calling_func": [21, 25], "except": [21, 25], "pretti": 21, "memus": [21, 31], "__allsymbols__": 21, "formmat": 21, "__registeredsymbols__": 21, "statu": [21, 31], "getentri": 21, "infolist": 21, "formatentri": 21, "abstractentri": 21, "dictionari": 21, "datastr": 21, "datarepr": 21, "signfi": 21, "signifi": 21, "findal": 21, "regex": [21, 29, 30], "getgenerictypedarrayentri": 21, "conveni": [21, 29], "convers": 21, "you": [21, 39], "call": [21, 29, 31], "getsegstringentri": 21, "abstractysymentri": 21, "getgenericsparsearrayentri": 21, "uint16": 22, "uint32": 22, "uint64": 22, "int8": 22, "int16": 22, "int32": 22, "int64": [22, 29], "float32": 22, "float64": 22, "complex64": 22, "complex128": 22, "undef": 22, "In": 22, "need": [22, 29, 39], "like": 22, "etc": 22, "whichdtyp": 22, "dtypes": 22, "dt": 22, "types": 22, "str2dtype": 22, "dstr": 22, "turn": 22, "pythonland": 22, "dtype2str": 22, "type2str": 22, "type2fmt": 22, "bool2str": 22, "commondtyp": 22, "oper": [22, 29, 32, 33], "between": [22, 29], "promot": 22, "divdtyp": 22, "divis": 22, "dtk": 22, "integ": 22, "float": 22, "complex": 22, "allnumericunicod": 23, "0x30": 23, "0x31": 23, "0x32": 23, "0x33": 23, "0x34": 23, "0x35": 23, "0x36": 23, "0x37": 23, "0x38": 23, "0x39": 23, "0xb2": 23, "0xb3": 23, "0xb9": 23, "0xbc": 23, "0xbd": 23, "0xbe": 23, "0x660": 23, "0x661": 23, "0x662": 23, "0x663": 23, "0x664": 23, "0x665": 23, "0x666": 23, "0x667": 23, "0x668": 23, "0x669": 23, "0x6f0": 23, "0x6f1": 23, "0x6f2": 23, "0x6f3": 23, "0x6f4": 23, "0x6f5": 23, "0x6f6": 23, "0x6f7": 23, "0x6f8": 23, "0x6f9": 23, "0x7c0": 23, "0x7c1": 23, "0x7c2": 23, "0x7c3": 23, "0x7c4": 23, "0x7c5": 23, "0x7c6": 23, "0x7c7": 23, "0x7c8": 23, "0x7c9": 23, "0x966": 23, "0x967": 23, "0x968": 23, "0x969": 23, "0x96a": 23, "0x96b": 23, "0x96c": 23, "0x96d": 23, "0x96e": 23, "0x96f": 23, "0x9e6": 23, "0x9e7": 23, "0x9e8": 23, "0x9e9": 23, "0x9ea": 23, "0x9eb": 23, "0x9ec": 23, "0x9ed": 23, "0x9ee": 23, "0x9ef": 23, "0x9f4": 23, "0x9f5": 23, "0x9f6": 23, "0x9f7": 23, "0x9f8": 23, "0x9f9": 23, "0xa66": 23, "0xa67": 23, "0xa68": 23, "0xa69": 23, "0xa6a": 23, "0xa6b": 23, "0xa6c": 23, "0xa6d": 23, "0xa6e": 23, "0xa6f": 23, "0xae6": 23, "0xae7": 23, "0xae8": 23, "0xae9": 23, "0xaea": 23, "0xaeb": 23, "0xaec": 23, "0xa": 23, "0xaee": 23, "0xaef": 23, "0xb66": 23, "0xb67": 23, "0xb68": 23, "0xb69": 23, "0xb6a": 23, "0xb6b": 23, "0xb6c": 23, "0xb6d": 23, "0xb6e": 23, "0xb6f": 23, "0xb72": 23, "0xb73": 23, "0xb74": 23, "0xb75": 23, "0xb76": 23, "0xb77": 23, "0xbe6": 23, "0xbe7": 23, "0xbe8": 23, "0xbe9": 23, "0xbea": 23, "0xbeb": 23, "0xbec": 23, "0xbed": 23, "0xbee": 23, "0xbef": 23, "0xbf0": 23, "0xbf1": 23, "0xbf2": 23, "0xc66": 23, "0xc67": 23, "0xc68": 23, "0xc69": 23, "0xc6a": 23, "0xc6b": 23, "0xc6c": 23, "0xc6d": 23, "0xc6e": 23, "0xc6f": 23, "0xc78": 23, "0xc79": 23, "0xc7a": 23, "0xc7b": 23, "0xc7c": 23, "0xc7d": 23, "0xc7e": 23, "0xce6": 23, "0xce7": 23, "0xce8": 23, "0xce9": 23, "0xcea": 23, "0xceb": 23, "0xcec": 23, "0xced": 23, "0xcee": 23, "0xcef": 23, "0xd58": 23, "0xd59": 23, "0xd5a": 23, "0xd5b": 23, "0xd5c": 23, "0xd5d": 23, "0xd5e": 23, "0xd66": 23, "0xd67": 23, "0xd68": 23, "0xd69": 23, "0xd6a": 23, "0xd6b": 23, "0xd6c": 23, "0xd6d": 23, "0xd6e": 23, "0xd6f": 23, "0xd70": 23, "0xd71": 23, "0xd72": 23, "0xd73": 23, "0xd74": 23, "0xd75": 23, "0xd76": 23, "0xd77": 23, "0xd78": 23, "0xde6": 23, "0xde7": 23, "0xde8": 23, "0xde9": 23, "0xdea": 23, "0xdeb": 23, "0xdec": 23, "0xded": 23, "0xdee": 23, "0xdef": 23, "0xe50": 23, "0xe51": 23, "0xe52": 23, "0xe53": 23, "0xe54": 23, "0xe55": 23, "0xe56": 23, "0xe57": 23, "0xe58": 23, "0xe59": 23, "0xed0": 23, "0xed1": 23, "0xed2": 23, "0xed3": 23, "0xed4": 23, "0xed5": 23, "0xed6": 23, "0xed7": 23, "0xed8": 23, "0xed9": 23, "0xf20": 23, "0xf21": 23, "0xf22": 23, "0xf23": 23, "0xf24": 23, "0xf25": 23, "0xf26": 23, "0xf27": 23, "0xf28": 23, "0xf29": 23, "0xf2a": 23, "0xf2b": 23, "0xf2c": 23, "0xf2d": 23, "0xf2e": 23, "0xf2f": 23, "0xf30": 23, "0xf31": 23, "0xf32": 23, "0xf33": 23, "0x1040": 23, "0x1041": 23, "0x1042": 23, "0x1043": 23, "0x1044": 23, "0x1045": 23, "0x1046": 23, "0x1047": 23, "0x1048": 23, "0x1049": 23, "0x1090": 23, "0x1091": 23, "0x1092": 23, "0x1093": 23, "0x1094": 23, "0x1095": 23, "0x1096": 23, "0x1097": 23, "0x1098": 23, "0x1099": 23, "0x1369": 23, "0x136a": 23, "0x136b": 23, "0x136c": 23, "0x136d": 23, "0x136e": 23, "0x136f": 23, "0x1370": 23, "0x1371": 23, "0x1372": 23, "0x1373": 23, "0x1374": 23, "0x1375": 23, "0x1376": 23, "0x1377": 23, "0x1378": 23, "0x1379": 23, "0x137a": 23, "0x137b": 23, "0x137c": 23, "0x16ee": 23, "0x16ef": 23, "0x16f0": 23, "0x17e0": 23, "0x17e1": 23, "0x17e2": 23, "0x17e3": 23, "0x17e4": 23, "0x17e5": 23, "0x17e6": 23, "0x17e7": 23, "0x17e8": 23, "0x17e9": 23, "0x17f0": 23, "0x17f1": 23, "0x17f2": 23, "0x17f3": 23, "0x17f4": 23, "0x17f5": 23, "0x17f6": 23, "0x17f7": 23, "0x17f8": 23, "0x17f9": 23, "0x1810": 23, "0x1811": 23, "0x1812": 23, "0x1813": 23, "0x1814": 23, "0x1815": 23, "0x1816": 23, "0x1817": 23, "0x1818": 23, "0x1819": 23, "0x1946": 23, "0x1947": 23, "0x1948": 23, "0x1949": 23, "0x194a": 23, "0x194b": 23, "0x194c": 23, "0x194d": 23, "0x194e": 23, "0x194f": 23, "0x19d0": 23, "0x19d1": 23, "0x19d2": 23, "0x19d3": 23, "0x19d4": 23, "0x19d5": 23, "0x19d6": 23, "0x19d7": 23, "0x19d8": 23, "0x19d9": 23, "0x19da": 23, "0x1a80": 23, "0x1a81": 23, "0x1a82": 23, "0x1a83": 23, "0x1a84": 23, "0x1a85": 23, "0x1a86": 23, "0x1a87": 23, "0x1a88": 23, "0x1a89": 23, "0x1a90": 23, "0x1a91": 23, "0x1a92": 23, "0x1a93": 23, "0x1a94": 23, "0x1a95": 23, "0x1a96": 23, "0x1a97": 23, "0x1a98": 23, "0x1a99": 23, "0x1b50": 23, "0x1b51": 23, "0x1b52": 23, "0x1b53": 23, "0x1b54": 23, "0x1b55": 23, "0x1b56": 23, "0x1b57": 23, "0x1b58": 23, "0x1b59": 23, "0x1bb0": 23, "0x1bb1": 23, "0x1bb2": 23, "0x1bb3": 23, "0x1bb4": 23, "0x1bb5": 23, "0x1bb6": 23, "0x1bb7": 23, "0x1bb8": 23, "0x1bb9": 23, "0x1c40": 23, "0x1c41": 23, "0x1c42": 23, "0x1c43": 23, "0x1c44": 23, "0x1c45": 23, "0x1c46": 23, "0x1c47": 23, "0x1c48": 23, "0x1c49": 23, "0x1c50": 23, "0x1c51": 23, "0x1c52": 23, "0x1c53": 23, "0x1c54": 23, "0x1c55": 23, "0x1c56": 23, "0x1c57": 23, "0x1c58": 23, "0x1c59": 23, "0x2070": 23, "0x2074": 23, "0x2075": 23, "0x2076": 23, "0x2077": 23, "0x2078": 23, "0x2079": 23, "0x2080": 23, "0x2081": 23, "0x2082": 23, "0x2083": 23, "0x2084": 23, "0x2085": 23, "0x2086": 23, "0x2087": 23, "0x2088": 23, "0x2089": 23, "0x2150": 23, "0x2151": 23, "0x2152": 23, "0x2153": 23, "0x2154": 23, "0x2155": 23, "0x2156": 23, "0x2157": 23, "0x2158": 23, "0x2159": 23, "0x215a": 23, "0x215b": 23, "0x215c": 23, "0x215d": 23, "0x215e": 23, "0x215f": 23, "0x2160": 23, "0x2161": 23, "0x2162": 23, "0x2163": 23, "0x2164": 23, "0x2165": 23, "0x2166": 23, "0x2167": 23, "0x2168": 23, "0x2169": 23, "0x216a": 23, "0x216b": 23, "0x216c": 23, "0x216d": 23, "0x216e": 23, "0x216f": 23, "0x2170": 23, "0x2171": 23, "0x2172": 23, "0x2173": 23, "0x2174": 23, "0x2175": 23, "0x2176": 23, "0x2177": 23, "0x2178": 23, "0x2179": 23, "0x217a": 23, "0x217b": 23, "0x217c": 23, "0x217d": 23, "0x217e": 23, "0x217f": 23, "0x2180": 23, "0x2181": 23, "0x2182": 23, "0x2185": 23, "0x2186": 23, "0x2187": 23, "0x2188": 23, "0x2189": 23, "0x2460": 23, "0x2461": 23, "0x2462": 23, "0x2463": 23, "0x2464": 23, "0x2465": 23, "0x2466": 23, "0x2467": 23, "0x2468": 23, "0x2469": 23, "0x246a": 23, "0x246b": 23, "0x246c": 23, "0x246d": 23, "0x246e": 23, "0x246f": 23, "0x2470": 23, "0x2471": 23, "0x2472": 23, "0x2473": 23, "0x2474": 23, "0x2475": 23, "0x2476": 23, "0x2477": 23, "0x2478": 23, "0x2479": 23, "0x247a": 23, "0x247b": 23, "0x247c": 23, "0x247d": 23, "0x247e": 23, "0x247f": 23, "0x2480": 23, "0x2481": 23, "0x2482": 23, "0x2483": 23, "0x2484": 23, "0x2485": 23, "0x2486": 23, "0x2487": 23, "0x2488": 23, "0x2489": 23, "0x248a": 23, "0x248b": 23, "0x248c": 23, "0x248d": 23, "0x248e": 23, "0x248f": 23, "0x2490": 23, "0x2491": 23, "0x2492": 23, "0x2493": 23, "0x2494": 23, "0x2495": 23, "0x2496": 23, "0x2497": 23, "0x2498": 23, "0x2499": 23, "0x249a": 23, "0x249b": 23, "0x24ea": 23, "0x24eb": 23, "0x24ec": 23, "0x24ed": 23, "0x24ee": 23, "0x24ef": 23, "0x24f0": 23, "0x24f1": 23, "0x24f2": 23, "0x24f3": 23, "0x24f4": 23, "0x24f5": 23, "0x24f6": 23, "0x24f7": 23, "0x24f8": 23, "0x24f9": 23, "0x24fa": 23, "0x24fb": 23, "0x24fc": 23, "0x24fd": 23, "0x24fe": 23, "0x24ff": 23, "0x2776": 23, "0x2777": 23, "0x2778": 23, "0x2779": 23, "0x277a": 23, "0x277b": 23, "0x277c": 23, "0x277d": 23, "0x277e": 23, "0x277f": 23, "0x2780": 23, "0x2781": 23, "0x2782": 23, "0x2783": 23, "0x2784": 23, "0x2785": 23, "0x2786": 23, "0x2787": 23, "0x2788": 23, "0x2789": 23, "0x278a": 23, "0x278b": 23, "0x278c": 23, "0x278d": 23, "0x278e": 23, "0x278f": 23, "0x2790": 23, "0x2791": 23, "0x2792": 23, "0x2793": 23, "0x2cfd": 23, "0x3007": 23, "0x3021": 23, "0x3022": 23, "0x3023": 23, "0x3024": 23, "0x3025": 23, "0x3026": 23, "0x3027": 23, "0x3028": 23, "0x3029": 23, "0x3038": 23, "0x3039": 23, "0x303a": 23, "0x3192": 23, "0x3193": 23, "0x3194": 23, "0x3195": 23, "0x3220": 23, "0x3221": 23, "0x3222": 23, "0x3223": 23, "0x3224": 23, "0x3225": 23, "0x3226": 23, "0x3227": 23, "0x3228": 23, "0x3229": 23, "0x3248": 23, "0x3249": 23, "0x324a": 23, "0x324b": 23, "0x324c": 23, "0x324d": 23, "0x324e": 23, "0x324f": 23, "0x3251": 23, "0x3252": 23, "0x3253": 23, "0x3254": 23, "0x3255": 23, "0x3256": 23, "0x3257": 23, "0x3258": 23, "0x3259": 23, "0x325a": 23, "0x325b": 23, "0x325c": 23, "0x325d": 23, "0x325e": 23, "0x325f": 23, "0x3280": 23, "0x3281": 23, "0x3282": 23, "0x3283": 23, "0x3284": 23, "0x3285": 23, "0x3286": 23, "0x3287": 23, "0x3288": 23, "0x3289": 23, "0x32b1": 23, "0x32b2": 23, "0x32b3": 23, "0x32b4": 23, "0x32b5": 23, "0x32b6": 23, "0x32b7": 23, "0x32b8": 23, "0x32b9": 23, "0x32ba": 23, "0x32bb": 23, "0x32bc": 23, "0x32bd": 23, "0x32be": 23, "0x32bf": 23, "0x3405": 23, "0x3483": 23, "0x382a": 23, "0x3b4d": 23, "0x4e00": 23, "0x4e03": 23, "0x4e07": 23, "0x4e09": 23, "0x4e24": 23, "0x4e5d": 23, "0x4e8c": 23, "0x4e94": 23, "0x4e96": 23, "0x4eac": 23, "0x4ebf": 23, "0x4ec0": 23, "0x4edf": 23, "0x4ee8": 23, "0x4f0d": 23, "0x4f70": 23, "0x4fe9": 23, "0x5006": 23, "0x5104": 23, "0x5146": 23, "0x5169": 23, "0x516b": 23, "0x516d": 23, "0x5341": 23, "0x5343": 23, "0x5344": 23, "0x5345": 23, "0x534c": 23, "0x53c1": 23, "0x53c2": 23, "0x53c3": 23, "0x53c4": 23, "0x56db": 23, "0x58f1": 23, "0x58f9": 23, "0x5e7a": 23, "0x5efe": 23, "0x5eff": 23, "0x5f0c": 23, "0x5f0d": 23, "0x5f0e": 23, "0x5f10": 23, "0x62d0": 23, "0x62fe": 23, "0x634c": 23, "0x67d2": 23, "0x6d1e": 23, "0x6f06": 23, "0x7396": 23, "0x767e": 23, "0x7695": 23, "0x79ed": 23, "0x8086": 23, "0x842c": 23, "0x8cae": 23, "0x8cb3": 23, "0x8d30": 23, "0x920e": 23, "0x94a9": 23, "0x9621": 23, "0x9646": 23, "0x964c": 23, "0x9678": 23, "0x96f6": 23, "0xa620": 23, "0xa621": 23, "0xa622": 23, "0xa623": 23, "0xa624": 23, "0xa625": 23, "0xa626": 23, "0xa627": 23, "0xa628": 23, "0xa629": 23, "0xa6e6": 23, "0xa6e7": 23, "0xa6e8": 23, "0xa6e9": 23, "0xa6ea": 23, "0xa6eb": 23, "0xa6ec": 23, "0xa6ef": 23, "0xa830": 23, "0xa831": 23, "0xa832": 23, "0xa833": 23, "0xa834": 23, "0xa835": 23, "0xa8d0": 23, "0xa8d1": 23, "0xa8d2": 23, "0xa8d3": 23, "0xa8d4": 23, "0xa8d5": 23, "0xa8d6": 23, "0xa8d7": 23, "0xa8d8": 23, "0xa8d9": 23, "0xa900": 23, "0xa901": 23, "0xa902": 23, "0xa903": 23, "0xa904": 23, "0xa905": 23, "0xa906": 23, "0xa907": 23, "0xa908": 23, "0xa909": 23, "0xa9d0": 23, "0xa9d1": 23, "0xa9d2": 23, "0xa9d3": 23, "0xa9d4": 23, "0xa9d5": 23, "0xa9d6": 23, "0xa9d7": 23, "0xa9d8": 23, "0xa9d9": 23, "0xa9f0": 23, "0xa9f1": 23, "0xa9f2": 23, "0xa9f3": 23, "0xa9f4": 23, "0xa9f5": 23, "0xa9f6": 23, "0xa9f7": 23, "0xa9f8": 23, "0xa9f9": 23, "0xaa50": 23, "0xaa51": 23, "0xaa52": 23, "0xaa53": 23, "0xaa54": 23, "0xaa55": 23, "0xaa56": 23, "0xaa57": 23, "0xaa58": 23, "0xaa59": 23, "0xabf0": 23, "0xabf1": 23, "0xabf2": 23, "0xabf3": 23, "0xabf4": 23, "0xabf5": 23, "0xabf6": 23, "0xabf7": 23, "0xabf8": 23, "0xabf9": 23, "0xf96b": 23, "0xf973": 23, "0xf978": 23, "0xf9b2": 23, "0xf9d1": 23, "0xf9d3": 23, "0xf9fd": 23, "0xff10": 23, "0xff11": 23, "0xff12": 23, "0xff13": 23, "0xff14": 23, "0xff15": 23, "0xff16": 23, "0xff17": 23, "0xff18": 23, "0xff19": 23, "0x10107": 23, "0x10108": 23, "0x10109": 23, "0x1010a": 23, "0x1010b": 23, "0x1010c": 23, "0x1010d": 23, "0x1010e": 23, "0x1010f": 23, "0x10110": 23, "0x10111": 23, "0x10112": 23, "0x10113": 23, "0x10114": 23, "0x10115": 23, "0x10116": 23, "0x10117": 23, "0x10118": 23, "0x10119": 23, "0x1011a": 23, "0x1011b": 23, "0x1011c": 23, "0x1011d": 23, "0x1011e": 23, "0x1011f": 23, "0x10120": 23, "0x10121": 23, "0x10122": 23, "0x10123": 23, "0x10124": 23, "0x10125": 23, "0x10126": 23, "0x10127": 23, "0x10128": 23, "0x10129": 23, "0x1012a": 23, "0x1012b": 23, "0x1012c": 23, "0x1012d": 23, "0x1012e": 23, "0x1012f": 23, "0x10130": 23, "0x10131": 23, "0x10132": 23, "0x10133": 23, "0x10140": 23, "0x10141": 23, "0x10142": 23, "0x10143": 23, "0x10144": 23, "0x10145": 23, "0x10146": 23, "0x10147": 23, "0x10148": 23, "0x10149": 23, "0x1014a": 23, "0x1014b": 23, "0x1014c": 23, "0x1014d": 23, "0x1014e": 23, "0x1014f": 23, "0x10150": 23, "0x10151": 23, "0x10152": 23, "0x10153": 23, "0x10154": 23, "0x10155": 23, "0x10156": 23, "0x10157": 23, "0x10158": 23, "0x10159": 23, "0x1015a": 23, "0x1015b": 23, "0x1015c": 23, "0x1015d": 23, "0x1015e": 23, "0x1015f": 23, "0x10160": 23, "0x10161": 23, "0x10162": 23, "0x10163": 23, "0x10164": 23, "0x10165": 23, "0x10166": 23, "0x10167": 23, "0x10168": 23, "0x10169": 23, "0x1016a": 23, "0x1016b": 23, "0x1016c": 23, "0x1016d": 23, "0x1016e": 23, "0x1016f": 23, "0x10170": 23, "0x10171": 23, "0x10172": 23, "0x10173": 23, "0x10174": 23, "0x10175": 23, "0x10176": 23, "0x10177": 23, "0x10178": 23, "0x1018a": 23, "0x1018b": 23, "0x102e1": 23, "0x102e2": 23, "0x102e3": 23, "0x102e4": 23, "0x102e5": 23, "0x102e6": 23, "0x102e7": 23, "0x102e8": 23, "0x102e9": 23, "0x102ea": 23, "0x102eb": 23, "0x102ec": 23, "0x102ed": 23, "0x102ee": 23, "0x102ef": 23, "0x102f0": 23, "0x102f1": 23, "0x102f2": 23, "0x102f3": 23, "0x102f4": 23, "0x102f5": 23, "0x102f6": 23, "0x102f7": 23, "0x102f8": 23, "0x102f9": 23, "0x102fa": 23, "0x102fb": 23, "0x10320": 23, "0x10321": 23, "0x10322": 23, "0x10323": 23, "0x10341": 23, "0x1034a": 23, "0x103d1": 23, "0x103d2": 23, "0x103d3": 23, "0x103d4": 23, "0x103d5": 23, "0x104a0": 23, "0x104a1": 23, "0x104a2": 23, "0x104a3": 23, "0x104a4": 23, "0x104a5": 23, "0x104a6": 23, "0x104a7": 23, "0x104a8": 23, "0x104a9": 23, "0x10858": 23, "0x10859": 23, "0x1085a": 23, "0x1085b": 23, "0x1085c": 23, "0x1085d": 23, "0x1085e": 23, "0x1085f": 23, "0x10879": 23, "0x1087a": 23, "0x1087b": 23, "0x1087c": 23, "0x1087d": 23, "0x1087e": 23, "0x1087f": 23, "0x108a7": 23, "0x108a8": 23, "0x108a9": 23, "0x108aa": 23, "0x108ab": 23, "0x108ac": 23, "0x108ad": 23, "0x108ae": 23, "0x108af": 23, "0x108fb": 23, "0x108fc": 23, "0x108fd": 23, "0x108fe": 23, "0x108ff": 23, "0x10916": 23, "0x10917": 23, "0x10918": 23, "0x10919": 23, "0x1091a": 23, "0x1091b": 23, "0x109bc": 23, "0x109bd": 23, "0x109c0": 23, "0x109c1": 23, "0x109c2": 23, "0x109c3": 23, "0x109c4": 23, "0x109c5": 23, "0x109c6": 23, "0x109c7": 23, "0x109c8": 23, "0x109c9": 23, "0x109ca": 23, "0x109cb": 23, "0x109cc": 23, "0x109cd": 23, "0x109ce": 23, "0x109cf": 23, "0x109d2": 23, "0x109d3": 23, "0x109d4": 23, "0x109d5": 23, "0x109d6": 23, "0x109d7": 23, "0x109d8": 23, "0x109d9": 23, "0x109da": 23, "0x109db": 23, "0x109dc": 23, "0x109dd": 23, "0x109de": 23, "0x109df": 23, "0x109e0": 23, "0x109e1": 23, "0x109e2": 23, "0x109e3": 23, "0x109e4": 23, "0x109e5": 23, "0x109e6": 23, "0x109e7": 23, "0x109e8": 23, "0x109e9": 23, "0x109ea": 23, "0x109eb": 23, "0x109ec": 23, "0x109ed": 23, "0x109ee": 23, "0x109ef": 23, "0x109f0": 23, "0x109f1": 23, "0x109f2": 23, "0x109f3": 23, "0x109f4": 23, "0x109f5": 23, "0x109f6": 23, "0x109f7": 23, "0x109f8": 23, "0x109f9": 23, "0x109fa": 23, "0x109fb": 23, "0x109fc": 23, "0x109fd": 23, "0x109fe": 23, "0x109ff": 23, "0x10a40": 23, "0x10a41": 23, "0x10a42": 23, "0x10a43": 23, "0x10a44": 23, "0x10a45": 23, "0x10a46": 23, "0x10a47": 23, "0x10a48": 23, "0x10a7d": 23, "0x10a7e": 23, "0x10a9d": 23, "0x10a9e": 23, "0x10a9f": 23, "0x10aeb": 23, "0x10aec": 23, "0x10a": 23, "0x10aee": 23, "0x10aef": 23, "0x10b58": 23, "0x10b59": 23, "0x10b5a": 23, "0x10b5b": 23, "0x10b5c": 23, "0x10b5d": 23, "0x10b5e": 23, "0x10b5f": 23, "0x10b78": 23, "0x10b79": 23, "0x10b7a": 23, "0x10b7b": 23, "0x10b7c": 23, "0x10b7d": 23, "0x10b7e": 23, "0x10b7f": 23, "0x10ba9": 23, "0x10baa": 23, "0x10bab": 23, "0x10bac": 23, "0x10bad": 23, "0x10bae": 23, "0x10baf": 23, "0x10cfa": 23, "0x10cfb": 23, "0x10cfc": 23, "0x10cfd": 23, "0x10cfe": 23, "0x10cff": 23, "0x10d30": 23, "0x10d31": 23, "0x10d32": 23, "0x10d33": 23, "0x10d34": 23, "0x10d35": 23, "0x10d36": 23, "0x10d37": 23, "0x10d38": 23, "0x10d39": 23, "0x10e60": 23, "0x10e61": 23, "0x10e62": 23, "0x10e63": 23, "0x10e64": 23, "0x10e65": 23, "0x10e66": 23, "0x10e67": 23, "0x10e68": 23, "0x10e69": 23, "0x10e6a": 23, "0x10e6b": 23, "0x10e6c": 23, "0x10e6d": 23, "0x10e6e": 23, "0x10e6f": 23, "0x10e70": 23, "0x10e71": 23, "0x10e72": 23, "0x10e73": 23, "0x10e74": 23, "0x10e75": 23, "0x10e76": 23, "0x10e77": 23, "0x10e78": 23, "0x10e79": 23, "0x10e7a": 23, "0x10e7b": 23, "0x10e7c": 23, "0x10e7d": 23, "0x10e7e": 23, "0x10f1d": 23, "0x10f1e": 23, "0x10f1f": 23, "0x10f20": 23, "0x10f21": 23, "0x10f22": 23, "0x10f23": 23, "0x10f24": 23, "0x10f25": 23, "0x10f26": 23, "0x10f51": 23, "0x10f52": 23, "0x10f53": 23, "0x10f54": 23, "0x10fc5": 23, "0x10fc6": 23, "0x10fc7": 23, "0x10fc8": 23, "0x10fc9": 23, "0x10fca": 23, "0x10fcb": 23, "0x11052": 23, "0x11053": 23, "0x11054": 23, "0x11055": 23, "0x11056": 23, "0x11057": 23, "0x11058": 23, "0x11059": 23, "0x1105a": 23, "0x1105b": 23, "0x1105c": 23, "0x1105d": 23, "0x1105e": 23, "0x1105f": 23, "0x11060": 23, "0x11061": 23, "0x11062": 23, "0x11063": 23, "0x11064": 23, "0x11065": 23, "0x11066": 23, "0x11067": 23, "0x11068": 23, "0x11069": 23, "0x1106a": 23, "0x1106b": 23, "0x1106c": 23, "0x1106d": 23, "0x1106e": 23, "0x1106f": 23, "0x110f0": 23, "0x110f1": 23, "0x110f2": 23, "0x110f3": 23, "0x110f4": 23, "0x110f5": 23, "0x110f6": 23, "0x110f7": 23, "0x110f8": 23, "0x110f9": 23, "0x11136": 23, "0x11137": 23, "0x11138": 23, "0x11139": 23, "0x1113a": 23, "0x1113b": 23, "0x1113c": 23, "0x1113d": 23, "0x1113e": 23, "0x1113f": 23, "0x111d0": 23, "0x111d1": 23, "0x111d2": 23, "0x111d3": 23, "0x111d4": 23, "0x111d5": 23, "0x111d6": 23, "0x111d7": 23, "0x111d8": 23, "0x111d9": 23, "0x111e1": 23, "0x111e2": 23, "0x111e3": 23, "0x111e4": 23, "0x111e5": 23, "0x111e6": 23, "0x111e7": 23, "0x111e8": 23, "0x111e9": 23, "0x111ea": 23, "0x111eb": 23, "0x111ec": 23, "0x111ed": 23, "0x111ee": 23, "0x111ef": 23, "0x111f0": 23, "0x111f1": 23, "0x111f2": 23, "0x111f3": 23, "0x111f4": 23, "0x112f0": 23, "0x112f1": 23, "0x112f2": 23, "0x112f3": 23, "0x112f4": 23, "0x112f5": 23, "0x112f6": 23, "0x112f7": 23, "0x112f8": 23, "0x112f9": 23, "0x11450": 23, "0x11451": 23, "0x11452": 23, "0x11453": 23, "0x11454": 23, "0x11455": 23, "0x11456": 23, "0x11457": 23, "0x11458": 23, "0x11459": 23, "0x114d0": 23, "0x114d1": 23, "0x114d2": 23, "0x114d3": 23, "0x114d4": 23, "0x114d5": 23, "0x114d6": 23, "0x114d7": 23, "0x114d8": 23, "0x114d9": 23, "0x11650": 23, "0x11651": 23, "0x11652": 23, "0x11653": 23, "0x11654": 23, "0x11655": 23, "0x11656": 23, "0x11657": 23, "0x11658": 23, "0x11659": 23, "0x116c0": 23, "0x116c1": 23, "0x116c2": 23, "0x116c3": 23, "0x116c4": 23, "0x116c5": 23, "0x116c6": 23, "0x116c7": 23, "0x116c8": 23, "0x116c9": 23, "0x11730": 23, "0x11731": 23, "0x11732": 23, "0x11733": 23, "0x11734": 23, "0x11735": 23, "0x11736": 23, "0x11737": 23, "0x11738": 23, "0x11739": 23, "0x1173a": 23, "0x1173b": 23, "0x118e0": 23, "0x118e1": 23, "0x118e2": 23, "0x118e3": 23, "0x118e4": 23, "0x118e5": 23, "0x118e6": 23, "0x118e7": 23, "0x118e8": 23, "0x118e9": 23, "0x118ea": 23, "0x118eb": 23, "0x118ec": 23, "0x118ed": 23, "0x118ee": 23, "0x118ef": 23, "0x118f0": 23, "0x118f1": 23, "0x118f2": 23, "0x11950": 23, "0x11951": 23, "0x11952": 23, "0x11953": 23, "0x11954": 23, "0x11955": 23, "0x11956": 23, "0x11957": 23, "0x11958": 23, "0x11959": 23, "0x11c50": 23, "0x11c51": 23, "0x11c52": 23, "0x11c53": 23, "0x11c54": 23, "0x11c55": 23, "0x11c56": 23, "0x11c57": 23, "0x11c58": 23, "0x11c59": 23, "0x11c5a": 23, "0x11c5b": 23, "0x11c5c": 23, "0x11c5d": 23, "0x11c5e": 23, "0x11c5f": 23, "0x11c60": 23, "0x11c61": 23, "0x11c62": 23, "0x11c63": 23, "0x11c64": 23, "0x11c65": 23, "0x11c66": 23, "0x11c67": 23, "0x11c68": 23, "0x11c69": 23, "0x11c6a": 23, "0x11c6b": 23, "0x11c6c": 23, "0x11d50": 23, "0x11d51": 23, "0x11d52": 23, "0x11d53": 23, "0x11d54": 23, "0x11d55": 23, "0x11d56": 23, "0x11d57": 23, "0x11d58": 23, "0x11d59": 23, "0x11da0": 23, "0x11da1": 23, "0x11da2": 23, "0x11da3": 23, "0x11da4": 23, "0x11da5": 23, "0x11da6": 23, "0x11da7": 23, "0x11da8": 23, "0x11da9": 23, "0x11f50": 23, "0x11f51": 23, "0x11f52": 23, "0x11f53": 23, "0x11f54": 23, "0x11f55": 23, "0x11f56": 23, "0x11f57": 23, "0x11f58": 23, "0x11f59": 23, "0x11fc0": 23, "0x11fc1": 23, "0x11fc2": 23, "0x11fc3": 23, "0x11fc4": 23, "0x11fc5": 23, "0x11fc6": 23, "0x11fc7": 23, "0x11fc8": 23, "0x11fc9": 23, "0x11fca": 23, "0x11fcb": 23, "0x11fcc": 23, "0x11fcd": 23, "0x11fce": 23, "0x11fcf": 23, "0x11fd0": 23, "0x11fd1": 23, "0x11fd2": 23, "0x11fd3": 23, "0x11fd4": 23, "0x12400": 23, "0x12401": 23, "0x12402": 23, "0x12403": 23, "0x12404": 23, "0x12405": 23, "0x12406": 23, "0x12407": 23, "0x12408": 23, "0x12409": 23, "0x1240a": 23, "0x1240b": 23, "0x1240c": 23, "0x1240d": 23, "0x1240e": 23, "0x1240f": 23, "0x12410": 23, "0x12411": 23, "0x12412": 23, "0x12413": 23, "0x12414": 23, "0x12415": 23, "0x12416": 23, "0x12417": 23, "0x12418": 23, "0x12419": 23, "0x1241a": 23, "0x1241b": 23, "0x1241c": 23, "0x1241d": 23, "0x1241e": 23, "0x1241f": 23, "0x12420": 23, "0x12421": 23, "0x12422": 23, "0x12423": 23, "0x12424": 23, "0x12425": 23, "0x12426": 23, "0x12427": 23, "0x12428": 23, "0x12429": 23, "0x1242a": 23, "0x1242b": 23, "0x1242c": 23, "0x1242d": 23, "0x1242e": 23, "0x1242f": 23, "0x12430": 23, "0x12431": 23, "0x12432": 23, "0x12433": 23, "0x12434": 23, "0x12435": 23, "0x12436": 23, "0x12437": 23, "0x12438": 23, "0x12439": 23, "0x1243a": 23, "0x1243b": 23, "0x1243c": 23, "0x1243d": 23, "0x1243e": 23, "0x1243f": 23, "0x12440": 23, "0x12441": 23, "0x12442": 23, "0x12443": 23, "0x12444": 23, "0x12445": 23, "0x12446": 23, "0x12447": 23, "0x12448": 23, "0x12449": 23, "0x1244a": 23, "0x1244b": 23, "0x1244c": 23, "0x1244d": 23, "0x1244e": 23, "0x1244f": 23, "0x12450": 23, "0x12451": 23, "0x12452": 23, "0x12453": 23, "0x12454": 23, "0x12455": 23, "0x12456": 23, "0x12457": 23, "0x12458": 23, "0x12459": 23, "0x1245a": 23, "0x1245b": 23, "0x1245c": 23, "0x1245d": 23, "0x1245e": 23, "0x1245f": 23, "0x12460": 23, "0x12461": 23, "0x12462": 23, "0x12463": 23, "0x12464": 23, "0x12465": 23, "0x12466": 23, "0x12467": 23, "0x12468": 23, "0x12469": 23, "0x1246a": 23, "0x1246b": 23, "0x1246c": 23, "0x1246d": 23, "0x1246e": 23, "0x16a60": 23, "0x16a61": 23, "0x16a62": 23, "0x16a63": 23, "0x16a64": 23, "0x16a65": 23, "0x16a66": 23, "0x16a67": 23, "0x16a68": 23, "0x16a69": 23, "0x16ac0": 23, "0x16ac1": 23, "0x16ac2": 23, "0x16ac3": 23, "0x16ac4": 23, "0x16ac5": 23, "0x16ac6": 23, "0x16ac7": 23, "0x16ac8": 23, "0x16ac9": 23, "0x16b50": 23, "0x16b51": 23, "0x16b52": 23, "0x16b53": 23, "0x16b54": 23, "0x16b55": 23, "0x16b56": 23, "0x16b57": 23, "0x16b58": 23, "0x16b59": 23, "0x16b5b": 23, "0x16b5c": 23, "0x16b5d": 23, "0x16b5e": 23, "0x16b5f": 23, "0x16b60": 23, "0x16b61": 23, "0x16e80": 23, "0x16e81": 23, "0x16e82": 23, "0x16e83": 23, "0x16e84": 23, "0x16e85": 23, "0x16e86": 23, "0x16e87": 23, "0x16e88": 23, "0x16e89": 23, "0x16e8a": 23, "0x16e8b": 23, "0x16e8c": 23, "0x16e8d": 23, "0x16e8e": 23, "0x16e8f": 23, "0x16e90": 23, "0x16e91": 23, "0x16e92": 23, "0x16e93": 23, "0x16e94": 23, "0x16e95": 23, "0x16e96": 23, "0x1d2c0": 23, "0x1d2c1": 23, "0x1d2c2": 23, "0x1d2c3": 23, "0x1d2c4": 23, "0x1d2c5": 23, "0x1d2c6": 23, "0x1d2c7": 23, "0x1d2c8": 23, "0x1d2c9": 23, "0x1d2ca": 23, "0x1d2cb": 23, "0x1d2cc": 23, "0x1d2cd": 23, "0x1d2ce": 23, "0x1d2cf": 23, "0x1d2d0": 23, "0x1d2d1": 23, "0x1d2d2": 23, "0x1d2d3": 23, "0x1d2e0": 23, "0x1d2e1": 23, "0x1d2e2": 23, "0x1d2e3": 23, "0x1d2e4": 23, "0x1d2e5": 23, "0x1d2e6": 23, "0x1d2e7": 23, "0x1d2e8": 23, "0x1d2e9": 23, "0x1d2ea": 23, "0x1d2eb": 23, "0x1d2ec": 23, "0x1d2ed": 23, "0x1d2ee": 23, "0x1d2ef": 23, "0x1d2f0": 23, "0x1d2f1": 23, "0x1d2f2": 23, "0x1d2f3": 23, "0x1d360": 23, "0x1d361": 23, "0x1d362": 23, "0x1d363": 23, "0x1d364": 23, "0x1d365": 23, "0x1d366": 23, "0x1d367": 23, "0x1d368": 23, "0x1d369": 23, "0x1d36a": 23, "0x1d36b": 23, "0x1d36c": 23, "0x1d36d": 23, "0x1d36e": 23, "0x1d36f": 23, "0x1d370": 23, "0x1d371": 23, "0x1d372": 23, "0x1d373": 23, "0x1d374": 23, "0x1d375": 23, "0x1d376": 23, "0x1d377": 23, "0x1d378": 23, "0x1d7ce": 23, "0x1d7cf": 23, "0x1d7d0": 23, "0x1d7d1": 23, "0x1d7d2": 23, "0x1d7d3": 23, "0x1d7d4": 23, "0x1d7d5": 23, "0x1d7d6": 23, "0x1d7d7": 23, "0x1d7d8": 23, "0x1d7d9": 23, "0x1d7da": 23, "0x1d7db": 23, "0x1d7dc": 23, "0x1d7dd": 23, "0x1d7de": 23, "0x1d7df": 23, "0x1d7e0": 23, "0x1d7e1": 23, "0x1d7e2": 23, "0x1d7e3": 23, "0x1d7e4": 23, "0x1d7e5": 23, "0x1d7e6": 23, "0x1d7e7": 23, "0x1d7e8": 23, "0x1d7e9": 23, "0x1d7ea": 23, "0x1d7eb": 23, "0x1d7ec": 23, "0x1d7ed": 23, "0x1d7ee": 23, "0x1d7ef": 23, "0x1d7f0": 23, "0x1d7f1": 23, "0x1d7f2": 23, "0x1d7f3": 23, "0x1d7f4": 23, "0x1d7f5": 23, "0x1d7f6": 23, "0x1d7f7": 23, "0x1d7f8": 23, "0x1d7f9": 23, "0x1d7fa": 23, "0x1d7fb": 23, "0x1d7fc": 23, "0x1d7fd": 23, "0x1d7fe": 23, "0x1d7ff": 23, "0x1e140": 23, "0x1e141": 23, "0x1e142": 23, "0x1e143": 23, "0x1e144": 23, "0x1e145": 23, "0x1e146": 23, "0x1e147": 23, "0x1e148": 23, "0x1e149": 23, "0x1e2f0": 23, "0x1e2f1": 23, "0x1e2f2": 23, "0x1e2f3": 23, "0x1e2f4": 23, "0x1e2f5": 23, "0x1e2f6": 23, "0x1e2f7": 23, "0x1e2f8": 23, "0x1e2f9": 23, "0x1e4f0": 23, "0x1e4f1": 23, "0x1e4f2": 23, "0x1e4f3": 23, "0x1e4f4": 23, "0x1e4f5": 23, "0x1e4f6": 23, "0x1e4f7": 23, "0x1e4f8": 23, "0x1e4f9": 23, "0x1e8c7": 23, "0x1e8c8": 23, "0x1e8c9": 23, "0x1e8ca": 23, "0x1e8cb": 23, "0x1e8cc": 23, "0x1e8cd": 23, "0x1e8c": 23, "0x1e8cf": 23, "0x1e950": 23, "0x1e951": 23, "0x1e952": 23, "0x1e953": 23, "0x1e954": 23, "0x1e955": 23, "0x1e956": 23, "0x1e957": 23, "0x1e958": 23, "0x1e959": 23, "0x1ec71": 23, "0x1ec72": 23, "0x1ec73": 23, "0x1ec74": 23, "0x1ec75": 23, "0x1ec76": 23, "0x1ec77": 23, "0x1ec78": 23, "0x1ec79": 23, "0x1ec7a": 23, "0x1ec7b": 23, "0x1ec7c": 23, "0x1ec7d": 23, "0x1ec7": 23, "0x1ec7f": 23, "0x1ec80": 23, "0x1ec81": 23, "0x1ec82": 23, "0x1ec83": 23, "0x1ec84": 23, "0x1ec85": 23, "0x1ec86": 23, "0x1ec87": 23, "0x1ec88": 23, "0x1ec89": 23, "0x1ec8a": 23, "0x1ec8b": 23, "0x1ec8c": 23, "0x1ec8d": 23, "0x1ec8": 23, "0x1ec8f": 23, "0x1ec90": 23, "0x1ec91": 23, "0x1ec92": 23, "0x1ec93": 23, "0x1ec94": 23, "0x1ec95": 23, "0x1ec96": 23, "0x1ec97": 23, "0x1ec98": 23, "0x1ec99": 23, "0x1ec9a": 23, "0x1ec9b": 23, "0x1ec9c": 23, "0x1ec9d": 23, "0x1ec9": 23, "0x1ec9f": 23, "0x1eca0": 23, "0x1eca1": 23, "0x1eca2": 23, "0x1eca3": 23, "0x1eca4": 23, "0x1eca5": 23, "0x1eca6": 23, "0x1eca7": 23, "0x1eca8": 23, "0x1eca9": 23, "0x1ecaa": 23, "0x1ecab": 23, "0x1ecad": 23, "0x1eca": 23, "0x1ecaf": 23, "0x1ecb1": 23, "0x1ecb2": 23, "0x1ecb3": 23, "0x1ecb4": 23, "0x1ed01": 23, "0x1ed02": 23, "0x1ed03": 23, "0x1ed04": 23, "0x1ed05": 23, "0x1ed06": 23, "0x1ed07": 23, "0x1ed08": 23, "0x1ed09": 23, "0x1ed0a": 23, "0x1ed0b": 23, "0x1ed0c": 23, "0x1ed0d": 23, "0x1ed0": 23, "0x1ed0f": 23, "0x1ed10": 23, "0x1ed11": 23, "0x1ed12": 23, "0x1ed13": 23, "0x1ed14": 23, "0x1ed15": 23, "0x1ed16": 23, "0x1ed17": 23, "0x1ed18": 23, "0x1ed19": 23, "0x1ed1a": 23, "0x1ed1b": 23, "0x1ed1c": 23, "0x1ed1d": 23, "0x1ed1": 23, "0x1ed1f": 23, "0x1ed20": 23, "0x1ed21": 23, "0x1ed22": 23, "0x1ed23": 23, "0x1ed24": 23, "0x1ed25": 23, "0x1ed26": 23, "0x1ed27": 23, "0x1ed28": 23, "0x1ed29": 23, "0x1ed2a": 23, "0x1ed2b": 23, "0x1ed2c": 23, "0x1ed2d": 23, "0x1ed2f": 23, "0x1ed30": 23, "0x1ed31": 23, "0x1ed32": 23, "0x1ed33": 23, "0x1ed34": 23, "0x1ed35": 23, "0x1ed36": 23, "0x1ed37": 23, "0x1ed38": 23, "0x1ed39": 23, "0x1ed3a": 23, "0x1ed3b": 23, "0x1ed3c": 23, "0x1ed3d": 23, "0x1f100": 23, "0x1f101": 23, "0x1f102": 23, "0x1f103": 23, "0x1f104": 23, "0x1f105": 23, "0x1f106": 23, "0x1f107": 23, "0x1f108": 23, "0x1f109": 23, "0x1f10a": 23, "0x1f10b": 23, "0x1f10c": 23, "0x1fbf0": 23, "0x1fbf1": 23, "0x1fbf2": 23, "0x1fbf3": 23, "0x1fbf4": 23, "0x1fbf5": 23, "0x1fbf6": 23, "0x1fbf7": 23, "0x1fbf8": 23, "0x1fbf9": 23, "0x20001": 23, "0x20064": 23, "0x200e2": 23, "0x20121": 23, "0x2092a": 23, "0x20983": 23, "0x2098c": 23, "0x2099c": 23, "0x20aea": 23, "0x20afd": 23, "0x20b19": 23, "0x22390": 23, "0x22998": 23, "0x23b1b": 23, "0x2626d": 23, "0x2f890": 23, "radix": [24, 30], "signific": 24, "digit": [24, 29, 30], "rslsd_vv": 24, "vv": 24, "rslsd_numtask": 24, "maxtaskpar": 24, "numtask": 24, "rslogger": 24, "keyscompar": 24, "keycompar": 24, "k": 24, "keysrankscompar": 24, "kr": 24, "calcblock": [24, 27], "calcglobalindex": [24, 27], "bucket": [24, 27], "checksort": [24, 29], "radixsortlsd_rank": 24, "block": [24, 29, 31], "vector": [24, 29], "radixsortlsd_kei": 24, "radixsortlsd_memest": 24, "radixsortlsd_keys_memest": 24, "registered_entri": 25, "register_arrai": 25, "register_segarray_compon": 25, "sre": 25, "register_segarrai": 25, "register_datafram": 25, "dfre": 25, "register_groupbi": 25, "gbre": 25, "register_categorical_compon": 25, "cre": 25, "register_categor": 25, "register_index_compon": 25, "ir": 25, "register_index": 25, "register_seri": 25, "register_bitvector": 25, "bre": 25, "unregister_arrai": 25, "unregister_segarray_compon": 25, "unregister_segarrai": 25, "unregister_datafram": 25, "unregister_groupbi": 25, "unregister_categorical_compon": 25, "unregister_categor": 25, "unregister_index_compon": 25, "unregister_index": 25, "unregister_seri": 25, "unregister_bitvector": 25, "lookup": [25, 29], "checkavail": 25, "list_registri": 25, "32": 26, "getarkoudatoken": 26, "tokenspath": 26, "setarkoudatoken": 26, "sslogger": [27, 29], "stringintcompar": 27, "keypartcompar": 27, "keypart": 27, "a0": 27, "twophasestringsort": 27, "ss": [27, 29], "getpivot": 27, "gatherlongstr": 27, "longind": 27, "radixsortlsd_raw": 27, "pivot": 27, "computesegmentownership": 28, "vd": 28, "segfunct": [28, 29], "siphash128": [28, 29, 34], "stringcompareliteraleq": [28, 29], "stringcompareliteralneq": [28, 29], "stringsearch": [28, 29], "stringislow": [28, 29], "stringisupp": [28, 29], "stringistitl": [28, 29], "stringisalphanumer": [28, 29], "stringisalphabet": [28, 29], "stringisdigit": [28, 29], "stringisnumer": [28, 29], "stringisdecim": [28, 29], "stringisempti": [28, 29], "stringisspac": [28, 29], "computeonseg": [28, 29], "rettyp": 28, "strarg": 28, "segmentedstringusehash": 29, "usehash": 29, "fix": [29, 30], "getsegstr": 29, "assemblesegstringfrompart": 29, "ephemer": 29, "refer": 29, "persist": 29, "bundl": 29, "those": 29, "relev": 29, "composit": 29, "bytearrai": 29, "complet": [29, 33], "join": 29, "zero": [29, 35], "nbyte": 29, "includ": [29, 31, 33], "corresond": 29, "separ": [29, 31], "entrynam": 29, "directli": 29, "show": 29, "stride": 29, "stridekind": 29, "iv": 29, "gather": [29, 31], "compress": 29, "appli": 29, "hash": [29, 34], "arggroup": 29, "becaus": 29, "equival": 29, "fall": 29, "getlength": 29, "lower": 29, "uppercas": 29, "charact": 29, "replac": [29, 30], "lowercas": 29, "substr": 29, "upper": 29, "titl": 29, "remain": 29, "isdecim": 29, "decim": 29, "isnumer": 29, "numer": 29, "capit": 29, "islow": 29, "isupp": 29, "istitl": 29, "titlecas": 29, "isalnum": 29, "alphanumer": 29, "isalpha": 29, "alphabet": 29, "isdigit": 29, "isempti": 29, "isspac": 29, "whitespac": 29, "bytestouintarr": 29, "max_byt": 29, "findsubstringinbyt": 29, "findmatchloc": 29, "groupnum": 29, "postit": 29, "positon": 29, "findallmatch": 29, "nummatchesentri": 29, "startsentri": 29, "lensentri": 29, "indicesentri": 29, "returnmatchorig": 29, "sysmentri": 29, "postion": 29, "portion": 29, "option": [29, 31], "sub": 29, "replstr": 29, "initcount": 29, "returnnumsub": 29, "substitut": 29, "repl": 29, "nonzero": 29, "most": 29, "susbstitut": 29, "segstrwher": 29, "otherstr": 29, "newlen": 29, "strip": 29, "char": 29, "lead": 29, "trail": 29, "substringsearch": 29, "regular": 29, "engin": 29, "re2": 29, "lookahead": 29, "lookbehind": 29, "peelregex": 29, "includedelimit": 29, "keepparti": 29, "left": 29, "peel": 29, "off": 29, "partit": 29, "experiment": 29, "guarante": 29, "delimt": 29, "sought": 29, "skip": 29, "end": [29, 33], "By": 29, "begin": 29, "leftoffset": 29, "leftval": 29, "rightoffset": 29, "rightval": 29, "stick": 29, "delim": 29, "right": 29, "ediff": 29, "argsort": 29, "getfix": 29, "kind": [29, 32], "proper": 29, "memcmp": 29, "xind": 29, "y": 29, "yind": 29, "lss": 29, "rss": 29, "inequ": 29, "teststr": 29, "against": 29, "wise": 29, "comparison": 29, "target": 29, "polar": 29, "checkcompil": 29, "regexp": 29, "compil": [29, 30, 31], "without": 29, "unsafecompileregex": 29, "myregex": 29, "stringbytestouintarr": 29, "mainstr": 29, "concat": 29, "s1": 29, "v1": 29, "s2": 29, "v2": 29, "segstrful": 29, "arrsiz": 29, "fillvalu": 29, "interpretasstr": 29, "interpret": [29, 42], "reduc": 29, "after": 29, "interpretasbyt": 29, "model": 29, "isnumericstr": 29, "isnumericchar": 29, "deploy": 30, "arrayview": 30, "categor": 30, "groupbi": 30, "5": 30, "datafram": 30, "7": 30, "timedelta": [30, 45], "ipv4": 30, "9": 30, "bitvector": 30, "seri": 30, "11": 30, "12": 30, "multiindex": 30, "13": 30, "maxarraydim": 30, "maximum": 30, "bare": 30, "metal": 30, "hpc": 30, "trace": 30, "logcommand": 30, "serverport": 30, "5555": 30, "port": [30, 31], "zeromq": 30, "perlocalememlimit": 30, "physic": 30, "16": 30, "bit": 30, "lsd": 30, "op": [30, 32], "arkoudavers": 30, "pleas": 30, "pythonvers": 30, "serverconnectioninfo": [30, 31], "arkouda_server_connection_info": 30, "autoshutdown": 30, "shut": 30, "down": 30, "automat": 30, "disconnect": 30, "serverinfonosplash": 30, "inform": 30, "serverhostnam": 30, "get_hostnam": 30, "am": 30, "getconnecthostnam": 30, "getchplvers": 30, "built": [30, 33], "chplversionarkouda": 30, "authent": 30, "akrouda": 30, "regexmaxcaptur": 30, "saveusedmodul": 30, "usedmodulesfmt": 30, "sclogger": 30, "llevel": 30, "lchannel": 30, "createconfig": 30, "getconfig": 30, "getphysicalmemher": 30, "much": 30, "runtim": 30, "chpl_comm_regmemheapinfo": 30, "heap": 30, "getbyteord": 30, "byteord": 30, "endian": 30, "getmemus": 30, "getmemlimit": 30, "memmax": 30, "memhighwat": 30, "additionalamount": 30, "go": 30, "arraydimissupport": 30, "dim": 30, "arrayelmtypeissupport": 30, "splitmsgtotupl": 30, "numchunk": 30, "sep": 30, "getenvint": 30, "q": 30, "qcq": 30, "bslash": 30, "escaped_quot": 30, "appendtoconfigstr": 30, "currenttim": 30, "propos": 30, "timesinceepoch": 30, "totalsecond": 30, "serverdaemontyp": 31, "sdlogger": 31, "getdaemontyp": 31, "comma": 31, "daemontyp": 31, "metricsen": 31, "dedic": 31, "integrationen": 31, "multipleserverdaemon": 31, "app": 31, "pod": 31, "arkoudaserverdaemon": [31, 40], "shutdowndaemon": 31, "requestshutdown": 31, "prompt": 31, "initi": 31, "trigger": 31, "chang": 31, "caus": 31, "exit": 31, "daemon": 31, "loop": 31, "extractrequest": 31, "arkoduaseverdaemon": 31, "serv": [31, 40], "driver": [31, 40], "servertoken": 31, "arkdirectori": 31, "connecturl": 31, "reqcount": 31, "repcount": 31, "context": [31, 33], "zmq": 31, "getconnecturl": 31, "printserversplashmessag": 31, "createserverconnectioninfo": 31, "deleteserverconnectioninfo": 31, "serverconnetionfil": 31, "sendrepmsg": 31, "send": 31, "authenticateus": 31, "submit": 31, "did": 31, "errorwithmsg": [31, 32], "thrown": [31, 33], "stop": 31, "listen": 31, "thread": 31, "registerservercommand": 31, "There": 31, "adher": 31, "special": 31, "servermodul": 31, "initarkoudadirectori": 31, "processmetr": 31, "elapsedtim": 31, "processerrormessagemetr": 31, "errormsg": 31, "geterrornam": 31, "err": 31, "activitymutex": 31, "sync": 31, "idleperiodstart": 31, "atom": 31, "seennotableact": 31, "startasynccheckpointtask": 31, "serveridlestart": 31, "idl": 31, "ness": 31, "unless": 31, "case": 31, "previou": 31, "preserv": 31, "serveridlestop": 31, "longer": 31, "serveractivitymark": 31, "waitforactivitymutex": 31, "wait": 31, "until": 31, "leav": 31, "metricsserverdaemon": 31, "lessen": 31, "possibl": 31, "externalintegrationserverdaemon": 31, "arkoudaserverdeamon": 31, "parent": 31, "serverstatusdaemon": 31, "chanc": 31, "getserverdaemon": 31, "notimplementederror": [32, 33], "pname": 32, "ldtype": 32, "rdtype": 32, "efunc": 32, "dt1": 32, "dt2": 32, "dt3": 32, "algorthm": 32, "unrecognizedtypeerror": 32, "stype": 32, "unrecogn": 32, "unknownsymbolerror": [32, 33], "sname": 32, "unknownerror": 32, "incompatibleargumentserror": 32, "reason": 32, "incompat": 32, "unsupportedtypeerror": 32, "outofboundserror": 33, "fuller": 33, "errorclass": 33, "publishmsg": 33, "accept": 33, "detail": 33, "rich": 33, "publish": 33, "understand": 33, "develop": 33, "datasetnotfounderror": 33, "writemodeerror": 33, "save": 33, "brand": 33, "lack": 33, "nothdf5fileerror": 33, "hdff": 33, "hdf5fileformaterror": 33, "mismatchedappenderror": 33, "made": 33, "wrote": 33, "segstringerror": 33, "segstring_offset_nam": 33, "segstring_value_nam": 33, "argumenterror": 33, "problem": 33, "unsupportedoserror": 33, "o": 33, "ioerror": 33, "io": 33, "overmemorylimiterror": 33, "project": 33, "invoc": 33, "free": 33, "configurationerror": 33, "generateerrorcontext": 33, "geterrorwithcontext": 33, "routin": 33, "cround": 34, "dround": 34, "shlogger": 34, "siphash64": 34, "comput": 34, "fillsparsematrix": 35, "spsmat": 35, "getgrid": 35, "chpl_isnondistributedarrai": 35, "getlsd": 35, "getlsa": 35, "rowblockidx": 35, "colblockidx": 35, "sparsemattopdarrai": 35, "row": 35, "col": 35, "fill": 35, "major": 35, "rowmajorexscan": 35, "nnzpercolblock": 35, "grid": 35, "pdom": 35, "colmajorexscan": 35, "nnzperrowblock": 35, "sparsematmatmult": 35, "spsdata": [35, 36], "densematmatmult": 35, "randsparsematrix": 35, "densiti": 35, "sparsematfromarrai": 35, "addelementstosparsearrai": 35, "rand": 36, "els": 36, "sparsematdat": 36, "emptysparsedomlik": 36, "mat": 36, "writesparsematrix": 36, "arr": 36, "makesparsemat": 36, "merg": 36, "reducescanop": 36, "ident": 36, "accumul": 36, "accumulateontost": 36, "clone": 36, "slogger": 37, "getmemorystatusmsg": 37, "blockdist": 38, "defaultdmap": 38, "makedistdom": 38, "accord": 38, "desir": 38, "initexpr": 38, "makedistdomtyp": 38, "makesparsedomain": 38, "m": 38, "dens": 39, "histogram": 39, "assoc": 39, "got": 39, "realli": 39, "factor": 39, "sparsiti": 39, "somehow": 39, "min": 39, "ulogg": 39, "uniquesort": 39, "needcount": 39, "uniquevalarrai": 39, "uniquevalcountsarrai": 39, "appear": 39, "uniquesortwithinvers": 39, "needindic": 39, "uniquefromsort": 39, "uniquegroup": 39, "returninvers": 39, "uniquefromtruth": 39, "perm": 39, "aslogg": 40, "main": 40, "pythonmodulesupport": 42, "pythonversionstr": 42, "getsparsedom": 44, "getdensedom": 44, "localegrid": 44, "totalmicrosecond": 45, "registrationconfigspec": 46, "verbatim": 46, "were": 46, "arraydimensionsstr": 46, "arraydimensionsti": 46, "implicitli": 46, "what": 46, "requenst": 46, "noth": 46, "just": 46, "arrayelementsti": 46}, "objects": {"": [[41, 0, 0, "-", "ArkoudaJSONCompat"], [42, 0, 0, "-", "ArkoudaPythonCompat"], [43, 0, 0, "-", "ArkoudaSortCompat"], [44, 0, 0, "-", "ArkoudaSparseMatrixCompat"], [45, 0, 0, "-", "ArkoudaTimeCompat"], [1, 0, 0, "-", "AryUtil"], [2, 0, 0, "-", "BigIntMsg"], [5, 0, 0, "-", "BigIntegerAggregation"], [3, 0, 0, "-", "Cast"], [4, 0, 0, "-", "CommAggregation"], [6, 0, 0, "-", "CommPrimitives"], [7, 0, 0, "-", "CommandMap"], [8, 0, 0, "-", "DynamicSort"], [9, 0, 0, "-", "ExternalIntegration"], [10, 0, 0, "-", "FileIO"], [11, 0, 0, "-", "GenSymIO"], [12, 0, 0, "-", "IOUtils"], [13, 0, 0, "-", "In1d"], [14, 0, 0, "-", "Logging"], [15, 0, 0, "-", "MemoryMgmt"], [16, 0, 0, "-", "Message"], [17, 0, 0, "-", "MetricsMsg"], [18, 0, 0, "-", "MsgProcessing"], [19, 0, 0, "-", "MultiTypeRegEntry"], [20, 0, 0, "-", "MultiTypeSymEntry"], [21, 0, 0, "-", "MultiTypeSymbolTable"], [22, 0, 0, "-", "NumPyDType"], [23, 0, 0, "-", "NumericUnicodes"], [24, 0, 0, "-", "RadixSortLSD"], [46, 0, 0, "-", "RegistrationConfig"], [25, 0, 0, "-", "Registry"], [26, 0, 0, "-", "Security"], [27, 0, 0, "-", "SegStringSort"], [28, 0, 0, "-", "SegmentedComputation"], [29, 0, 0, "-", "SegmentedString"], [30, 0, 0, "-", "ServerConfig"], [31, 0, 0, "-", "ServerDaemon"], [32, 0, 0, "-", "ServerErrorStrings"], [33, 0, 0, "-", "ServerErrors"], [34, 0, 0, "-", "SipHash"], [35, 0, 0, "-", "SparseMatrix"], [36, 0, 0, "-", "SpsMatUtil"], [37, 0, 0, "-", "StatusMsg"], [38, 0, 0, "-", "SymArrayDmap"], [39, 0, 0, "-", "Unique"], [40, 0, 0, "-", "arkouda_server"]], "ArkoudaPythonCompat": [[42, 1, 1, "", "Function"], [42, 1, 1, "", "Interpreter"], [42, 1, 1, "", "Module"], [42, 1, 1, "", "Value"], [42, 2, 1, "", "pythonModuleSupported"], [42, 2, 1, "", "pythonVersionString"]], "ArkoudaSortCompat": [[43, 2, 1, "", "defaultComparator"]], "ArkoudaSparseMatrixCompat": [[44, 2, 1, "", "getDenseDom"], [44, 2, 1, "", "getSparseDom"]], "ArkoudaTimeCompat.timeDelta": [[45, 3, 1, "", "totalMicroseconds"]], "AryUtil": [[1, 2, 1, "", "aStats"], [1, 2, 1, "", "appendAxis"], [1, 4, 1, "", "auLogger"], [1, 5, 1, "", "axisSlices"], [1, 4, 1, "", "bitsPerDigit"], [1, 2, 1, "", "broadcastShape"], [1, 2, 1, "", "concatArrays"], [1, 2, 1, "", "contiguousIndices"], [1, 2, 1, "", "domOffAxis"], [1, 2, 1, "", "domOnAxis"], [1, 2, 1, "", "fillUniform"], [1, 2, 1, "", "flatten"], [1, 2, 1, "", "formatAry"], [1, 2, 1, "", "getBitWidth"], [1, 2, 1, "", "getDigit"], [1, 2, 1, "", "getNumDigitsNumericArrays"], [1, 2, 1, "", "isSorted"], [1, 2, 1, "", "isSortedOver"], [1, 6, 1, "", "lowLevelLocalizingSlice"], [1, 2, 1, "", "mergeNumericArrays"], [1, 5, 1, "", "offset"], [1, 6, 1, "", "orderer"], [1, 2, 1, "", "printAry"], [1, 2, 1, "", "printOwnership"], [1, 4, 1, "", "printThresh"], [1, 2, 1, "", "reducedShape"], [1, 2, 1, "", "removeAxis"], [1, 2, 1, "", "removeDegenRanks"], [1, 2, 1, "", "subDomChunk"], [1, 2, 1, "", "unflatten"], [1, 2, 1, "", "validateArraysSameLength"], [1, 2, 1, "", "validateNegativeAxes"]], "AryUtil.lowLevelLocalizingSlice": [[1, 3, 1, "", "deinit"], [1, 3, 1, "", "init"], [1, 7, 1, "", "isOwned"], [1, 7, 1, "", "ptr"], [1, 7, 1, "", "t"]], "AryUtil.orderer": [[1, 7, 1, "", "accumRankSizes"], [1, 3, 1, "", "indexToOrder"], [1, 3, 1, "", "init"], [1, 7, 1, "", "rank"]], "BigIntMsg": [[2, 4, 1, "", "biLogger"], [2, 2, 1, "", "bigIntCreationMsg"], [2, 2, 1, "", "bigintToUintArraysMsg"], [2, 2, 1, "", "getMaxBitsMsg"], [2, 2, 1, "", "setMaxBitsMsg"]], "BigIntegerAggregation": [[5, 6, 1, "", "DstAggregatorBigint"], [5, 6, 1, "", "SrcAggregatorBigint"]], "BigIntegerAggregation.DstAggregatorBigint": [[5, 7, 1, "", "aggType"], [5, 7, 1, "", "bufferIdxs"], [5, 7, 1, "", "bufferSize"], [5, 3, 1, "", "copy"], [5, 3, 1, "", "deinit"], [5, 3, 1, "", "flush"], [5, 3, 1, "", "flushBuffer"], [5, 7, 1, "", "lBuffers"], [5, 7, 1, "", "lastLocale"], [5, 7, 1, "", "myLocaleSpace"], [5, 7, 1, "", "opsUntilYield"], [5, 3, 1, "", "postinit"], [5, 7, 1, "", "rBuffers"]], "BigIntegerAggregation.SrcAggregatorBigint": [[5, 7, 1, "", "aggType"], [5, 7, 1, "", "bufferIdxs"], [5, 7, 1, "", "bufferSize"], [5, 3, 1, "", "copy"], [5, 3, 1, "", "deinit"], [5, 7, 1, "", "dstAddrs"], [5, 3, 1, "", "flush"], [5, 3, 1, "", "flushBuffer"], [5, 7, 1, "", "lSrcAddrs"], [5, 7, 1, "", "lSrcVals"], [5, 7, 1, "", "lastLocale"], [5, 7, 1, "", "myLocaleSpace"], [5, 7, 1, "", "opsUntilYield"], [5, 3, 1, "", "postinit"], [5, 7, 1, "", "rSrcAddrs"], [5, 7, 1, "", "rSrcVals"], [5, 7, 1, "", "uintBufferSize"]], "BigIntegerAggregation.bigint": [[5, 3, 1, "", "deserializeFrom"], [5, 3, 1, "", "serializeInto"], [5, 3, 1, "", "serializedSize"]], "Cast": [[3, 8, 1, "", "ErrorMode"], [3, 2, 1, "", "castGenSymEntryToString"], [3, 4, 1, "", "castLogger"], [3, 2, 1, "", "castStringToBigInt"], [3, 2, 1, "", "castStringToSymEntry"], [3, 2, 1, "", "stringToNumericIgnore"], [3, 2, 1, "", "stringToNumericReturnValidity"], [3, 2, 1, "", "stringToNumericStrict"]], "Cast.ErrorMode": [[3, 9, 1, "", "ignore"], [3, 9, 1, "", "return_validity"], [3, 9, 1, "", "strict"]], "CommAggregation": [[4, 6, 1, "", "DstAggregator"], [4, 6, 1, "", "DstUnorderedAggregator"], [4, 6, 1, "", "SrcAggregator"], [4, 6, 1, "", "SrcUnorderedAggregator"], [4, 2, 1, "", "bufferIdxAlloc"], [4, 2, 1, "", "newDstAggregator"], [4, 2, 1, "", "newSrcAggregator"], [4, 6, 1, "", "remoteBuffer"]], "CommAggregation.DstAggregator": [[4, 7, 1, "", "aggType"], [4, 7, 1, "", "bufferIdxs"], [4, 7, 1, "", "bufferSize"], [4, 3, 1, "", "copy"], [4, 3, 1, "", "deinit"], [4, 7, 1, "", "elemType"], [4, 3, 1, "", "flush"], [4, 3, 1, "", "flushBuffer"], [4, 7, 1, "", "lBuffers"], [4, 7, 1, "", "lastLocale"], [4, 7, 1, "", "myLocaleSpace"], [4, 7, 1, "", "opsUntilYield"], [4, 3, 1, "", "postinit"], [4, 7, 1, "", "rBuffers"]], "CommAggregation.DstUnorderedAggregator": [[4, 3, 1, "", "copy"], [4, 3, 1, "", "deinit"], [4, 7, 1, "", "elemType"], [4, 3, 1, "", "flush"]], "CommAggregation.SrcAggregator": [[4, 7, 1, "", "aggType"], [4, 7, 1, "", "bufferIdxs"], [4, 7, 1, "", "bufferSize"], [4, 3, 1, "", "copy"], [4, 3, 1, "", "deinit"], [4, 7, 1, "", "dstAddrs"], [4, 7, 1, "", "elemType"], [4, 3, 1, "", "flush"], [4, 3, 1, "", "flushBuffer"], [4, 7, 1, "", "lSrcAddrs"], [4, 7, 1, "", "lSrcVals"], [4, 7, 1, "", "lastLocale"], [4, 7, 1, "", "myLocaleSpace"], [4, 7, 1, "", "opsUntilYield"], [4, 3, 1, "", "postinit"], [4, 7, 1, "", "rSrcAddrs"], [4, 7, 1, "", "rSrcVals"]], "CommAggregation.SrcUnorderedAggregator": [[4, 3, 1, "", "copy"], [4, 3, 1, "", "deinit"], [4, 7, 1, "", "elemType"], [4, 3, 1, "", "flush"]], "CommAggregation.remoteBuffer": [[4, 3, 1, "", "GET"], [4, 3, 1, "", "PUT"], [4, 3, 1, "", "cachedAlloc"], [4, 7, 1, "", "data"], [4, 3, 1, "", "deinit"], [4, 7, 1, "", "elemType"], [4, 7, 1, "", "loc"], [4, 3, 1, "", "localFree"], [4, 10, 1, "", "localIter"], [4, 3, 1, "", "markFreed"], [4, 7, 1, "", "size"]], "CommPrimitives": [[6, 2, 1, "", "getAddr"]], "CommandMap": [[7, 2, 1, "", "akMsgSign"], [7, 4, 1, "", "commandMap"], [7, 2, 1, "", "dumpCommandMap"], [7, 2, 1, "", "emptyStartAsyncCheckpointDaemon"], [7, 2, 1, "", "executeCommand"], [7, 4, 1, "", "funStartAsyncCheckpointDaemon"], [7, 4, 1, "", "moduleMap"], [7, 2, 1, "", "registerFunction"], [7, 4, 1, "", "usedModules"], [7, 2, 1, "", "writeUsedModules"], [7, 2, 1, "", "writeUsedModulesJson"]], "DynamicSort": [[8, 2, 1, "", "dynamicTwoArrayRadixSort"]], "ExternalIntegration": [[9, 4, 1, "", "CURLINFO_RESPONSE_CODE"], [9, 4, 1, "", "CURLOPT_CAINFO"], [9, 4, 1, "", "CURLOPT_CAPATH"], [9, 4, 1, "", "CURLOPT_CUSTOMREQUEST"], [9, 4, 1, "", "CURLOPT_FAILONERROR"], [9, 4, 1, "", "CURLOPT_HTTPHEADER"], [9, 4, 1, "", "CURLOPT_KEYPASSWD"], [9, 4, 1, "", "CURLOPT_PASSWORD"], [9, 4, 1, "", "CURLOPT_POSTFIELDS"], [9, 4, 1, "", "CURLOPT_SSLCERT"], [9, 4, 1, "", "CURLOPT_SSLCERTTYPE"], [9, 4, 1, "", "CURLOPT_SSLKEY"], [9, 4, 1, "", "CURLOPT_SSL_VERIFYPEER"], [9, 4, 1, "", "CURLOPT_URL"], [9, 4, 1, "", "CURLOPT_USERNAME"], [9, 4, 1, "", "CURLOPT_USE_SSL"], [9, 4, 1, "", "CURLOPT_VERBOSE"], [9, 1, 1, "", "Channel"], [9, 8, 1, "", "ChannelType"], [9, 1, 1, "", "FileChannel"], [9, 1, 1, "", "HttpChannel"], [9, 8, 1, "", "HttpRequestFormat"], [9, 8, 1, "", "HttpRequestType"], [9, 1, 1, "", "HttpsChannel"], [9, 8, 1, "", "ServiceEndpoint"], [9, 8, 1, "", "SystemType"], [9, 2, 1, "", "deregisterFromExternalSystem"], [9, 2, 1, "", "deregisterFromKubernetes"], [9, 4, 1, "", "eiLogger"], [9, 2, 1, "", "getConnectHostIp"], [9, 2, 1, "", "getKubernetesDeregisterParameters"], [9, 2, 1, "", "getKubernetesRegistrationParameters"], [9, 2, 1, "", "registerWithExternalSystem"], [9, 2, 1, "", "registerWithKubernetes"]], "ExternalIntegration.Channel": [[9, 3, 1, "", "write"]], "ExternalIntegration.ChannelType": [[9, 9, 1, "", "FILE"], [9, 9, 1, "", "HTTP"], [9, 9, 1, "", "STDOUT"]], "ExternalIntegration.FileChannel": [[9, 7, 1, "", "append"], [9, 3, 1, "", "init"], [9, 7, 1, "", "path"], [9, 3, 1, "", "write"]], "ExternalIntegration.HttpChannel": [[9, 3, 1, "", "configureChannel"], [9, 3, 1, "", "generateHeader"], [9, 3, 1, "", "init"], [9, 7, 1, "", "requestFormat"], [9, 7, 1, "", "requestType"], [9, 7, 1, "", "url"], [9, 3, 1, "", "write"]], "ExternalIntegration.HttpRequestFormat": [[9, 9, 1, "", "JSON"], [9, 9, 1, "", "MULTIPART"], [9, 9, 1, "", "TEXT"]], "ExternalIntegration.HttpRequestType": [[9, 9, 1, "", "DELETE"], [9, 9, 1, "", "PATCH"], [9, 9, 1, "", "POST"], [9, 9, 1, "", "PUT"]], "ExternalIntegration.HttpsChannel": [[9, 7, 1, "", "caCert"], [9, 3, 1, "", "configureChannel"], [9, 3, 1, "", "generateHeader"], [9, 3, 1, "", "init"], [9, 7, 1, "", "token"]], "ExternalIntegration.ServiceEndpoint": [[9, 9, 1, "", "ARKOUDA_CLIENT"], [9, 9, 1, "", "METRICS"]], "ExternalIntegration.SystemType": [[9, 9, 1, "", "CONSUL"], [9, 9, 1, "", "KUBERNETES"], [9, 9, 1, "", "NONE"], [9, 9, 1, "", "REDIS"]], "FileIO": [[10, 8, 1, "", "FileType"], [10, 4, 1, "", "MAGIC_ARROW"], [10, 4, 1, "", "MAGIC_CSV"], [10, 4, 1, "", "MAGIC_HDF5"], [10, 4, 1, "", "MAGIC_PARQUET"], [10, 2, 1, "", "appendFile"], [10, 2, 1, "", "deleteFile"], [10, 2, 1, "", "deleteMatchingFilenames"], [10, 2, 1, "", "deleteMatchingFilenamesMsg"], [10, 2, 1, "", "delimitedFileToMap"], [10, 2, 1, "", "domain_intersection"], [10, 2, 1, "", "ensureClose"], [10, 4, 1, "", "fioLogger"], [10, 2, 1, "", "generateFilename"], [10, 2, 1, "", "generateFilenames"], [10, 2, 1, "", "getFileMetadata"], [10, 2, 1, "", "getFileType"], [10, 2, 1, "", "getFileTypeByMagic"], [10, 2, 1, "", "getFileTypeMsg"], [10, 2, 1, "", "getFirstEightBytesFromFile"], [10, 2, 1, "", "getLineFromFile"], [10, 2, 1, "", "getMatchingFilenames"], [10, 2, 1, "", "globExpansionMsg"], [10, 2, 1, "", "initDirectory"], [10, 2, 1, "", "isGlobPattern"], [10, 2, 1, "", "lsAnyMsg"], [10, 2, 1, "", "writeLinesToFile"], [10, 2, 1, "", "writeToFile"]], "FileIO.FileType": [[10, 9, 1, "", "ARROW"], [10, 9, 1, "", "CSV"], [10, 9, 1, "", "HDF5"], [10, 9, 1, "", "PARQUET"], [10, 9, 1, "", "UNKNOWN"]], "GenSymIO": [[11, 4, 1, "", "NULL_STRINGS_VALUE"], [11, 2, 1, "", "array"], [11, 2, 1, "", "arraySegString"], [11, 2, 1, "", "buildReadAllMsgJson"], [11, 2, 1, "", "checkCast"], [11, 4, 1, "", "gsLogger"], [11, 2, 1, "", "jsonToMap"], [11, 2, 1, "", "makeArrayFromBytes"], [11, 2, 1, "", "segmentedCalcOffsets"], [11, 2, 1, "", "tondarray"]], "IOUtils": [[12, 2, 1, "", "formatJson"], [12, 2, 1, "", "jsonToArray"], [12, 2, 1, "", "parseJson"]], "In1d": [[13, 2, 1, "", "in1d"], [13, 2, 1, "", "in1dAr2PerLocAssoc"], [13, 2, 1, "", "in1dSort"]], "Logging": [[14, 1, 1, "", "ConsoleOutputHandler"], [14, 1, 1, "", "FileOutputHandler"], [14, 8, 1, "", "LogChannel"], [14, 8, 1, "", "LogLevel"], [14, 1, 1, "", "Logger"], [14, 1, 1, "", "OutputHandler"], [14, 2, 1, "", "getOutputHandler"]], "Logging.ConsoleOutputHandler": [[14, 3, 1, "", "write"]], "Logging.FileOutputHandler": [[14, 7, 1, "", "filePath"], [14, 3, 1, "", "init"], [14, 3, 1, "", "write"], [14, 3, 1, "", "writeToFile"]], "Logging.LogChannel": [[14, 9, 1, "", "CONSOLE"], [14, 9, 1, "", "FILE"]], "Logging.LogLevel": [[14, 9, 1, "", "CRITICAL"], [14, 9, 1, "", "DEBUG"], [14, 9, 1, "", "ERROR"], [14, 9, 1, "", "INFO"], [14, 9, 1, "", "WARN"]], "Logging.Logger": [[14, 3, 1, "", "critical"], [14, 3, 1, "", "debug"], [14, 3, 1, "", "emit"], [14, 3, 1, "", "error"], [14, 3, 1, "", "generateDateTimeString"], [14, 3, 1, "", "generateLogMessage"], [14, 3, 1, "", "info"], [14, 3, 1, "", "init"], [14, 7, 1, "", "level"], [14, 7, 1, "", "outputHandler"], [14, 7, 1, "", "printDate"], [14, 3, 1, "", "report"], [14, 3, 1, "", "warn"]], "Logging.OutputHandler": [[14, 3, 1, "", "write"]], "MemoryMgmt": [[15, 6, 1, "", "LocaleMemoryStatus"], [15, 8, 1, "", "MemMgmtType"], [15, 4, 1, "", "availableMemoryPct"], [15, 2, 1, "", "getArkoudaMemAlloc"], [15, 2, 1, "", "getArkoudaPid"], [15, 2, 1, "", "getAvailMemory"], [15, 2, 1, "", "getLocaleMemoryStatuses"], [15, 2, 1, "", "getTotalMemory"], [15, 2, 1, "", "isMemAvailable"], [15, 2, 1, "", "isSupportedOS"], [15, 2, 1, "", "localeMemAvailable"], [15, 4, 1, "", "memMgmtType"], [15, 4, 1, "", "mmLogger"]], "MemoryMgmt.LocaleMemoryStatus": [[15, 7, 1, "", "arkouda_mem_alloc"], [15, 7, 1, "", "avail_mem"], [15, 7, 1, "", "locale_hostname"], [15, 7, 1, "", "locale_id"], [15, 7, 1, "", "mem_used"], [15, 7, 1, "", "pct_avail_mem"], [15, 7, 1, "", "total_mem"]], "MemoryMgmt.MemMgmtType": [[15, 9, 1, "", "DYNAMIC"], [15, 9, 1, "", "STATIC"]], "Message": [[16, 1, 1, "", "MessageArgs"], [16, 8, 1, "", "MsgFormat"], [16, 6, 1, "", "MsgTuple"], [16, 8, 1, "", "MsgType"], [16, 6, 1, "", "ParameterObj"], [16, 6, 1, "", "RequestMsg"], [16, 2, 1, "", "deserialize"], [16, 2, 1, "", "parseMessageArgs"], [16, 2, 1, "", "parseParameter"], [16, 2, 1, "", "serialize"]], "Message.MessageArgs": [[16, 3, 1, "", "addPayload"], [16, 3, 1, "", "contains"], [16, 3, 1, "", "get"], [16, 3, 1, "", "getValueOf"], [16, 3, 1, "", "init"], [16, 7, 1, "", "param_list"], [16, 7, 1, "", "payload"], [16, 3, 1, "", "serialize"], [16, 7, 1, "", "size"], [16, 10, 1, "", "these"], [16, 3, 1, "", "this"]], "Message.MsgFormat": [[16, 9, 1, "", "BINARY"], [16, 9, 1, "", "STRING"]], "Message.MsgTuple": [[16, 3, 1, "", "error"], [16, 3, 1, "", "fromResponses"], [16, 3, 1, "", "fromScalar"], [16, 3, 1, "", "init"], [16, 7, 1, "", "msg"], [16, 7, 1, "", "msgFormat"], [16, 7, 1, "", "msgType"], [16, 3, 1, "", "newSymbol"], [16, 7, 1, "", "payload"], [16, 3, 1, "", "serialize"], [16, 3, 1, "", "success"], [16, 7, 1, "", "user"], [16, 3, 1, "", "warning"]], "Message.MsgType": [[16, 9, 1, "", "ERROR"], [16, 9, 1, "", "NORMAL"], [16, 9, 1, "", "WARNING"]], "Message.ParameterObj": [[16, 7, 1, "", "dtype"], [16, 3, 1, "", "getBigIntValue"], [16, 3, 1, "", "getBoolValue"], [16, 3, 1, "", "getDType"], [16, 3, 1, "", "getIntValue"], [16, 3, 1, "", "getList"], [16, 3, 1, "", "getPositiveIntValue"], [16, 3, 1, "", "getRealValue"], [16, 3, 1, "", "getScalarValue"], [16, 3, 1, "", "getTuple"], [16, 3, 1, "", "getUInt8Value"], [16, 3, 1, "", "getUIntValue"], [16, 3, 1, "", "getValue"], [16, 3, 1, "", "init"], [16, 7, 1, "", "key"], [16, 3, 1, "", "setKey"], [16, 3, 1, "", "setVal"], [16, 3, 1, "", "toScalar"], [16, 3, 1, "", "toScalarArray"], [16, 3, 1, "", "toScalarList"], [16, 3, 1, "", "toScalarTuple"], [16, 3, 1, "", "tryGetScalar"], [16, 7, 1, "", "val"]], "Message.RequestMsg": [[16, 7, 1, "", "args"], [16, 7, 1, "", "cmd"], [16, 7, 1, "", "format"], [16, 7, 1, "", "size"], [16, 7, 1, "", "token"], [16, 7, 1, "", "user"]], "MetricsMsg": [[17, 1, 1, "", "ArrayMetric"], [17, 1, 1, "", "AverageMeasurementTable"], [17, 1, 1, "", "AvgMetricValue"], [17, 1, 1, "", "CounterTable"], [17, 1, 1, "", "LocaleInfo"], [17, 1, 1, "", "LocaleMetric"], [17, 1, 1, "", "MeasurementTable"], [17, 1, 1, "", "Metric"], [17, 8, 1, "", "MetricCategory"], [17, 8, 1, "", "MetricDataType"], [17, 8, 1, "", "MetricScope"], [17, 1, 1, "", "MetricValue"], [17, 1, 1, "", "ServerInfo"], [17, 6, 1, "", "User"], [17, 1, 1, "", "UserMetric"], [17, 1, 1, "", "UserMetrics"], [17, 1, 1, "", "Users"], [17, 4, 1, "", "avgResponseTimeMetrics"], [17, 4, 1, "", "errorMetrics"], [17, 2, 1, "", "exportAllMetrics"], [17, 2, 1, "", "getAllUserRequestMetrics"], [17, 2, 1, "", "getAvgResponseTimeMetrics"], [17, 2, 1, "", "getMaxLocaleMemory"], [17, 2, 1, "", "getNumErrorMetrics"], [17, 2, 1, "", "getNumRequestMetrics"], [17, 2, 1, "", "getPerUserNumRequestMetrics"], [17, 2, 1, "", "getResponseTimeMetrics"], [17, 2, 1, "", "getServerInfo"], [17, 2, 1, "", "getServerMetrics"], [17, 2, 1, "", "getSystemMetrics"], [17, 2, 1, "", "getTotalMemoryUsedMetrics"], [17, 2, 1, "", "getTotalResponseTimeMetrics"], [17, 2, 1, "", "getUserRequestMetrics"], [17, 4, 1, "", "mLogger"], [17, 4, 1, "", "metricScope"], [17, 2, 1, "", "metricsMsg"], [17, 4, 1, "", "requestMetrics"], [17, 4, 1, "", "responseTimeMetrics"], [17, 4, 1, "", "serverMetrics"], [17, 4, 1, "", "totalMemoryUsedMetrics"], [17, 4, 1, "", "totalResponseTimeMetrics"], [17, 4, 1, "", "userMetrics"], [17, 4, 1, "", "users"]], "MetricsMsg.ArrayMetric": [[17, 7, 1, "", "cmd"], [17, 7, 1, "", "dType"], [17, 3, 1, "", "init"], [17, 7, 1, "", "size"]], "MetricsMsg.AverageMeasurementTable": [[17, 3, 1, "", "add"], [17, 3, 1, "", "getMeasurementTotal"], [17, 3, 1, "", "getNumMeasurements"], [17, 7, 1, "", "measurementTotals"], [17, 7, 1, "", "numMeasurements"]], "MetricsMsg.AvgMetricValue": [[17, 7, 1, "", "intTotal"], [17, 7, 1, "", "numValues"], [17, 7, 1, "", "realTotal"], [17, 3, 1, "", "update"]], "MetricsMsg.CounterTable": [[17, 7, 1, "", "counts"], [17, 3, 1, "", "decrement"], [17, 3, 1, "", "get"], [17, 3, 1, "", "increment"], [17, 10, 1, "", "items"], [17, 3, 1, "", "set"], [17, 3, 1, "", "size"], [17, 3, 1, "", "total"]], "MetricsMsg.LocaleInfo": [[17, 7, 1, "", "hostname"], [17, 7, 1, "", "id"], [17, 7, 1, "", "max_number_of_tasks"], [17, 7, 1, "", "name"], [17, 7, 1, "", "number_of_processing_units"], [17, 7, 1, "", "physical_memory"]], "MetricsMsg.LocaleMetric": [[17, 3, 1, "", "init"], [17, 7, 1, "", "locale_hostname"], [17, 7, 1, "", "locale_name"], [17, 7, 1, "", "locale_num"]], "MetricsMsg.MeasurementTable": [[17, 3, 1, "", "add"], [17, 3, 1, "", "get"], [17, 10, 1, "", "items"], [17, 7, 1, "", "measurements"], [17, 3, 1, "", "set"], [17, 3, 1, "", "size"]], "MetricsMsg.Metric": [[17, 7, 1, "", "category"], [17, 3, 1, "", "init"], [17, 7, 1, "", "name"], [17, 7, 1, "", "scope"], [17, 7, 1, "", "timestamp"], [17, 7, 1, "", "value"]], "MetricsMsg.MetricCategory": [[17, 9, 1, "", "ALL"], [17, 9, 1, "", "AVG_RESPONSE_TIME"], [17, 9, 1, "", "NUM_ERRORS"], [17, 9, 1, "", "NUM_REQUESTS"], [17, 9, 1, "", "RESPONSE_TIME"], [17, 9, 1, "", "SERVER"], [17, 9, 1, "", "SERVER_INFO"], [17, 9, 1, "", "SYSTEM"], [17, 9, 1, "", "TOTAL_MEMORY_USED"], [17, 9, 1, "", "TOTAL_RESPONSE_TIME"]], "MetricsMsg.MetricDataType": [[17, 9, 1, "", "INT"], [17, 9, 1, "", "REAL"]], "MetricsMsg.MetricScope": [[17, 9, 1, "", "GLOBAL"], [17, 9, 1, "", "LOCALE"], [17, 9, 1, "", "REQUEST"], [17, 9, 1, "", "USER"]], "MetricsMsg.MetricValue": [[17, 7, 1, "", "dataType"], [17, 3, 1, "", "init"], [17, 7, 1, "", "intValue"], [17, 7, 1, "", "realValue"], [17, 3, 1, "", "update"]], "MetricsMsg.ServerInfo": [[17, 7, 1, "", "hostname"], [17, 3, 1, "", "init"], [17, 7, 1, "", "locales"], [17, 7, 1, "", "number_of_locales"], [17, 7, 1, "", "server_port"], [17, 7, 1, "", "version"]], "MetricsMsg.User": [[17, 7, 1, "", "name"]], "MetricsMsg.UserMetric": [[17, 3, 1, "", "init"], [17, 7, 1, "", "user"]], "MetricsMsg.UserMetrics": [[17, 3, 1, "", "getPerUserNumRequestsPerCommandForAllUsersMetrics"], [17, 3, 1, "", "getPerUserNumRequestsPerCommandMetrics"], [17, 3, 1, "", "getUserMetrics"], [17, 3, 1, "", "incrementNumRequestsPerCommand"], [17, 3, 1, "", "incrementPerUserRequestMetrics"], [17, 3, 1, "", "incrementTotalNumRequests"], [17, 7, 1, "", "metrics"], [17, 7, 1, "", "users"]], "MetricsMsg.Users": [[17, 3, 1, "", "getUser"], [17, 3, 1, "", "getUserNames"], [17, 3, 1, "", "getUsers"], [17, 7, 1, "", "users"]], "MsgProcessing": [[18, 2, 1, "", "chunkInfoAsArray"], [18, 2, 1, "", "chunkInfoAsString"], [18, 2, 1, "", "clearMsg"], [18, 2, 1, "", "create"], [18, 2, 1, "", "createScalarArray"], [18, 2, 1, "", "deleteMsg"], [18, 2, 1, "", "getCommandMapMsg"], [18, 2, 1, "", "getRegistrationConfig"], [18, 2, 1, "", "getconfigMsg"], [18, 2, 1, "", "getmemavailMsg"], [18, 2, 1, "", "getmemusedMsg"], [18, 2, 1, "", "infoMsg"], [18, 4, 1, "", "mpLogger"], [18, 2, 1, "", "reprMsg"], [18, 2, 1, "", "setMsg"], [18, 2, 1, "", "strMsg"]], "MultiTypeRegEntry": [[19, 1, 1, "", "AbstractRegEntry"], [19, 1, 1, "", "ArrayRegEntry"], [19, 1, 1, "", "BitVectorRegEntry"], [19, 1, 1, "", "CategoricalRegEntry"], [19, 1, 1, "", "DataFrameRegEntry"], [19, 1, 1, "", "GenRegEntry"], [19, 1, 1, "", "GroupByRegEntry"], [19, 1, 1, "", "IndexRegEntry"], [19, 8, 1, "", "RegistryEntryType"], [19, 1, 1, "", "SegArrayRegEntry"], [19, 1, 1, "", "SeriesRegEntry"], [19, 4, 1, "", "regLogger"]], "MultiTypeRegEntry.AbstractRegEntry": [[19, 7, 1, "", "assignableTypes"], [19, 7, 1, "", "entryType"], [19, 3, 1, "", "init"], [19, 7, 1, "", "name"], [19, 3, 1, "", "setName"]], "MultiTypeRegEntry.ArrayRegEntry": [[19, 7, 1, "", "array"], [19, 3, 1, "", "asMap"], [19, 3, 1, "", "init"]], "MultiTypeRegEntry.BitVectorRegEntry": [[19, 7, 1, "", "array"], [19, 3, 1, "", "asMap"], [19, 3, 1, "", "init"], [19, 7, 1, "", "reverse"], [19, 7, 1, "", "width"]], "MultiTypeRegEntry.CategoricalRegEntry": [[19, 3, 1, "", "asMap"], [19, 7, 1, "", "categories"], [19, 7, 1, "", "codes"], [19, 3, 1, "", "init"], [19, 7, 1, "", "naCode"], [19, 7, 1, "", "permutation"], [19, 7, 1, "", "segments"]], "MultiTypeRegEntry.DataFrameRegEntry": [[19, 3, 1, "", "asMap"], [19, 7, 1, "", "column_names"], [19, 7, 1, "", "columns"], [19, 7, 1, "", "idx"], [19, 3, 1, "", "init"]], "MultiTypeRegEntry.GenRegEntry": [[19, 3, 1, "", "init"], [19, 7, 1, "", "objType"], [19, 3, 1, "", "toDataFrameRegEntry"]], "MultiTypeRegEntry.GroupByRegEntry": [[19, 3, 1, "", "asMap"], [19, 3, 1, "", "init"], [19, 7, 1, "", "keys"], [19, 7, 1, "", "permutation"], [19, 7, 1, "", "segments"], [19, 7, 1, "", "uki"]], "MultiTypeRegEntry.IndexRegEntry": [[19, 3, 1, "", "asMap"], [19, 7, 1, "", "idx"], [19, 3, 1, "", "init"]], "MultiTypeRegEntry.RegistryEntryType": [[19, 9, 1, "", "AbstractRegEntry"], [19, 9, 1, "", "ArrayRegEntry"], [19, 9, 1, "", "BitVectorRegEntry"], [19, 9, 1, "", "CategoricalRegEntry"], [19, 9, 1, "", "DataFrameRegEntry"], [19, 9, 1, "", "GenRegEntry"], [19, 9, 1, "", "GroupByRegEntry"], [19, 9, 1, "", "IndexRegEntry"], [19, 9, 1, "", "SegArrayRegEntry"], [19, 9, 1, "", "SeriesRegEntry"]], "MultiTypeRegEntry.SegArrayRegEntry": [[19, 3, 1, "", "asMap"], [19, 3, 1, "", "init"], [19, 7, 1, "", "lengths"], [19, 7, 1, "", "segments"], [19, 7, 1, "", "values"]], "MultiTypeRegEntry.SeriesRegEntry": [[19, 3, 1, "", "asMap"], [19, 7, 1, "", "idx"], [19, 3, 1, "", "init"], [19, 7, 1, "", "values"]], "MultiTypeSymEntry": [[20, 1, 1, "", "AbstractSymEntry"], [20, 1, 1, "", "CompositeSymEntry"], [20, 1, 1, "", "GenSparseSymEntry"], [20, 1, 1, "", "GenSymEntry"], [20, 1, 1, "", "GeneratorSymEntry"], [20, 1, 1, "", "SegStringSymEntry"], [20, 1, 1, "", "SparseSymEntry"], [20, 1, 1, "", "SymEntry"], [20, 8, 1, "", "SymbolEntryType"], [20, 2, 1, "", "createSymEntry"], [20, 2, 1, "", "createTypedSymEntry"], [20, 4, 1, "", "genLogger"], [20, 2, 1, "", "getArraySpecFromEntry"], [20, 2, 1, "", "layoutToStr"], [20, 2, 1, "", "toCompositeSymEntry"], [20, 2, 1, "", "toGenSparseSymEntry"], [20, 2, 1, "", "toGenSymEntry"], [20, 2, 1, "", "toGeneratorSymEntry"], [20, 2, 1, "", "toSegStringSymEntry"], [20, 2, 1, "", "toSymEntry"], [20, 2, 1, "", "tupShapeString"]], "MultiTypeSymEntry.AbstractSymEntry": [[20, 7, 1, "", "assignableTypes"], [20, 7, 1, "", "entryType"], [20, 3, 1, "", "entry__str__"], [20, 3, 1, "", "getSizeEstimate"], [20, 3, 1, "", "init"], [20, 3, 1, "", "isAssignableTo"], [20, 7, 1, "", "name"], [20, 3, 1, "", "setName"]], "MultiTypeSymEntry.CompositeSymEntry": [[20, 3, 1, "", "attrib"], [20, 3, 1, "", "init"], [20, 7, 1, "", "ndim"], [20, 7, 1, "", "size"]], "MultiTypeSymEntry.GenSparseSymEntry": [[20, 3, 1, "", "attrib"], [20, 7, 1, "", "dtype"], [20, 3, 1, "", "entry__str__"], [20, 3, 1, "", "init"], [20, 7, 1, "", "itemsize"], [20, 7, 1, "", "layoutStr"], [20, 7, 1, "", "ndim"], [20, 7, 1, "", "nnz"], [20, 7, 1, "", "shape"], [20, 7, 1, "", "size"], [20, 3, 1, "", "toSparseSymEntry"]], "MultiTypeSymEntry.GenSymEntry": [[20, 3, 1, "", "attrib"], [20, 7, 1, "", "dtype"], [20, 3, 1, "", "entry__str__"], [20, 3, 1, "", "getSizeEstimate"], [20, 3, 1, "", "init"], [20, 7, 1, "", "itemsize"], [20, 7, 1, "", "ndim"], [20, 7, 1, "", "shape"], [20, 7, 1, "", "size"], [20, 3, 1, "", "toSymEntry"]], "MultiTypeSymEntry.GeneratorSymEntry": [[20, 7, 1, "", "etype"], [20, 7, 1, "", "generator"], [20, 3, 1, "", "init"], [20, 7, 1, "", "state"]], "MultiTypeSymEntry.SegStringSymEntry": [[20, 7, 1, "", "bytesEntry"], [20, 3, 1, "", "entry__str__"], [20, 7, 1, "", "etype"], [20, 3, 1, "", "getSizeEstimate"], [20, 3, 1, "", "init"], [20, 7, 1, "", "offsetsEntry"]], "MultiTypeSymEntry.SparseSymEntry": [[20, 7, 1, "", "a"], [20, 3, 1, "", "deinit"], [20, 7, 1, "", "dimensions"], [20, 3, 1, "", "entry__str__"], [20, 7, 1, "", "etype"], [20, 3, 1, "", "init"], [20, 7, 1, "", "matLayout"], [20, 7, 1, "", "tupShape"]], "MultiTypeSymEntry.SymEntry": [[20, 7, 1, "", "a"], [20, 3, 1, "", "aD"], [20, 3, 1, "", "deinit"], [20, 7, 1, "", "dimensions"], [20, 3, 1, "", "entry__str__"], [20, 7, 1, "", "etype"], [20, 3, 1, "", "init"], [20, 7, 1, "", "max_bits"], [20, 7, 1, "", "tupShape"]], "MultiTypeSymEntry.SymbolEntryType": [[20, 9, 1, "", "AbstractSymEntry"], [20, 9, 1, "", "AnythingSymEntry"], [20, 9, 1, "", "ComplexTypedArraySymEntry"], [20, 9, 1, "", "CompositeSymEntry"], [20, 9, 1, "", "GenSparseSymEntry"], [20, 9, 1, "", "GenSymEntry"], [20, 9, 1, "", "GeneratorSymEntry"], [20, 9, 1, "", "None"], [20, 9, 1, "", "PrimitiveTypedArraySymEntry"], [20, 9, 1, "", "SegStringSymEntry"], [20, 9, 1, "", "SparseSymEntry"], [20, 9, 1, "", "TypedArraySymEntry"], [20, 9, 1, "", "UnknownSymEntry"]], "MultiTypeSymbolTable": [[21, 1, 1, "", "SymTab"], [21, 2, 1, "", "getGenericSparseArrayEntry"], [21, 2, 1, "", "getGenericTypedArrayEntry"], [21, 2, 1, "", "getSegStringEntry"], [21, 4, 1, "", "mtLogger"]], "MultiTypeSymbolTable.SymTab": [[21, 3, 1, "", "addEntry"], [21, 3, 1, "", "attrib"], [21, 3, 1, "", "checkTable"], [21, 3, 1, "", "clear"], [21, 3, 1, "", "contains"], [21, 3, 1, "", "datarepr"], [21, 3, 1, "", "datastr"], [21, 3, 1, "", "deleteEntry"], [21, 3, 1, "", "dump"], [21, 3, 1, "", "findAll"], [21, 3, 1, "", "formatEntry"], [21, 3, 1, "", "getEntries"], [21, 3, 1, "", "info"], [21, 3, 1, "", "insert"], [21, 3, 1, "", "memUsed"], [21, 3, 1, "", "nextName"], [21, 7, 1, "", "nid"], [21, 3, 1, "", "parseJson"], [21, 3, 1, "", "pretty"], [21, 7, 1, "", "registry"], [21, 7, 1, "", "serverid"], [21, 7, 1, "", "tab"], [21, 3, 1, "", "this"]], "NumPyDType": [[22, 8, 1, "", "DTK"], [22, 8, 1, "", "DType"], [22, 2, 1, "", "bool2str"], [22, 2, 1, "", "commonDType"], [22, 2, 1, "", "divDType"], [22, 2, 1, "", "dtype2str"], [22, 2, 1, "", "dtypeSize"], [22, 2, 1, "", "str2dtype"], [22, 2, 1, "", "type2fmt"], [22, 2, 1, "", "type2str"], [22, 2, 1, "", "typeSize"], [22, 2, 1, "", "whichDtype"]], "NumPyDType.DTK": [[22, 9, 1, "", "Bool"], [22, 9, 1, "", "Complex"], [22, 9, 1, "", "Float"], [22, 9, 1, "", "Integer"], [22, 9, 1, "", "Other"]], "NumPyDType.DType": [[22, 9, 1, "", "BigInt"], [22, 9, 1, "", "Bool"], [22, 9, 1, "", "Complex128"], [22, 9, 1, "", "Complex64"], [22, 9, 1, "", "Float32"], [22, 9, 1, "", "Float64"], [22, 9, 1, "", "Int16"], [22, 9, 1, "", "Int32"], [22, 9, 1, "", "Int64"], [22, 9, 1, "", "Int8"], [22, 9, 1, "", "Strings"], [22, 9, 1, "", "UInt16"], [22, 9, 1, "", "UInt32"], [22, 9, 1, "", "UInt64"], [22, 9, 1, "", "UInt8"], [22, 9, 1, "", "UNDEF"]], "NumericUnicodes": [[23, 4, 1, "", "allNumericUnicodes"]], "RadixSortLSD": [[24, 6, 1, "", "KeysComparator"], [24, 6, 1, "", "KeysRanksComparator"], [24, 4, 1, "", "RSLSD_numTasks"], [24, 4, 1, "", "RSLSD_vv"], [24, 4, 1, "", "Tasks"], [24, 2, 1, "", "calcBlock"], [24, 2, 1, "", "calcGlobalIndex"], [24, 4, 1, "", "numTasks"], [24, 2, 1, "", "radixSortLSD"], [24, 2, 1, "", "radixSortLSD_keys"], [24, 2, 1, "", "radixSortLSD_keys_memEst"], [24, 2, 1, "", "radixSortLSD_memEst"], [24, 2, 1, "", "radixSortLSD_ranks"], [24, 4, 1, "", "rsLogger"], [24, 4, 1, "", "vv"]], "RadixSortLSD.KeysComparator": [[24, 3, 1, "", "key"]], "RadixSortLSD.KeysRanksComparator": [[24, 3, 1, "", "key"]], "RegistrationConfig": [[46, 4, 1, "", "arrayDimensionsStr"], [46, 11, 1, "", "arrayDimensionsTy"], [46, 11, 1, "", "arrayElementsTy"], [46, 4, 1, "", "registrationConfigSpec"]], "Registry": [[25, 1, 1, "", "RegTab"], [25, 4, 1, "", "regLogger"]], "Registry.RegTab": [[25, 3, 1, "", "checkAvailability"], [25, 3, 1, "", "checkTable"], [25, 3, 1, "", "contains"], [25, 3, 1, "", "list_registry"], [25, 3, 1, "", "lookup"], [25, 3, 1, "", "register_array"], [25, 3, 1, "", "register_bitvector"], [25, 3, 1, "", "register_categorical"], [25, 3, 1, "", "register_categorical_components"], [25, 3, 1, "", "register_dataframe"], [25, 3, 1, "", "register_groupby"], [25, 3, 1, "", "register_index"], [25, 3, 1, "", "register_index_components"], [25, 3, 1, "", "register_segarray"], [25, 3, 1, "", "register_segarray_components"], [25, 3, 1, "", "register_series"], [25, 7, 1, "", "registered_entries"], [25, 7, 1, "", "tab"], [25, 3, 1, "", "unregister_array"], [25, 3, 1, "", "unregister_bitvector"], [25, 3, 1, "", "unregister_categorical"], [25, 3, 1, "", "unregister_categorical_components"], [25, 3, 1, "", "unregister_dataframe"], [25, 3, 1, "", "unregister_groupby"], [25, 3, 1, "", "unregister_index"], [25, 3, 1, "", "unregister_index_components"], [25, 3, 1, "", "unregister_segarray"], [25, 3, 1, "", "unregister_segarray_components"], [25, 3, 1, "", "unregister_series"]], "Security": [[26, 2, 1, "", "generateToken"], [26, 2, 1, "", "getArkoudaToken"], [26, 2, 1, "", "setArkoudaToken"]], "SegStringSort": [[27, 6, 1, "", "StringIntComparator"], [27, 2, 1, "", "calcBlock"], [27, 2, 1, "", "calcGlobalIndex"], [27, 2, 1, "", "gatherLongStrings"], [27, 2, 1, "", "getPivot"], [27, 2, 1, "", "radixSortLSD_raw"], [27, 4, 1, "", "ssLogger"], [27, 2, 1, "", "twoPhaseStringSort"]], "SegStringSort.StringIntComparator": [[27, 3, 1, "", "keyPart"]], "SegmentedComputation": [[28, 8, 1, "", "SegFunction"], [28, 2, 1, "", "computeOnSegments"], [28, 2, 1, "", "computeSegmentOwnership"]], "SegmentedComputation.SegFunction": [[28, 9, 1, "", "SipHash128"], [28, 9, 1, "", "StringCompareLiteralEq"], [28, 9, 1, "", "StringCompareLiteralNeq"], [28, 9, 1, "", "StringIsAlphaNumeric"], [28, 9, 1, "", "StringIsAlphabetic"], [28, 9, 1, "", "StringIsDecimal"], [28, 9, 1, "", "StringIsDigit"], [28, 9, 1, "", "StringIsEmpty"], [28, 9, 1, "", "StringIsLower"], [28, 9, 1, "", "StringIsNumeric"], [28, 9, 1, "", "StringIsSpace"], [28, 9, 1, "", "StringIsTitle"], [28, 9, 1, "", "StringIsUpper"], [28, 9, 1, "", "StringSearch"], [28, 9, 1, "", "StringToNumericIgnore"], [28, 9, 1, "", "StringToNumericReturnValidity"], [28, 9, 1, "", "StringToNumericStrict"]], "SegmentedString": [[29, 2, 1, "", "!="], [29, 2, 1, "", "=="], [29, 8, 1, "", "Fixes"], [29, 4, 1, "", "NULL_STRINGS_VALUE"], [29, 1, 1, "", "SegString"], [29, 4, 1, "", "SegmentedStringUseHash"], [29, 2, 1, "", "assembleSegStringFromParts"], [29, 2, 1, "", "checkCompile"], [29, 2, 1, "", "compare"], [29, 2, 1, "", "concat"], [29, 2, 1, "", "getSegString"], [29, 2, 1, "", "in1d"], [29, 2, 1, "", "interpretAsBytes"], [29, 2, 1, "", "interpretAsString"], [29, 2, 1, "", "isNumericChar"], [29, 2, 1, "", "isNumericString"], [29, 2, 1, "", "memcmp"], [29, 2, 1, "", "segStrFull"], [29, 4, 1, "", "ssLogger"], [29, 2, 1, "", "stringBytesToUintArr"], [29, 2, 1, "", "stringCompareLiteralEq"], [29, 2, 1, "", "stringCompareLiteralNeq"], [29, 2, 1, "", "stringIsAlphaNumeric"], [29, 2, 1, "", "stringIsAlphabetic"], [29, 2, 1, "", "stringIsDecimal"], [29, 2, 1, "", "stringIsDigit"], [29, 2, 1, "", "stringIsEmpty"], [29, 2, 1, "", "stringIsLower"], [29, 2, 1, "", "stringIsNumeric"], [29, 2, 1, "", "stringIsSpace"], [29, 2, 1, "", "stringIsTitle"], [29, 2, 1, "", "stringIsUpper"], [29, 2, 1, "", "stringSearch"], [29, 2, 1, "", "unsafeCompileRegex"]], "SegmentedString.Fixes": [[29, 9, 1, "", "prefixes"], [29, 9, 1, "", "suffixes"]], "SegmentedString.SegString": [[29, 3, 1, "", "argGroup"], [29, 3, 1, "", "argsort"], [29, 3, 1, "", "bytesToUintArr"], [29, 3, 1, "", "capitalize"], [29, 7, 1, "", "composite"], [29, 3, 1, "", "ediff"], [29, 3, 1, "", "findAllMatches"], [29, 3, 1, "", "findMatchLocations"], [29, 3, 1, "", "findSubstringInBytes"], [29, 3, 1, "", "getFixes"], [29, 3, 1, "", "getLengths"], [29, 3, 1, "", "init"], [29, 3, 1, "", "isDecimal"], [29, 3, 1, "", "isLower"], [29, 3, 1, "", "isNumeric"], [29, 3, 1, "", "isSorted"], [29, 3, 1, "", "isTitle"], [29, 3, 1, "", "isUpper"], [29, 3, 1, "", "isalnum"], [29, 3, 1, "", "isalpha"], [29, 3, 1, "", "isdigit"], [29, 3, 1, "", "isempty"], [29, 3, 1, "", "isspace"], [29, 3, 1, "", "lower"], [29, 7, 1, "", "nBytes"], [29, 7, 1, "", "name"], [29, 7, 1, "", "offsets"], [29, 3, 1, "", "peel"], [29, 3, 1, "", "peelRegex"], [29, 3, 1, "", "segStrWhere"], [29, 3, 1, "", "show"], [29, 3, 1, "", "siphash"], [29, 7, 1, "", "size"], [29, 3, 1, "", "stick"], [29, 3, 1, "", "strip"], [29, 3, 1, "", "sub"], [29, 3, 1, "", "substringSearch"], [29, 3, 1, "", "this"], [29, 3, 1, "", "title"], [29, 3, 1, "", "upper"], [29, 7, 1, "", "values"]], "ServerConfig": [[30, 4, 1, "", "BSLASH"], [30, 8, 1, "", "Deployment"], [30, 4, 1, "", "ESCAPED_QUOTES"], [30, 4, 1, "", "MaxArrayDims"], [30, 8, 1, "", "ObjType"], [30, 4, 1, "", "Q"], [30, 4, 1, "", "QCQ"], [30, 4, 1, "", "RSLSD_bitsPerDigit"], [30, 4, 1, "", "ServerPort"], [30, 2, 1, "", "appendToConfigStr"], [30, 4, 1, "", "arkoudaVersion"], [30, 2, 1, "", "arrayDimIsSupported"], [30, 2, 1, "", "arrayElmTypeIsSupported"], [30, 4, 1, "", "authenticate"], [30, 4, 1, "", "autoShutdown"], [30, 4, 1, "", "chplVersionArkouda"], [30, 2, 1, "", "createConfig"], [30, 2, 1, "", "currentTime"], [30, 4, 1, "", "deployment"], [30, 2, 1, "", "getByteorder"], [30, 2, 1, "", "getChplVersion"], [30, 2, 1, "", "getConfig"], [30, 2, 1, "", "getConnectHostname"], [30, 2, 1, "", "getEnv"], [30, 2, 1, "", "getEnvInt"], [30, 2, 1, "", "getMemLimit"], [30, 2, 1, "", "getMemUsed"], [30, 2, 1, "", "getPhysicalMemHere"], [30, 2, 1, "", "get_hostname"], [30, 4, 1, "", "logChannel"], [30, 4, 1, "", "logCommands"], [30, 4, 1, "", "logLevel"], [30, 4, 1, "", "memHighWater"], [30, 2, 1, "", "overMemLimit"], [30, 4, 1, "", "perLocaleMemLimit"], [30, 4, 1, "", "pythonVersion"], [30, 4, 1, "", "regexMaxCaptures"], [30, 4, 1, "", "saveUsedModules"], [30, 4, 1, "", "scLogger"], [30, 4, 1, "", "serverConnectionInfo"], [30, 4, 1, "", "serverHostname"], [30, 4, 1, "", "serverInfoNoSplash"], [30, 4, 1, "", "trace"], [30, 4, 1, "", "usedModulesFmt"]], "ServerConfig.Deployment": [[30, 9, 1, "", "KUBERNETES"], [30, 9, 1, "", "STANDARD"]], "ServerConfig.ObjType": [[30, 9, 1, "", "ARRAYVIEW"], [30, 9, 1, "", "BITVECTOR"], [30, 9, 1, "", "CATEGORICAL"], [30, 9, 1, "", "DATAFRAME"], [30, 9, 1, "", "DATETIME"], [30, 9, 1, "", "GROUPBY"], [30, 9, 1, "", "INDEX"], [30, 9, 1, "", "IPV4"], [30, 9, 1, "", "MULTIINDEX"], [30, 9, 1, "", "PDARRAY"], [30, 9, 1, "", "SEGARRAY"], [30, 9, 1, "", "SERIES"], [30, 9, 1, "", "STRINGS"], [30, 9, 1, "", "TIMEDELTA"], [30, 9, 1, "", "UNKNOWN"]], "ServerConfig.bytes": [[30, 3, 1, "", "splitMsgToTuple"]], "ServerConfig.string": [[30, 3, 1, "", "splitMsgToTuple"]], "ServerDaemon": [[31, 1, 1, "", "ArkoudaServerDaemon"], [31, 1, 1, "", "DefaultServerDaemon"], [31, 1, 1, "", "ExternalIntegrationServerDaemon"], [31, 1, 1, "", "MetricsServerDaemon"], [31, 8, 1, "", "ServerDaemonType"], [31, 1, 1, "", "ServerStatusDaemon"], [31, 2, 1, "", "getDaemonTypes"], [31, 2, 1, "", "getServerDaemon"], [31, 2, 1, "", "getServerDaemons"], [31, 2, 1, "", "integrationEnabled"], [31, 2, 1, "", "metricsEnabled"], [31, 2, 1, "", "multipleServerDaemons"], [31, 2, 1, "", "register"], [31, 4, 1, "", "sdLogger"], [31, 4, 1, "", "serverDaemonTypes"]], "ServerDaemon.ArkoudaServerDaemon": [[31, 3, 1, "", "extractRequest"], [31, 7, 1, "", "port"], [31, 3, 1, "", "requestShutdown"], [31, 3, 1, "", "run"], [31, 3, 1, "", "shutdown"], [31, 7, 1, "", "shutdownDaemon"], [31, 7, 1, "", "st"]], "ServerDaemon.DefaultServerDaemon": [[31, 7, 1, "", "activityMutex"], [31, 7, 1, "", "arkDirectory"], [31, 3, 1, "", "authenticateUser"], [31, 7, 1, "", "connectUrl"], [31, 7, 1, "", "context"], [31, 3, 1, "", "createServerConnectionInfo"], [31, 3, 1, "", "deleteServerConnectionInfo"], [31, 3, 1, "", "getConnectUrl"], [31, 3, 1, "", "getErrorName"], [31, 7, 1, "", "idlePeriodStart"], [31, 3, 1, "", "init"], [31, 3, 1, "", "initArkoudaDirectory"], [31, 3, 1, "", "printServerSplashMessage"], [31, 3, 1, "", "processErrorMessageMetrics"], [31, 3, 1, "", "processMetrics"], [31, 3, 1, "", "registerServerCommands"], [31, 7, 1, "", "repCount"], [31, 7, 1, "", "reqCount"], [31, 3, 1, "", "requestShutdown"], [31, 3, 1, "", "run"], [31, 7, 1, "", "seenNotableActivity"], [31, 3, 1, "", "sendRepMsg"], [31, 3, 1, "", "serverActivityMark"], [31, 3, 1, "", "serverIdleStart"], [31, 3, 1, "", "serverIdleStop"], [31, 7, 1, "", "serverToken"], [31, 3, 1, "", "shutdown"], [31, 7, 1, "", "socket"], [31, 3, 1, "", "startAsyncCheckpointTask"], [31, 3, 1, "", "waitForActivityMutex"]], "ServerDaemon.ExternalIntegrationServerDaemon": [[31, 3, 1, "", "run"], [31, 3, 1, "", "shutdown"]], "ServerDaemon.MetricsServerDaemon": [[31, 7, 1, "", "context"], [31, 3, 1, "", "init"], [31, 3, 1, "", "run"], [31, 7, 1, "", "socket"]], "ServerDaemon.ServerDaemonType": [[31, 9, 1, "", "DEFAULT"], [31, 9, 1, "", "INTEGRATION"], [31, 9, 1, "", "METRICS"], [31, 9, 1, "", "STATUS"]], "ServerDaemon.ServerStatusDaemon": [[31, 7, 1, "", "context"], [31, 3, 1, "", "init"], [31, 3, 1, "", "run"], [31, 7, 1, "", "socket"]], "ServerErrorStrings": [[32, 1, 1, "", "ErrorWithMsg"], [32, 2, 1, "", "incompatibleArgumentsError"], [32, 2, 1, "", "notImplementedError"], [32, 2, 1, "", "unknownError"], [32, 2, 1, "", "unknownSymbolError"], [32, 2, 1, "", "unrecognizedTypeError"], [32, 2, 1, "", "unsupportedTypeError"]], "ServerErrorStrings.ErrorWithMsg": [[32, 7, 1, "", "msg"]], "ServerErrors": [[33, 1, 1, "", "ArgumentError"], [33, 1, 1, "", "ConfigurationError"], [33, 1, 1, "", "DatasetNotFoundError"], [33, 1, 1, "", "ErrorWithContext"], [33, 1, 1, "", "HDF5FileFormatError"], [33, 1, 1, "", "IOError"], [33, 1, 1, "", "MismatchedAppendError"], [33, 1, 1, "", "NotHDF5FileError"], [33, 1, 1, "", "NotImplementedError"], [33, 1, 1, "", "OutOfBoundsError"], [33, 1, 1, "", "OverMemoryLimitError"], [33, 1, 1, "", "SegStringError"], [33, 1, 1, "", "UnknownSymbolError"], [33, 1, 1, "", "UnsupportedOSError"], [33, 1, 1, "", "WriteModeError"], [33, 2, 1, "", "generateErrorContext"], [33, 2, 1, "", "getErrorWithContext"]], "ServerErrors.ArgumentError": [[33, 3, 1, "", "init"]], "ServerErrors.ConfigurationError": [[33, 3, 1, "", "init"]], "ServerErrors.DatasetNotFoundError": [[33, 3, 1, "", "init"]], "ServerErrors.ErrorWithContext": [[33, 7, 1, "", "errorClass"], [33, 3, 1, "", "init"], [33, 7, 1, "", "lineNumber"], [33, 7, 1, "", "moduleName"], [33, 3, 1, "", "publish"], [33, 7, 1, "", "publishMsg"], [33, 7, 1, "", "routineName"]], "ServerErrors.HDF5FileFormatError": [[33, 3, 1, "", "init"]], "ServerErrors.IOError": [[33, 3, 1, "", "init"]], "ServerErrors.MismatchedAppendError": [[33, 3, 1, "", "init"]], "ServerErrors.NotHDF5FileError": [[33, 3, 1, "", "init"]], "ServerErrors.NotImplementedError": [[33, 3, 1, "", "init"]], "ServerErrors.OverMemoryLimitError": [[33, 3, 1, "", "init"]], "ServerErrors.SegStringError": [[33, 3, 1, "", "init"]], "ServerErrors.UnknownSymbolError": [[33, 3, 1, "", "init"]], "ServerErrors.UnsupportedOSError": [[33, 3, 1, "", "init"]], "ServerErrors.WriteModeError": [[33, 3, 1, "", "init"]], "SipHash": [[34, 4, 1, "", "cROUNDS"], [34, 4, 1, "", "dROUNDS"], [34, 4, 1, "", "shLogger"], [34, 2, 1, "", "sipHash128"], [34, 2, 1, "", "sipHash64"]], "SparseMatrix": [[35, 2, 1, "", "addElementsToSparseArray"], [35, 2, 1, "", "colMajorExScan"], [35, 2, 1, "", "denseMatMatMult"], [35, 2, 1, "", "fillSparseMatrix"], [35, 2, 1, "", "getGrid"], [35, 2, 1, "", "getLSA"], [35, 2, 1, "", "getLSD"], [35, 2, 1, "", "randSparseMatrix"], [35, 2, 1, "", "rowMajorExScan"], [35, 2, 1, "", "sparseMatFromArrays"], [35, 2, 1, "", "sparseMatMatMult"], [35, 2, 1, "", "sparseMatToPdarray"]], "SpsMatUtil": [[36, 8, 1, "", "Layout"], [36, 2, 1, "", "emptySparseDomLike"], [36, 2, 1, "", "makeSparseMat"], [36, 1, 1, "", "merge"], [36, 4, 1, "", "rands"], [36, 4, 1, "", "seed"], [36, 6, 1, "", "sparseMatDat"], [36, 2, 1, "", "writeSparseMatrix"]], "SpsMatUtil.Layout": [[36, 9, 1, "", "CSC"], [36, 9, 1, "", "CSR"]], "SpsMatUtil.merge": [[36, 3, 1, "", "accumulate"], [36, 3, 1, "", "accumulateOntoState"], [36, 3, 1, "", "clone"], [36, 3, 1, "", "combine"], [36, 7, 1, "", "eltType"], [36, 3, 1, "", "generate"], [36, 3, 1, "", "identity"], [36, 7, 1, "", "value"]], "SpsMatUtil.sparseMatDat": [[36, 3, 1, "", "add"]], "StatusMsg": [[37, 2, 1, "", "getMemoryStatusMsg"], [37, 4, 1, "", "sLogger"]], "SymArrayDmap": [[38, 8, 1, "", "Dmap"], [38, 4, 1, "", "MyDmap"], [38, 2, 1, "", "makeDistArray"], [38, 2, 1, "", "makeDistDom"], [38, 2, 1, "", "makeDistDomType"], [38, 2, 1, "", "makeSparseArray"], [38, 2, 1, "", "makeSparseDomain"]], "SymArrayDmap.Dmap": [[38, 9, 1, "", "blockDist"], [38, 9, 1, "", "defaultRectangular"]], "Unique": [[39, 4, 1, "", "uLogger"], [39, 2, 1, "", "uniqueFromSorted"], [39, 2, 1, "", "uniqueFromTruth"], [39, 2, 1, "", "uniqueGroup"], [39, 2, 1, "", "uniqueSort"], [39, 2, 1, "", "uniqueSortWithInverse"]], "arkouda_server": [[40, 4, 1, "", "asLogger"], [40, 2, 1, "", "main"]]}, "objtypes": {"0": "chpl:module", "1": "chpl:class", "2": "chpl:function", "3": "chpl:method", "4": "chpl:data", "5": "chpl:iterfunction", "6": "chpl:record", "7": "chpl:attribute", "8": "chpl:enum", "9": "chpl:enumconstant", "10": "chpl:itermethod", "11": "chpl:type"}, "objnames": {"0": ["chpl", "module", " module"], "1": ["chpl", "class", " class"], "2": ["chpl", "function", " function"], "3": ["chpl", "method", " method"], "4": ["chpl", "data", " data"], "5": ["chpl", "iterfunction", " iterfunction"], "6": ["chpl", "record", " record"], "7": ["chpl", "attribute", " attribute"], "8": ["chpl", "enum", " enum"], "9": ["chpl", "enumconstant", " enumconstant"], "10": ["chpl", "itermethod", " itermethod"], "11": ["chpl", "type", " type"]}, "titleterms": {"chpldoc": 0, "document": 0, "indic": 0, "tabl": 0, "aryutil": 1, "bigintmsg": 2, "cast": 3, "commaggreg": 4, "bigintegeraggreg": 5, "commprimit": 6, "commandmap": 7, "dynamicsort": 8, "externalintegr": 9, "fileio": 10, "gensymio": 11, "ioutil": 12, "in1d": 13, "log": 14, "memorymgmt": 15, "messag": 16, "metricsmsg": 17, "msgprocess": 18, "multityperegentri": 19, "multitypesymentri": 20, "multitypesymbolt": 21, "numpydtyp": 22, "numericunicod": 23, "radixsortlsd": 24, "registri": 25, "secur": 26, "segstringsort": 27, "segmentedcomput": 28, "segmentedstr": 29, "serverconfig": 30, "serverdaemon": 31, "servererrorstr": 32, "servererror": 33, "siphash": 34, "sparsematrix": 35, "spsmatutil": 36, "statusmsg": 37, "symarraydmap": 38, "uniqu": 39, "arkouda_serv": 40, "arkoudajsoncompat": 41, "arkoudapythoncompat": 42, "arkoudasortcompat": 43, "arkoudasparsematrixcompat": 44, "arkoudatimecompat": 45, "registrationconfig": 46}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"chpldoc documentation": [[0, "chpldoc-documentation"]], "Indices and tables": [[0, "indices-and-tables"]], "AryUtil": [[1, "aryutil"]], "BigIntMsg": [[2, "bigintmsg"]], "Cast": [[3, "cast"]], "CommAggregation": [[4, "commaggregation"]], "BigIntegerAggregation": [[5, "bigintegeraggregation"]], "CommPrimitives": [[6, "commprimitives"]], "CommandMap": [[7, "commandmap"]], "DynamicSort": [[8, "dynamicsort"]], "ExternalIntegration": [[9, "externalintegration"]], "FileIO": [[10, "fileio"]], "GenSymIO": [[11, "gensymio"]], "IOUtils": [[12, "ioutils"]], "In1d": [[13, "in1d"]], "Logging": [[14, "logging"]], "MemoryMgmt": [[15, "memorymgmt"]], "Message": [[16, "message"]], "MetricsMsg": [[17, "metricsmsg"]], "MsgProcessing": [[18, "msgprocessing"]], "MultiTypeRegEntry": [[19, "multityperegentry"]], "MultiTypeSymEntry": [[20, "multitypesymentry"]], "MultiTypeSymbolTable": [[21, "multitypesymboltable"]], "NumPyDType": [[22, "numpydtype"]], "NumericUnicodes": [[23, "numericunicodes"]], "RadixSortLSD": [[24, "radixsortlsd"]], "Registry": [[25, "registry"]], "Security": [[26, "security"]], "SegStringSort": [[27, "segstringsort"]], "SegmentedComputation": [[28, "segmentedcomputation"]], "SegmentedString": [[29, "segmentedstring"]], "ServerConfig": [[30, "serverconfig"]], "ServerDaemon": [[31, "serverdaemon"]], "ServerErrorStrings": [[32, "servererrorstrings"]], "ServerErrors": [[33, "servererrors"]], "SipHash": [[34, "siphash"]], "SparseMatrix": [[35, "sparsematrix"]], "SpsMatUtil": [[36, "spsmatutil"]], "StatusMsg": [[37, "statusmsg"]], "SymArrayDmap": [[38, "symarraydmap"]], "Unique": [[39, "unique"]], "arkouda_server": [[40, "arkouda-server"]], "ArkoudaJSONCompat": [[41, "arkoudajsoncompat"]], "ArkoudaPythonCompat": [[42, "arkoudapythoncompat"]], "ArkoudaSortCompat": [[43, "arkoudasortcompat"]], "ArkoudaSparseMatrixCompat": [[44, "arkoudasparsematrixcompat"]], "ArkoudaTimeCompat": [[45, "arkoudatimecompat"]], "RegistrationConfig": [[46, "registrationconfig"]]}, "indexentries": {"aryutil (module)": [[1, "module-AryUtil"]], "astats() (in module aryutil)": [[1, "AryUtil.aStats"]], "accumranksizes (aryutil.orderer attribute)": [[1, "AryUtil.orderer.accumRankSizes"]], "appendaxis() (in module aryutil)": [[1, "AryUtil.appendAxis"]], "aulogger (in module aryutil)": [[1, "AryUtil.auLogger"]], "axisslices() (in module aryutil)": [[1, "AryUtil.axisSlices"]], "bitsperdigit (in module aryutil)": [[1, "AryUtil.bitsPerDigit"]], "broadcastshape() (in module aryutil)": [[1, "AryUtil.broadcastShape"]], "concatarrays() (in module aryutil)": [[1, "AryUtil.concatArrays"]], "contiguousindices() (in module aryutil)": [[1, "AryUtil.contiguousIndices"]], "deinit() (aryutil.lowlevellocalizingslice method)": [[1, "AryUtil.lowLevelLocalizingSlice.deinit"]], "domoffaxis() (in module aryutil)": [[1, "AryUtil.domOffAxis"]], "domonaxis() (in module aryutil)": [[1, "AryUtil.domOnAxis"]], "filluniform() (in module aryutil)": [[1, "AryUtil.fillUniform"]], "flatten() (in module aryutil)": [[1, "AryUtil.flatten"]], "formatary() (in module aryutil)": [[1, "AryUtil.formatAry"]], "getbitwidth() (in module aryutil)": [[1, "AryUtil.getBitWidth"]], "getdigit() (in module aryutil)": [[1, "AryUtil.getDigit"]], "getnumdigitsnumericarrays() (in module aryutil)": [[1, "AryUtil.getNumDigitsNumericArrays"]], "indextoorder() (aryutil.orderer method)": [[1, "AryUtil.orderer.indexToOrder"]], "init() (aryutil.lowlevellocalizingslice method)": [[1, "AryUtil.lowLevelLocalizingSlice.init"]], "init() (aryutil.orderer method)": [[1, "AryUtil.orderer.init"]], "isowned (aryutil.lowlevellocalizingslice attribute)": [[1, "AryUtil.lowLevelLocalizingSlice.isOwned"]], "issorted() (in module aryutil)": [[1, "AryUtil.isSorted"]], "issortedover() (in module aryutil)": [[1, "AryUtil.isSortedOver"]], "lowlevellocalizingslice (record in aryutil)": [[1, "AryUtil.lowLevelLocalizingSlice"]], "mergenumericarrays() (in module aryutil)": [[1, "AryUtil.mergeNumericArrays"]], "offset() (in module aryutil)": [[1, "AryUtil.offset"]], "orderer (record in aryutil)": [[1, "AryUtil.orderer"]], "printary() (in module aryutil)": [[1, "AryUtil.printAry"]], "printownership() (in module aryutil)": [[1, "AryUtil.printOwnership"]], "printthresh (in module aryutil)": [[1, "AryUtil.printThresh"]], "ptr (aryutil.lowlevellocalizingslice attribute)": [[1, "AryUtil.lowLevelLocalizingSlice.ptr"]], "rank (aryutil.orderer attribute)": [[1, "AryUtil.orderer.rank"]], "reducedshape() (in module aryutil)": [[1, "AryUtil.reducedShape"]], "removeaxis() (in module aryutil)": [[1, "AryUtil.removeAxis"]], "removedegenranks() (in module aryutil)": [[1, "AryUtil.removeDegenRanks"]], "subdomchunk() (in module aryutil)": [[1, "AryUtil.subDomChunk"]], "t (aryutil.lowlevellocalizingslice attribute)": [[1, "AryUtil.lowLevelLocalizingSlice.t"]], "unflatten() (in module aryutil)": [[1, "AryUtil.unflatten"]], "validatearrayssamelength() (in module aryutil)": [[1, "AryUtil.validateArraysSameLength"]], "validatenegativeaxes() (in module aryutil)": [[1, "AryUtil.validateNegativeAxes"]], "bigintmsg (module)": [[2, "module-BigIntMsg"]], "bilogger (in module bigintmsg)": [[2, "BigIntMsg.biLogger"]], "bigintcreationmsg() (in module bigintmsg)": [[2, "BigIntMsg.bigIntCreationMsg"]], "biginttouintarraysmsg() (in module bigintmsg)": [[2, "BigIntMsg.bigintToUintArraysMsg"]], "getmaxbitsmsg() (in module bigintmsg)": [[2, "BigIntMsg.getMaxBitsMsg"]], "setmaxbitsmsg() (in module bigintmsg)": [[2, "BigIntMsg.setMaxBitsMsg"]], "cast (module)": [[3, "module-Cast"]], "errormode (enum in cast)": [[3, "Cast.ErrorMode"]], "castgensymentrytostring() (in module cast)": [[3, "Cast.castGenSymEntryToString"]], "castlogger (in module cast)": [[3, "Cast.castLogger"]], "caststringtobigint() (in module cast)": [[3, "Cast.castStringToBigInt"]], "caststringtosymentry() (in module cast)": [[3, "Cast.castStringToSymEntry"]], "stringtonumericignore() (in module cast)": [[3, "Cast.stringToNumericIgnore"]], "stringtonumericreturnvalidity() (in module cast)": [[3, "Cast.stringToNumericReturnValidity"]], "stringtonumericstrict() (in module cast)": [[3, "Cast.stringToNumericStrict"]], "commaggregation (module)": [[4, "module-CommAggregation"]], "dstaggregator (record in commaggregation)": [[4, "CommAggregation.DstAggregator"]], "dstunorderedaggregator (record in commaggregation)": [[4, "CommAggregation.DstUnorderedAggregator"]], "get() (commaggregation.remotebuffer method)": [[4, "CommAggregation.remoteBuffer.GET"]], "put() (commaggregation.remotebuffer method)": [[4, "CommAggregation.remoteBuffer.PUT"]], "srcaggregator (record in commaggregation)": [[4, "CommAggregation.SrcAggregator"]], "srcunorderedaggregator (record in commaggregation)": [[4, "CommAggregation.SrcUnorderedAggregator"]], "aggtype (commaggregation.dstaggregator attribute)": [[4, "CommAggregation.DstAggregator.aggType"]], "aggtype (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.aggType"]], "bufferidxalloc() (in module commaggregation)": [[4, "CommAggregation.bufferIdxAlloc"]], "bufferidxs (commaggregation.dstaggregator attribute)": [[4, "CommAggregation.DstAggregator.bufferIdxs"]], "bufferidxs (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.bufferIdxs"]], "buffersize (commaggregation.dstaggregator attribute)": [[4, "CommAggregation.DstAggregator.bufferSize"]], "buffersize (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.bufferSize"]], "cachedalloc() (commaggregation.remotebuffer method)": [[4, "CommAggregation.remoteBuffer.cachedAlloc"]], "copy() (commaggregation.dstaggregator method)": [[4, "CommAggregation.DstAggregator.copy"]], "copy() (commaggregation.dstunorderedaggregator method)": [[4, "CommAggregation.DstUnorderedAggregator.copy"]], "copy() (commaggregation.srcaggregator method)": [[4, "CommAggregation.SrcAggregator.copy"]], "copy() (commaggregation.srcunorderedaggregator method)": [[4, "CommAggregation.SrcUnorderedAggregator.copy"]], "data (commaggregation.remotebuffer attribute)": [[4, "CommAggregation.remoteBuffer.data"]], "deinit() (commaggregation.dstaggregator method)": [[4, "CommAggregation.DstAggregator.deinit"]], "deinit() (commaggregation.dstunorderedaggregator method)": [[4, "CommAggregation.DstUnorderedAggregator.deinit"]], "deinit() (commaggregation.srcaggregator method)": [[4, "CommAggregation.SrcAggregator.deinit"]], "deinit() (commaggregation.srcunorderedaggregator method)": [[4, "CommAggregation.SrcUnorderedAggregator.deinit"]], "deinit() (commaggregation.remotebuffer method)": [[4, "CommAggregation.remoteBuffer.deinit"]], "dstaddrs (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.dstAddrs"]], "elemtype (commaggregation.dstaggregator attribute)": [[4, "CommAggregation.DstAggregator.elemType"]], "elemtype (commaggregation.dstunorderedaggregator attribute)": [[4, "CommAggregation.DstUnorderedAggregator.elemType"]], "elemtype (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.elemType"]], "elemtype (commaggregation.srcunorderedaggregator attribute)": [[4, "CommAggregation.SrcUnorderedAggregator.elemType"]], "elemtype (commaggregation.remotebuffer attribute)": [[4, "CommAggregation.remoteBuffer.elemType"]], "flush() (commaggregation.dstaggregator method)": [[4, "CommAggregation.DstAggregator.flush"]], "flush() (commaggregation.dstunorderedaggregator method)": [[4, "CommAggregation.DstUnorderedAggregator.flush"]], "flush() (commaggregation.srcaggregator method)": [[4, "CommAggregation.SrcAggregator.flush"]], "flush() (commaggregation.srcunorderedaggregator method)": [[4, "CommAggregation.SrcUnorderedAggregator.flush"]], "flushbuffer() (commaggregation.dstaggregator method)": [[4, "CommAggregation.DstAggregator.flushBuffer"]], "flushbuffer() (commaggregation.srcaggregator method)": [[4, "CommAggregation.SrcAggregator.flushBuffer"]], "lbuffers (commaggregation.dstaggregator attribute)": [[4, "CommAggregation.DstAggregator.lBuffers"]], "lsrcaddrs (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.lSrcAddrs"]], "lsrcvals (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.lSrcVals"]], "lastlocale (commaggregation.dstaggregator attribute)": [[4, "CommAggregation.DstAggregator.lastLocale"]], "lastlocale (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.lastLocale"]], "loc (commaggregation.remotebuffer attribute)": [[4, "CommAggregation.remoteBuffer.loc"]], "localfree() (commaggregation.remotebuffer method)": [[4, "CommAggregation.remoteBuffer.localFree"]], "localiter() (commaggregation.remotebuffer iterator)": [[4, "CommAggregation.remoteBuffer.localIter"]], "markfreed() (commaggregation.remotebuffer method)": [[4, "CommAggregation.remoteBuffer.markFreed"]], "mylocalespace (commaggregation.dstaggregator attribute)": [[4, "CommAggregation.DstAggregator.myLocaleSpace"]], "mylocalespace (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.myLocaleSpace"]], "newdstaggregator() (in module commaggregation)": [[4, "CommAggregation.newDstAggregator"]], "newsrcaggregator() (in module commaggregation)": [[4, "CommAggregation.newSrcAggregator"]], "opsuntilyield (commaggregation.dstaggregator attribute)": [[4, "CommAggregation.DstAggregator.opsUntilYield"]], "opsuntilyield (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.opsUntilYield"]], "postinit() (commaggregation.dstaggregator method)": [[4, "CommAggregation.DstAggregator.postinit"]], "postinit() (commaggregation.srcaggregator method)": [[4, "CommAggregation.SrcAggregator.postinit"]], "rbuffers (commaggregation.dstaggregator attribute)": [[4, "CommAggregation.DstAggregator.rBuffers"]], "rsrcaddrs (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.rSrcAddrs"]], "rsrcvals (commaggregation.srcaggregator attribute)": [[4, "CommAggregation.SrcAggregator.rSrcVals"]], "remotebuffer (record in commaggregation)": [[4, "CommAggregation.remoteBuffer"]], "size (commaggregation.remotebuffer attribute)": [[4, "CommAggregation.remoteBuffer.size"]], "bigintegeraggregation (module)": [[5, "module-BigIntegerAggregation"]], "dstaggregatorbigint (record in bigintegeraggregation)": [[5, "BigIntegerAggregation.DstAggregatorBigint"]], "srcaggregatorbigint (record in bigintegeraggregation)": [[5, "BigIntegerAggregation.SrcAggregatorBigint"]], "aggtype (bigintegeraggregation.dstaggregatorbigint attribute)": [[5, "BigIntegerAggregation.DstAggregatorBigint.aggType"]], "aggtype (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.aggType"]], "bufferidxs (bigintegeraggregation.dstaggregatorbigint attribute)": [[5, "BigIntegerAggregation.DstAggregatorBigint.bufferIdxs"]], "bufferidxs (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.bufferIdxs"]], "buffersize (bigintegeraggregation.dstaggregatorbigint attribute)": [[5, "BigIntegerAggregation.DstAggregatorBigint.bufferSize"]], "buffersize (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.bufferSize"]], "copy() (bigintegeraggregation.dstaggregatorbigint method)": [[5, "BigIntegerAggregation.DstAggregatorBigint.copy"]], "copy() (bigintegeraggregation.srcaggregatorbigint method)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.copy"]], "deinit() (bigintegeraggregation.dstaggregatorbigint method)": [[5, "BigIntegerAggregation.DstAggregatorBigint.deinit"]], "deinit() (bigintegeraggregation.srcaggregatorbigint method)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.deinit"]], "deserializefrom() (bigintegeraggregation.bigint method)": [[5, "BigIntegerAggregation.bigint.deserializeFrom"]], "dstaddrs (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.dstAddrs"]], "flush() (bigintegeraggregation.dstaggregatorbigint method)": [[5, "BigIntegerAggregation.DstAggregatorBigint.flush"]], "flush() (bigintegeraggregation.srcaggregatorbigint method)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.flush"]], "flushbuffer() (bigintegeraggregation.dstaggregatorbigint method)": [[5, "BigIntegerAggregation.DstAggregatorBigint.flushBuffer"]], "flushbuffer() (bigintegeraggregation.srcaggregatorbigint method)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.flushBuffer"]], "lbuffers (bigintegeraggregation.dstaggregatorbigint attribute)": [[5, "BigIntegerAggregation.DstAggregatorBigint.lBuffers"]], "lsrcaddrs (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.lSrcAddrs"]], "lsrcvals (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.lSrcVals"]], "lastlocale (bigintegeraggregation.dstaggregatorbigint attribute)": [[5, "BigIntegerAggregation.DstAggregatorBigint.lastLocale"]], "lastlocale (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.lastLocale"]], "mylocalespace (bigintegeraggregation.dstaggregatorbigint attribute)": [[5, "BigIntegerAggregation.DstAggregatorBigint.myLocaleSpace"]], "mylocalespace (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.myLocaleSpace"]], "opsuntilyield (bigintegeraggregation.dstaggregatorbigint attribute)": [[5, "BigIntegerAggregation.DstAggregatorBigint.opsUntilYield"]], "opsuntilyield (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.opsUntilYield"]], "postinit() (bigintegeraggregation.dstaggregatorbigint method)": [[5, "BigIntegerAggregation.DstAggregatorBigint.postinit"]], "postinit() (bigintegeraggregation.srcaggregatorbigint method)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.postinit"]], "rbuffers (bigintegeraggregation.dstaggregatorbigint attribute)": [[5, "BigIntegerAggregation.DstAggregatorBigint.rBuffers"]], "rsrcaddrs (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.rSrcAddrs"]], "rsrcvals (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.rSrcVals"]], "serializeinto() (bigintegeraggregation.bigint method)": [[5, "BigIntegerAggregation.bigint.serializeInto"]], "serializedsize() (bigintegeraggregation.bigint method)": [[5, "BigIntegerAggregation.bigint.serializedSize"]], "uintbuffersize (bigintegeraggregation.srcaggregatorbigint attribute)": [[5, "BigIntegerAggregation.SrcAggregatorBigint.uintBufferSize"]], "commprimitives (module)": [[6, "module-CommPrimitives"]], "getaddr() (in module commprimitives)": [[6, "CommPrimitives.getAddr"]], "commandmap (module)": [[7, "module-CommandMap"]], "akmsgsign() (in module commandmap)": [[7, "CommandMap.akMsgSign"]], "commandmap (in module commandmap)": [[7, "CommandMap.commandMap"]], "dumpcommandmap() (in module commandmap)": [[7, "CommandMap.dumpCommandMap"]], "emptystartasynccheckpointdaemon() (in module commandmap)": [[7, "CommandMap.emptyStartAsyncCheckpointDaemon"]], "executecommand() (in module commandmap)": [[7, "CommandMap.executeCommand"]], "funstartasynccheckpointdaemon (in module commandmap)": [[7, "CommandMap.funStartAsyncCheckpointDaemon"]], "modulemap (in module commandmap)": [[7, "CommandMap.moduleMap"]], "registerfunction() (in module commandmap)": [[7, "CommandMap.registerFunction"]], "usedmodules (in module commandmap)": [[7, "CommandMap.usedModules"]], "writeusedmodules() (in module commandmap)": [[7, "CommandMap.writeUsedModules"]], "writeusedmodulesjson() (in module commandmap)": [[7, "CommandMap.writeUsedModulesJson"]], "dynamicsort (module)": [[8, "module-DynamicSort"]], "dynamictwoarrayradixsort() (in module dynamicsort)": [[8, "DynamicSort.dynamicTwoArrayRadixSort"]], "curlinfo_response_code (in module externalintegration)": [[9, "ExternalIntegration.CURLINFO_RESPONSE_CODE"]], "curlopt_cainfo (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_CAINFO"]], "curlopt_capath (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_CAPATH"]], "curlopt_customrequest (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_CUSTOMREQUEST"]], "curlopt_failonerror (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_FAILONERROR"]], "curlopt_httpheader (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_HTTPHEADER"]], "curlopt_keypasswd (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_KEYPASSWD"]], "curlopt_password (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_PASSWORD"]], "curlopt_postfields (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_POSTFIELDS"]], "curlopt_sslcert (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_SSLCERT"]], "curlopt_sslcerttype (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_SSLCERTTYPE"]], "curlopt_sslkey (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_SSLKEY"]], "curlopt_ssl_verifypeer (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_SSL_VERIFYPEER"]], "curlopt_url (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_URL"]], "curlopt_username (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_USERNAME"]], "curlopt_use_ssl (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_USE_SSL"]], "curlopt_verbose (in module externalintegration)": [[9, "ExternalIntegration.CURLOPT_VERBOSE"]], "channel (class in externalintegration)": [[9, "ExternalIntegration.Channel"]], "channeltype (enum in externalintegration)": [[9, "ExternalIntegration.ChannelType"]], "externalintegration (module)": [[9, "module-ExternalIntegration"]], "filechannel (class in externalintegration)": [[9, "ExternalIntegration.FileChannel"]], "httpchannel (class in externalintegration)": [[9, "ExternalIntegration.HttpChannel"]], "httprequestformat (enum in externalintegration)": [[9, "ExternalIntegration.HttpRequestFormat"]], "httprequesttype (enum in externalintegration)": [[9, "ExternalIntegration.HttpRequestType"]], "httpschannel (class in externalintegration)": [[9, "ExternalIntegration.HttpsChannel"]], "serviceendpoint (enum in externalintegration)": [[9, "ExternalIntegration.ServiceEndpoint"]], "systemtype (enum in externalintegration)": [[9, "ExternalIntegration.SystemType"]], "append (externalintegration.filechannel attribute)": [[9, "ExternalIntegration.FileChannel.append"]], "cacert (externalintegration.httpschannel attribute)": [[9, "ExternalIntegration.HttpsChannel.caCert"]], "configurechannel() (externalintegration.httpchannel method)": [[9, "ExternalIntegration.HttpChannel.configureChannel"]], "configurechannel() (externalintegration.httpschannel method)": [[9, "ExternalIntegration.HttpsChannel.configureChannel"]], "deregisterfromexternalsystem() (in module externalintegration)": [[9, "ExternalIntegration.deregisterFromExternalSystem"]], "deregisterfromkubernetes() (in module externalintegration)": [[9, "ExternalIntegration.deregisterFromKubernetes"]], "eilogger (in module externalintegration)": [[9, "ExternalIntegration.eiLogger"]], "generateheader() (externalintegration.httpchannel method)": [[9, "ExternalIntegration.HttpChannel.generateHeader"]], "generateheader() (externalintegration.httpschannel method)": [[9, "ExternalIntegration.HttpsChannel.generateHeader"]], "getconnecthostip() (in module externalintegration)": [[9, "ExternalIntegration.getConnectHostIp"]], "getkubernetesderegisterparameters() (in module externalintegration)": [[9, "ExternalIntegration.getKubernetesDeregisterParameters"]], "getkubernetesregistrationparameters() (in module externalintegration)": [[9, "ExternalIntegration.getKubernetesRegistrationParameters"]], "init() (externalintegration.filechannel method)": [[9, "ExternalIntegration.FileChannel.init"]], "init() (externalintegration.httpchannel method)": [[9, "ExternalIntegration.HttpChannel.init"]], "init() (externalintegration.httpschannel method)": [[9, "ExternalIntegration.HttpsChannel.init"]], "path (externalintegration.filechannel attribute)": [[9, "ExternalIntegration.FileChannel.path"]], "registerwithexternalsystem() (in module externalintegration)": [[9, "ExternalIntegration.registerWithExternalSystem"]], "registerwithkubernetes() (in module externalintegration)": [[9, "ExternalIntegration.registerWithKubernetes"]], "requestformat (externalintegration.httpchannel attribute)": [[9, "ExternalIntegration.HttpChannel.requestFormat"]], "requesttype (externalintegration.httpchannel attribute)": [[9, "ExternalIntegration.HttpChannel.requestType"]], "token (externalintegration.httpschannel attribute)": [[9, "ExternalIntegration.HttpsChannel.token"]], "url (externalintegration.httpchannel attribute)": [[9, "ExternalIntegration.HttpChannel.url"]], "write() (externalintegration.channel method)": [[9, "ExternalIntegration.Channel.write"]], "write() (externalintegration.filechannel method)": [[9, "ExternalIntegration.FileChannel.write"]], "write() (externalintegration.httpchannel method)": [[9, "ExternalIntegration.HttpChannel.write"]], "fileio (module)": [[10, "module-FileIO"]], "filetype (enum in fileio)": [[10, "FileIO.FileType"]], "magic_arrow (in module fileio)": [[10, "FileIO.MAGIC_ARROW"]], "magic_csv (in module fileio)": [[10, "FileIO.MAGIC_CSV"]], "magic_hdf5 (in module fileio)": [[10, "FileIO.MAGIC_HDF5"]], "magic_parquet (in module fileio)": [[10, "FileIO.MAGIC_PARQUET"]], "appendfile() (in module fileio)": [[10, "FileIO.appendFile"]], "deletefile() (in module fileio)": [[10, "FileIO.deleteFile"]], "deletematchingfilenames() (in module fileio)": [[10, "FileIO.deleteMatchingFilenames"]], "deletematchingfilenamesmsg() (in module fileio)": [[10, "FileIO.deleteMatchingFilenamesMsg"]], "delimitedfiletomap() (in module fileio)": [[10, "FileIO.delimitedFileToMap"]], "domain_intersection() (in module fileio)": [[10, "FileIO.domain_intersection"]], "ensureclose() (in module fileio)": [[10, "FileIO.ensureClose"]], "fiologger (in module fileio)": [[10, "FileIO.fioLogger"]], "generatefilename() (in module fileio)": [[10, "FileIO.generateFilename"]], "generatefilenames() (in module fileio)": [[10, "FileIO.generateFilenames"]], "getfilemetadata() (in module fileio)": [[10, "FileIO.getFileMetadata"]], "getfiletype() (in module fileio)": [[10, "FileIO.getFileType"]], "getfiletypebymagic() (in module fileio)": [[10, "FileIO.getFileTypeByMagic"]], "getfiletypemsg() (in module fileio)": [[10, "FileIO.getFileTypeMsg"]], "getfirsteightbytesfromfile() (in module fileio)": [[10, "FileIO.getFirstEightBytesFromFile"]], "getlinefromfile() (in module fileio)": [[10, "FileIO.getLineFromFile"]], "getmatchingfilenames() (in module fileio)": [[10, "FileIO.getMatchingFilenames"]], "globexpansionmsg() (in module fileio)": [[10, "FileIO.globExpansionMsg"]], "initdirectory() (in module fileio)": [[10, "FileIO.initDirectory"]], "isglobpattern() (in module fileio)": [[10, "FileIO.isGlobPattern"]], "lsanymsg() (in module fileio)": [[10, "FileIO.lsAnyMsg"]], "writelinestofile() (in module fileio)": [[10, "FileIO.writeLinesToFile"]], "writetofile() (in module fileio)": [[10, "FileIO.writeToFile"]], "gensymio (module)": [[11, "module-GenSymIO"]], "null_strings_value (in module gensymio)": [[11, "GenSymIO.NULL_STRINGS_VALUE"]], "array() (in module gensymio)": [[11, "GenSymIO.array"]], "arraysegstring() (in module gensymio)": [[11, "GenSymIO.arraySegString"]], "buildreadallmsgjson() (in module gensymio)": [[11, "GenSymIO.buildReadAllMsgJson"]], "checkcast() (in module gensymio)": [[11, "GenSymIO.checkCast"]], "gslogger (in module gensymio)": [[11, "GenSymIO.gsLogger"]], "jsontomap() (in module gensymio)": [[11, "GenSymIO.jsonToMap"]], "makearrayfrombytes() (in module gensymio)": [[11, "GenSymIO.makeArrayFromBytes"]], "segmentedcalcoffsets() (in module gensymio)": [[11, "GenSymIO.segmentedCalcOffsets"]], "tondarray() (in module gensymio)": [[11, "GenSymIO.tondarray"]], "ioutils (module)": [[12, "module-IOUtils"]], "formatjson() (in module ioutils)": [[12, "IOUtils.formatJson"]], "jsontoarray() (in module ioutils)": [[12, "IOUtils.jsonToArray"]], "parsejson() (in module ioutils)": [[12, "IOUtils.parseJson"]], "in1d (module)": [[13, "module-In1d"]], "in1d() (in module in1d)": [[13, "In1d.in1d"]], "in1dar2perlocassoc() (in module in1d)": [[13, "In1d.in1dAr2PerLocAssoc"]], "in1dsort() (in module in1d)": [[13, "In1d.in1dSort"]], "consoleoutputhandler (class in logging)": [[14, "Logging.ConsoleOutputHandler"]], "fileoutputhandler (class in logging)": [[14, "Logging.FileOutputHandler"]], "logchannel (enum in logging)": [[14, "Logging.LogChannel"]], "loglevel (enum in logging)": [[14, "Logging.LogLevel"]], "logger (class in logging)": [[14, "Logging.Logger"]], "logging (module)": [[14, "module-Logging"]], "outputhandler (class in logging)": [[14, "Logging.OutputHandler"]], "critical() (logging.logger method)": [[14, "Logging.Logger.critical"]], "debug() (logging.logger method)": [[14, "Logging.Logger.debug"]], "emit() (logging.logger method)": [[14, "Logging.Logger.emit"]], "error() (logging.logger method)": [[14, "Logging.Logger.error"]], "filepath (logging.fileoutputhandler attribute)": [[14, "Logging.FileOutputHandler.filePath"]], "generatedatetimestring() (logging.logger method)": [[14, "Logging.Logger.generateDateTimeString"]], "generatelogmessage() (logging.logger method)": [[14, "Logging.Logger.generateLogMessage"]], "getoutputhandler() (in module logging)": [[14, "Logging.getOutputHandler"]], "info() (logging.logger method)": [[14, "Logging.Logger.info"]], "init() (logging.fileoutputhandler method)": [[14, "Logging.FileOutputHandler.init"]], "init() (logging.logger method)": [[14, "Logging.Logger.init"]], "level (logging.logger attribute)": [[14, "Logging.Logger.level"]], "outputhandler (logging.logger attribute)": [[14, "Logging.Logger.outputHandler"]], "printdate (logging.logger attribute)": [[14, "Logging.Logger.printDate"]], "report() (logging.logger method)": [[14, "Logging.Logger.report"]], "warn() (logging.logger method)": [[14, "Logging.Logger.warn"]], "write() (logging.consoleoutputhandler method)": [[14, "Logging.ConsoleOutputHandler.write"]], "write() (logging.fileoutputhandler method)": [[14, "Logging.FileOutputHandler.write"]], "write() (logging.outputhandler method)": [[14, "Logging.OutputHandler.write"]], "writetofile() (logging.fileoutputhandler method)": [[14, "Logging.FileOutputHandler.writeToFile"]], "localememorystatus (record in memorymgmt)": [[15, "MemoryMgmt.LocaleMemoryStatus"]], "memmgmttype (enum in memorymgmt)": [[15, "MemoryMgmt.MemMgmtType"]], "memorymgmt (module)": [[15, "module-MemoryMgmt"]], "arkouda_mem_alloc (memorymgmt.localememorystatus attribute)": [[15, "MemoryMgmt.LocaleMemoryStatus.arkouda_mem_alloc"]], "avail_mem (memorymgmt.localememorystatus attribute)": [[15, "MemoryMgmt.LocaleMemoryStatus.avail_mem"]], "availablememorypct (in module memorymgmt)": [[15, "MemoryMgmt.availableMemoryPct"]], "getarkoudamemalloc() (in module memorymgmt)": [[15, "MemoryMgmt.getArkoudaMemAlloc"]], "getarkoudapid() (in module memorymgmt)": [[15, "MemoryMgmt.getArkoudaPid"]], "getavailmemory() (in module memorymgmt)": [[15, "MemoryMgmt.getAvailMemory"]], "getlocalememorystatuses() (in module memorymgmt)": [[15, "MemoryMgmt.getLocaleMemoryStatuses"]], "gettotalmemory() (in module memorymgmt)": [[15, "MemoryMgmt.getTotalMemory"]], "ismemavailable() (in module memorymgmt)": [[15, "MemoryMgmt.isMemAvailable"]], "issupportedos() (in module memorymgmt)": [[15, "MemoryMgmt.isSupportedOS"]], "localememavailable() (in module memorymgmt)": [[15, "MemoryMgmt.localeMemAvailable"]], "locale_hostname (memorymgmt.localememorystatus attribute)": [[15, "MemoryMgmt.LocaleMemoryStatus.locale_hostname"]], "locale_id (memorymgmt.localememorystatus attribute)": [[15, "MemoryMgmt.LocaleMemoryStatus.locale_id"]], "memmgmttype (in module memorymgmt)": [[15, "MemoryMgmt.memMgmtType"]], "mem_used (memorymgmt.localememorystatus attribute)": [[15, "MemoryMgmt.LocaleMemoryStatus.mem_used"]], "mmlogger (in module memorymgmt)": [[15, "MemoryMgmt.mmLogger"]], "pct_avail_mem (memorymgmt.localememorystatus attribute)": [[15, "MemoryMgmt.LocaleMemoryStatus.pct_avail_mem"]], "total_mem (memorymgmt.localememorystatus attribute)": [[15, "MemoryMgmt.LocaleMemoryStatus.total_mem"]], "message (module)": [[16, "module-Message"]], "messageargs (class in message)": [[16, "Message.MessageArgs"]], "msgformat (enum in message)": [[16, "Message.MsgFormat"]], "msgtuple (record in message)": [[16, "Message.MsgTuple"]], "msgtype (enum in message)": [[16, "Message.MsgType"]], "parameterobj (record in message)": [[16, "Message.ParameterObj"]], "requestmsg (record in message)": [[16, "Message.RequestMsg"]], "addpayload() (message.messageargs method)": [[16, "Message.MessageArgs.addPayload"]], "args (message.requestmsg attribute)": [[16, "Message.RequestMsg.args"]], "cmd (message.requestmsg attribute)": [[16, "Message.RequestMsg.cmd"]], "contains() (message.messageargs method)": [[16, "Message.MessageArgs.contains"]], "deserialize() (in module message)": [[16, "Message.deserialize"]], "dtype (message.parameterobj attribute)": [[16, "Message.ParameterObj.dtype"]], "error() (message.msgtuple method)": [[16, "Message.MsgTuple.error"]], "format (message.requestmsg attribute)": [[16, "Message.RequestMsg.format"]], "fromresponses() (message.msgtuple method)": [[16, "Message.MsgTuple.fromResponses"]], "fromscalar() (message.msgtuple method)": [[16, "Message.MsgTuple.fromScalar"]], "get() (message.messageargs method)": [[16, "Message.MessageArgs.get"]], "getbigintvalue() (message.parameterobj method)": [[16, "Message.ParameterObj.getBigIntValue"]], "getboolvalue() (message.parameterobj method)": [[16, "Message.ParameterObj.getBoolValue"]], "getdtype() (message.parameterobj method)": [[16, "Message.ParameterObj.getDType"]], "getintvalue() (message.parameterobj method)": [[16, "Message.ParameterObj.getIntValue"]], "getlist() (message.parameterobj method)": [[16, "Message.ParameterObj.getList"]], "getpositiveintvalue() (message.parameterobj method)": [[16, "Message.ParameterObj.getPositiveIntValue"]], "getrealvalue() (message.parameterobj method)": [[16, "Message.ParameterObj.getRealValue"]], "getscalarvalue() (message.parameterobj method)": [[16, "Message.ParameterObj.getScalarValue"]], "gettuple() (message.parameterobj method)": [[16, "Message.ParameterObj.getTuple"]], "getuint8value() (message.parameterobj method)": [[16, "Message.ParameterObj.getUInt8Value"]], "getuintvalue() (message.parameterobj method)": [[16, "Message.ParameterObj.getUIntValue"]], "getvalue() (message.parameterobj method)": [[16, "Message.ParameterObj.getValue"]], "getvalueof() (message.messageargs method)": [[16, "Message.MessageArgs.getValueOf"]], "init() (message.messageargs method)": [[16, "Message.MessageArgs.init"]], "init() (message.msgtuple method)": [[16, "Message.MsgTuple.init"]], "init() (message.parameterobj method)": [[16, "Message.ParameterObj.init"]], "key (message.parameterobj attribute)": [[16, "Message.ParameterObj.key"]], "msg (message.msgtuple attribute)": [[16, "Message.MsgTuple.msg"]], "msgformat (message.msgtuple attribute)": [[16, "Message.MsgTuple.msgFormat"]], "msgtype (message.msgtuple attribute)": [[16, "Message.MsgTuple.msgType"]], "newsymbol() (message.msgtuple method)": [[16, "Message.MsgTuple.newSymbol"]], "param_list (message.messageargs attribute)": [[16, "Message.MessageArgs.param_list"]], "parsemessageargs() (in module message)": [[16, "Message.parseMessageArgs"]], "parseparameter() (in module message)": [[16, "Message.parseParameter"]], "payload (message.messageargs attribute)": [[16, "Message.MessageArgs.payload"]], "payload (message.msgtuple attribute)": [[16, "Message.MsgTuple.payload"]], "payload() (message.msgtuple method)": [[16, "Message.MsgTuple.payload"]], "serialize() (message.messageargs method)": [[16, "Message.MessageArgs.serialize"]], "serialize() (message.msgtuple method)": [[16, "Message.MsgTuple.serialize"]], "serialize() (in module message)": [[16, "Message.serialize"]], "setkey() (message.parameterobj method)": [[16, "Message.ParameterObj.setKey"]], "setval() (message.parameterobj method)": [[16, "Message.ParameterObj.setVal"]], "size (message.messageargs attribute)": [[16, "Message.MessageArgs.size"]], "size (message.requestmsg attribute)": [[16, "Message.RequestMsg.size"]], "success() (message.msgtuple method)": [[16, "Message.MsgTuple.success"]], "these() (message.messageargs iterator)": [[16, "Message.MessageArgs.these"]], "this() (message.messageargs method)": [[16, "Message.MessageArgs.this"]], "toscalar() (message.parameterobj method)": [[16, "Message.ParameterObj.toScalar"]], "toscalararray() (message.parameterobj method)": [[16, "Message.ParameterObj.toScalarArray"]], "toscalarlist() (message.parameterobj method)": [[16, "Message.ParameterObj.toScalarList"]], "toscalartuple() (message.parameterobj method)": [[16, "Message.ParameterObj.toScalarTuple"]], "token (message.requestmsg attribute)": [[16, "Message.RequestMsg.token"]], "trygetscalar() (message.parameterobj method)": [[16, "Message.ParameterObj.tryGetScalar"]], "user (message.msgtuple attribute)": [[16, "Message.MsgTuple.user"]], "user (message.requestmsg attribute)": [[16, "Message.RequestMsg.user"]], "val (message.parameterobj attribute)": [[16, "Message.ParameterObj.val"]], "warning() (message.msgtuple method)": [[16, "Message.MsgTuple.warning"]], "arraymetric (class in metricsmsg)": [[17, "MetricsMsg.ArrayMetric"]], "averagemeasurementtable (class in metricsmsg)": [[17, "MetricsMsg.AverageMeasurementTable"]], "avgmetricvalue (class in metricsmsg)": [[17, "MetricsMsg.AvgMetricValue"]], "countertable (class in metricsmsg)": [[17, "MetricsMsg.CounterTable"]], "localeinfo (class in metricsmsg)": [[17, "MetricsMsg.LocaleInfo"]], "localemetric (class in metricsmsg)": [[17, "MetricsMsg.LocaleMetric"]], "measurementtable (class in metricsmsg)": [[17, "MetricsMsg.MeasurementTable"]], "metric (class in metricsmsg)": [[17, "MetricsMsg.Metric"]], "metriccategory (enum in metricsmsg)": [[17, "MetricsMsg.MetricCategory"]], "metricdatatype (enum in metricsmsg)": [[17, "MetricsMsg.MetricDataType"]], "metricscope (enum in metricsmsg)": [[17, "MetricsMsg.MetricScope"]], "metricvalue (class in metricsmsg)": [[17, "MetricsMsg.MetricValue"]], "metricsmsg (module)": [[17, "module-MetricsMsg"]], "serverinfo (class in metricsmsg)": [[17, "MetricsMsg.ServerInfo"]], "user (record in metricsmsg)": [[17, "MetricsMsg.User"]], "usermetric (class in metricsmsg)": [[17, "MetricsMsg.UserMetric"]], "usermetrics (class in metricsmsg)": [[17, "MetricsMsg.UserMetrics"]], "users (class in metricsmsg)": [[17, "MetricsMsg.Users"]], "add() (metricsmsg.averagemeasurementtable method)": [[17, "MetricsMsg.AverageMeasurementTable.add"]], "add() (metricsmsg.measurementtable method)": [[17, "MetricsMsg.MeasurementTable.add"]], "avgresponsetimemetrics (in module metricsmsg)": [[17, "MetricsMsg.avgResponseTimeMetrics"]], "category (metricsmsg.metric attribute)": [[17, "MetricsMsg.Metric.category"]], "cmd (metricsmsg.arraymetric attribute)": [[17, "MetricsMsg.ArrayMetric.cmd"]], "counts (metricsmsg.countertable attribute)": [[17, "MetricsMsg.CounterTable.counts"]], "dtype (metricsmsg.arraymetric attribute)": [[17, "MetricsMsg.ArrayMetric.dType"]], "datatype (metricsmsg.metricvalue attribute)": [[17, "MetricsMsg.MetricValue.dataType"]], "decrement() (metricsmsg.countertable method)": [[17, "MetricsMsg.CounterTable.decrement"]], "errormetrics (in module metricsmsg)": [[17, "MetricsMsg.errorMetrics"]], "exportallmetrics() (in module metricsmsg)": [[17, "MetricsMsg.exportAllMetrics"]], "get() (metricsmsg.countertable method)": [[17, "MetricsMsg.CounterTable.get"]], "get() (metricsmsg.measurementtable method)": [[17, "MetricsMsg.MeasurementTable.get"]], "getalluserrequestmetrics() (in module metricsmsg)": [[17, "MetricsMsg.getAllUserRequestMetrics"]], "getavgresponsetimemetrics() (in module metricsmsg)": [[17, "MetricsMsg.getAvgResponseTimeMetrics"]], "getmaxlocalememory() (in module metricsmsg)": [[17, "MetricsMsg.getMaxLocaleMemory"]], "getmeasurementtotal() (metricsmsg.averagemeasurementtable method)": [[17, "MetricsMsg.AverageMeasurementTable.getMeasurementTotal"]], "getnumerrormetrics() (in module metricsmsg)": [[17, "MetricsMsg.getNumErrorMetrics"]], "getnummeasurements() (metricsmsg.averagemeasurementtable method)": [[17, "MetricsMsg.AverageMeasurementTable.getNumMeasurements"]], "getnumrequestmetrics() (in module metricsmsg)": [[17, "MetricsMsg.getNumRequestMetrics"]], "getperusernumrequestmetrics() (in module metricsmsg)": [[17, "MetricsMsg.getPerUserNumRequestMetrics"]], "getperusernumrequestspercommandforallusersmetrics() (metricsmsg.usermetrics method)": [[17, "MetricsMsg.UserMetrics.getPerUserNumRequestsPerCommandForAllUsersMetrics"]], "getperusernumrequestspercommandmetrics() (metricsmsg.usermetrics method)": [[17, "MetricsMsg.UserMetrics.getPerUserNumRequestsPerCommandMetrics"]], "getresponsetimemetrics() (in module metricsmsg)": [[17, "MetricsMsg.getResponseTimeMetrics"]], "getserverinfo() (in module metricsmsg)": [[17, "MetricsMsg.getServerInfo"]], "getservermetrics() (in module metricsmsg)": [[17, "MetricsMsg.getServerMetrics"]], "getsystemmetrics() (in module metricsmsg)": [[17, "MetricsMsg.getSystemMetrics"]], "gettotalmemoryusedmetrics() (in module metricsmsg)": [[17, "MetricsMsg.getTotalMemoryUsedMetrics"]], "gettotalresponsetimemetrics() (in module metricsmsg)": [[17, "MetricsMsg.getTotalResponseTimeMetrics"]], "getuser() (metricsmsg.users method)": [[17, "MetricsMsg.Users.getUser"]], "getusermetrics() (metricsmsg.usermetrics method)": [[17, "MetricsMsg.UserMetrics.getUserMetrics"]], "getusernames() (metricsmsg.users method)": [[17, "MetricsMsg.Users.getUserNames"]], "getuserrequestmetrics() (in module metricsmsg)": [[17, "MetricsMsg.getUserRequestMetrics"]], "getusers() (metricsmsg.users method)": [[17, "MetricsMsg.Users.getUsers"]], "hostname (metricsmsg.localeinfo attribute)": [[17, "MetricsMsg.LocaleInfo.hostname"]], "hostname (metricsmsg.serverinfo attribute)": [[17, "MetricsMsg.ServerInfo.hostname"]], "id (metricsmsg.localeinfo attribute)": [[17, "MetricsMsg.LocaleInfo.id"]], "increment() (metricsmsg.countertable method)": [[17, "MetricsMsg.CounterTable.increment"]], "incrementnumrequestspercommand() (metricsmsg.usermetrics method)": [[17, "MetricsMsg.UserMetrics.incrementNumRequestsPerCommand"]], "incrementperuserrequestmetrics() (metricsmsg.usermetrics method)": [[17, "MetricsMsg.UserMetrics.incrementPerUserRequestMetrics"]], "incrementtotalnumrequests() (metricsmsg.usermetrics method)": [[17, "MetricsMsg.UserMetrics.incrementTotalNumRequests"]], "init() (metricsmsg.arraymetric method)": [[17, "MetricsMsg.ArrayMetric.init"]], "init() (metricsmsg.localemetric method)": [[17, "MetricsMsg.LocaleMetric.init"]], "init() (metricsmsg.metric method)": [[17, "MetricsMsg.Metric.init"]], "init() (metricsmsg.metricvalue method)": [[17, "MetricsMsg.MetricValue.init"]], "init() (metricsmsg.serverinfo method)": [[17, "MetricsMsg.ServerInfo.init"]], "init() (metricsmsg.usermetric method)": [[17, "MetricsMsg.UserMetric.init"]], "inttotal (metricsmsg.avgmetricvalue attribute)": [[17, "MetricsMsg.AvgMetricValue.intTotal"]], "intvalue (metricsmsg.metricvalue attribute)": [[17, "MetricsMsg.MetricValue.intValue"]], "items() (metricsmsg.countertable iterator)": [[17, "MetricsMsg.CounterTable.items"]], "items() (metricsmsg.measurementtable iterator)": [[17, "MetricsMsg.MeasurementTable.items"]], "locale_hostname (metricsmsg.localemetric attribute)": [[17, "MetricsMsg.LocaleMetric.locale_hostname"]], "locale_name (metricsmsg.localemetric attribute)": [[17, "MetricsMsg.LocaleMetric.locale_name"]], "locale_num (metricsmsg.localemetric attribute)": [[17, "MetricsMsg.LocaleMetric.locale_num"]], "locales (metricsmsg.serverinfo attribute)": [[17, "MetricsMsg.ServerInfo.locales"]], "mlogger (in module metricsmsg)": [[17, "MetricsMsg.mLogger"]], "max_number_of_tasks (metricsmsg.localeinfo attribute)": [[17, "MetricsMsg.LocaleInfo.max_number_of_tasks"]], "measurementtotals (metricsmsg.averagemeasurementtable attribute)": [[17, "MetricsMsg.AverageMeasurementTable.measurementTotals"]], "measurements (metricsmsg.measurementtable attribute)": [[17, "MetricsMsg.MeasurementTable.measurements"]], "metricscope (in module metricsmsg)": [[17, "MetricsMsg.metricScope"]], "metrics (metricsmsg.usermetrics attribute)": [[17, "MetricsMsg.UserMetrics.metrics"]], "metricsmsg() (in module metricsmsg)": [[17, "MetricsMsg.metricsMsg"]], "name (metricsmsg.localeinfo attribute)": [[17, "MetricsMsg.LocaleInfo.name"]], "name (metricsmsg.metric attribute)": [[17, "MetricsMsg.Metric.name"]], "name (metricsmsg.user attribute)": [[17, "MetricsMsg.User.name"]], "nummeasurements (metricsmsg.averagemeasurementtable attribute)": [[17, "MetricsMsg.AverageMeasurementTable.numMeasurements"]], "numvalues (metricsmsg.avgmetricvalue attribute)": [[17, "MetricsMsg.AvgMetricValue.numValues"]], "number_of_locales (metricsmsg.serverinfo attribute)": [[17, "MetricsMsg.ServerInfo.number_of_locales"]], "number_of_processing_units (metricsmsg.localeinfo attribute)": [[17, "MetricsMsg.LocaleInfo.number_of_processing_units"]], "physical_memory (metricsmsg.localeinfo attribute)": [[17, "MetricsMsg.LocaleInfo.physical_memory"]], "realtotal (metricsmsg.avgmetricvalue attribute)": [[17, "MetricsMsg.AvgMetricValue.realTotal"]], "realvalue (metricsmsg.metricvalue attribute)": [[17, "MetricsMsg.MetricValue.realValue"]], "requestmetrics (in module metricsmsg)": [[17, "MetricsMsg.requestMetrics"]], "responsetimemetrics (in module metricsmsg)": [[17, "MetricsMsg.responseTimeMetrics"]], "scope (metricsmsg.metric attribute)": [[17, "MetricsMsg.Metric.scope"]], "servermetrics (in module metricsmsg)": [[17, "MetricsMsg.serverMetrics"]], "server_port (metricsmsg.serverinfo attribute)": [[17, "MetricsMsg.ServerInfo.server_port"]], "set() (metricsmsg.countertable method)": [[17, "MetricsMsg.CounterTable.set"]], "set() (metricsmsg.measurementtable method)": [[17, "MetricsMsg.MeasurementTable.set"]], "size (metricsmsg.arraymetric attribute)": [[17, "MetricsMsg.ArrayMetric.size"]], "size() (metricsmsg.countertable method)": [[17, "MetricsMsg.CounterTable.size"]], "size() (metricsmsg.measurementtable method)": [[17, "MetricsMsg.MeasurementTable.size"]], "timestamp (metricsmsg.metric attribute)": [[17, "MetricsMsg.Metric.timestamp"]], "total() (metricsmsg.countertable method)": [[17, "MetricsMsg.CounterTable.total"]], "totalmemoryusedmetrics (in module metricsmsg)": [[17, "MetricsMsg.totalMemoryUsedMetrics"]], "totalresponsetimemetrics (in module metricsmsg)": [[17, "MetricsMsg.totalResponseTimeMetrics"]], "update() (metricsmsg.avgmetricvalue method)": [[17, "MetricsMsg.AvgMetricValue.update"]], "update() (metricsmsg.metricvalue method)": [[17, "MetricsMsg.MetricValue.update"]], "user (metricsmsg.usermetric attribute)": [[17, "MetricsMsg.UserMetric.user"]], "usermetrics (in module metricsmsg)": [[17, "MetricsMsg.userMetrics"]], "users (metricsmsg.usermetrics attribute)": [[17, "MetricsMsg.UserMetrics.users"]], "users (metricsmsg.users attribute)": [[17, "MetricsMsg.Users.users"]], "users (in module metricsmsg)": [[17, "MetricsMsg.users"]], "value (metricsmsg.metric attribute)": [[17, "MetricsMsg.Metric.value"]], "version (metricsmsg.serverinfo attribute)": [[17, "MetricsMsg.ServerInfo.version"]], "msgprocessing (module)": [[18, "module-MsgProcessing"]], "chunkinfoasarray() (in module msgprocessing)": [[18, "MsgProcessing.chunkInfoAsArray"]], "chunkinfoasstring() (in module msgprocessing)": [[18, "MsgProcessing.chunkInfoAsString"]], "clearmsg() (in module msgprocessing)": [[18, "MsgProcessing.clearMsg"]], "create() (in module msgprocessing)": [[18, "MsgProcessing.create"]], "createscalararray() (in module msgprocessing)": [[18, "MsgProcessing.createScalarArray"]], "deletemsg() (in module msgprocessing)": [[18, "MsgProcessing.deleteMsg"]], "getcommandmapmsg() (in module msgprocessing)": [[18, "MsgProcessing.getCommandMapMsg"]], "getregistrationconfig() (in module msgprocessing)": [[18, "MsgProcessing.getRegistrationConfig"]], "getconfigmsg() (in module msgprocessing)": [[18, "MsgProcessing.getconfigMsg"]], "getmemavailmsg() (in module msgprocessing)": [[18, "MsgProcessing.getmemavailMsg"]], "getmemusedmsg() (in module msgprocessing)": [[18, "MsgProcessing.getmemusedMsg"]], "infomsg() (in module msgprocessing)": [[18, "MsgProcessing.infoMsg"]], "mplogger (in module msgprocessing)": [[18, "MsgProcessing.mpLogger"]], "reprmsg() (in module msgprocessing)": [[18, "MsgProcessing.reprMsg"]], "setmsg() (in module msgprocessing)": [[18, "MsgProcessing.setMsg"]], "strmsg() (in module msgprocessing)": [[18, "MsgProcessing.strMsg"]], "abstractregentry (class in multityperegentry)": [[19, "MultiTypeRegEntry.AbstractRegEntry"]], "arrayregentry (class in multityperegentry)": [[19, "MultiTypeRegEntry.ArrayRegEntry"]], "bitvectorregentry (class in multityperegentry)": [[19, "MultiTypeRegEntry.BitVectorRegEntry"]], "categoricalregentry (class in multityperegentry)": [[19, "MultiTypeRegEntry.CategoricalRegEntry"]], "dataframeregentry (class in multityperegentry)": [[19, "MultiTypeRegEntry.DataFrameRegEntry"]], "genregentry (class in multityperegentry)": [[19, "MultiTypeRegEntry.GenRegEntry"]], "groupbyregentry (class in multityperegentry)": [[19, "MultiTypeRegEntry.GroupByRegEntry"]], "indexregentry (class in multityperegentry)": [[19, "MultiTypeRegEntry.IndexRegEntry"]], "multityperegentry (module)": [[19, "module-MultiTypeRegEntry"]], "registryentrytype (enum in multityperegentry)": [[19, "MultiTypeRegEntry.RegistryEntryType"]], "segarrayregentry (class in multityperegentry)": [[19, "MultiTypeRegEntry.SegArrayRegEntry"]], "seriesregentry (class in multityperegentry)": [[19, "MultiTypeRegEntry.SeriesRegEntry"]], "array (multityperegentry.arrayregentry attribute)": [[19, "MultiTypeRegEntry.ArrayRegEntry.array"]], "array (multityperegentry.bitvectorregentry attribute)": [[19, "MultiTypeRegEntry.BitVectorRegEntry.array"]], "asmap() (multityperegentry.arrayregentry method)": [[19, "MultiTypeRegEntry.ArrayRegEntry.asMap"]], "asmap() (multityperegentry.bitvectorregentry method)": [[19, "MultiTypeRegEntry.BitVectorRegEntry.asMap"]], "asmap() (multityperegentry.categoricalregentry method)": [[19, "MultiTypeRegEntry.CategoricalRegEntry.asMap"]], "asmap() (multityperegentry.dataframeregentry method)": [[19, "MultiTypeRegEntry.DataFrameRegEntry.asMap"]], "asmap() (multityperegentry.groupbyregentry method)": [[19, "MultiTypeRegEntry.GroupByRegEntry.asMap"]], "asmap() (multityperegentry.indexregentry method)": [[19, "MultiTypeRegEntry.IndexRegEntry.asMap"]], "asmap() (multityperegentry.segarrayregentry method)": [[19, "MultiTypeRegEntry.SegArrayRegEntry.asMap"]], "asmap() (multityperegentry.seriesregentry method)": [[19, "MultiTypeRegEntry.SeriesRegEntry.asMap"]], "assignabletypes (multityperegentry.abstractregentry attribute)": [[19, "MultiTypeRegEntry.AbstractRegEntry.assignableTypes"]], "categories (multityperegentry.categoricalregentry attribute)": [[19, "MultiTypeRegEntry.CategoricalRegEntry.categories"]], "codes (multityperegentry.categoricalregentry attribute)": [[19, "MultiTypeRegEntry.CategoricalRegEntry.codes"]], "column_names (multityperegentry.dataframeregentry attribute)": [[19, "MultiTypeRegEntry.DataFrameRegEntry.column_names"]], "columns (multityperegentry.dataframeregentry attribute)": [[19, "MultiTypeRegEntry.DataFrameRegEntry.columns"]], "entrytype (multityperegentry.abstractregentry attribute)": [[19, "MultiTypeRegEntry.AbstractRegEntry.entryType"]], "idx (multityperegentry.dataframeregentry attribute)": [[19, "MultiTypeRegEntry.DataFrameRegEntry.idx"]], "idx (multityperegentry.indexregentry attribute)": [[19, "MultiTypeRegEntry.IndexRegEntry.idx"]], "idx (multityperegentry.seriesregentry attribute)": [[19, "MultiTypeRegEntry.SeriesRegEntry.idx"]], "init() (multityperegentry.abstractregentry method)": [[19, "MultiTypeRegEntry.AbstractRegEntry.init"]], "init() (multityperegentry.arrayregentry method)": [[19, "MultiTypeRegEntry.ArrayRegEntry.init"]], "init() (multityperegentry.bitvectorregentry method)": [[19, "MultiTypeRegEntry.BitVectorRegEntry.init"]], "init() (multityperegentry.categoricalregentry method)": [[19, "MultiTypeRegEntry.CategoricalRegEntry.init"]], "init() (multityperegentry.dataframeregentry method)": [[19, "MultiTypeRegEntry.DataFrameRegEntry.init"]], "init() (multityperegentry.genregentry method)": [[19, "MultiTypeRegEntry.GenRegEntry.init"]], "init() (multityperegentry.groupbyregentry method)": [[19, "MultiTypeRegEntry.GroupByRegEntry.init"]], "init() (multityperegentry.indexregentry method)": [[19, "MultiTypeRegEntry.IndexRegEntry.init"]], "init() (multityperegentry.segarrayregentry method)": [[19, "MultiTypeRegEntry.SegArrayRegEntry.init"]], "init() (multityperegentry.seriesregentry method)": [[19, "MultiTypeRegEntry.SeriesRegEntry.init"]], "keys (multityperegentry.groupbyregentry attribute)": [[19, "MultiTypeRegEntry.GroupByRegEntry.keys"]], "lengths (multityperegentry.segarrayregentry attribute)": [[19, "MultiTypeRegEntry.SegArrayRegEntry.lengths"]], "nacode (multityperegentry.categoricalregentry attribute)": [[19, "MultiTypeRegEntry.CategoricalRegEntry.naCode"]], "name (multityperegentry.abstractregentry attribute)": [[19, "MultiTypeRegEntry.AbstractRegEntry.name"]], "objtype (multityperegentry.genregentry attribute)": [[19, "MultiTypeRegEntry.GenRegEntry.objType"]], "permutation (multityperegentry.categoricalregentry attribute)": [[19, "MultiTypeRegEntry.CategoricalRegEntry.permutation"]], "permutation (multityperegentry.groupbyregentry attribute)": [[19, "MultiTypeRegEntry.GroupByRegEntry.permutation"]], "reglogger (in module multityperegentry)": [[19, "MultiTypeRegEntry.regLogger"]], "reverse (multityperegentry.bitvectorregentry attribute)": [[19, "MultiTypeRegEntry.BitVectorRegEntry.reverse"]], "segments (multityperegentry.categoricalregentry attribute)": [[19, "MultiTypeRegEntry.CategoricalRegEntry.segments"]], "segments (multityperegentry.groupbyregentry attribute)": [[19, "MultiTypeRegEntry.GroupByRegEntry.segments"]], "segments (multityperegentry.segarrayregentry attribute)": [[19, "MultiTypeRegEntry.SegArrayRegEntry.segments"]], "setname() (multityperegentry.abstractregentry method)": [[19, "MultiTypeRegEntry.AbstractRegEntry.setName"]], "todataframeregentry() (multityperegentry.genregentry method)": [[19, "MultiTypeRegEntry.GenRegEntry.toDataFrameRegEntry"]], "uki (multityperegentry.groupbyregentry attribute)": [[19, "MultiTypeRegEntry.GroupByRegEntry.uki"]], "values (multityperegentry.segarrayregentry attribute)": [[19, "MultiTypeRegEntry.SegArrayRegEntry.values"]], "values (multityperegentry.seriesregentry attribute)": [[19, "MultiTypeRegEntry.SeriesRegEntry.values"]], "width (multityperegentry.bitvectorregentry attribute)": [[19, "MultiTypeRegEntry.BitVectorRegEntry.width"]], "abstractsymentry (class in multitypesymentry)": [[20, "MultiTypeSymEntry.AbstractSymEntry"]], "compositesymentry (class in multitypesymentry)": [[20, "MultiTypeSymEntry.CompositeSymEntry"]], "gensparsesymentry (class in multitypesymentry)": [[20, "MultiTypeSymEntry.GenSparseSymEntry"]], "gensymentry (class in multitypesymentry)": [[20, "MultiTypeSymEntry.GenSymEntry"]], "generatorsymentry (class in multitypesymentry)": [[20, "MultiTypeSymEntry.GeneratorSymEntry"]], "multitypesymentry (module)": [[20, "module-MultiTypeSymEntry"]], "segstringsymentry (class in multitypesymentry)": [[20, "MultiTypeSymEntry.SegStringSymEntry"]], "sparsesymentry (class in multitypesymentry)": [[20, "MultiTypeSymEntry.SparseSymEntry"]], "symentry (class in multitypesymentry)": [[20, "MultiTypeSymEntry.SymEntry"]], "symbolentrytype (enum in multitypesymentry)": [[20, "MultiTypeSymEntry.SymbolEntryType"]], "a (multitypesymentry.sparsesymentry attribute)": [[20, "MultiTypeSymEntry.SparseSymEntry.a"]], "a (multitypesymentry.symentry attribute)": [[20, "MultiTypeSymEntry.SymEntry.a"]], "ad() (multitypesymentry.symentry method)": [[20, "MultiTypeSymEntry.SymEntry.aD"]], "assignabletypes (multitypesymentry.abstractsymentry attribute)": [[20, "MultiTypeSymEntry.AbstractSymEntry.assignableTypes"]], "attrib() (multitypesymentry.compositesymentry method)": [[20, "MultiTypeSymEntry.CompositeSymEntry.attrib"]], "attrib() (multitypesymentry.gensparsesymentry method)": [[20, "MultiTypeSymEntry.GenSparseSymEntry.attrib"]], "attrib() (multitypesymentry.gensymentry method)": [[20, "MultiTypeSymEntry.GenSymEntry.attrib"]], "bytesentry (multitypesymentry.segstringsymentry attribute)": [[20, "MultiTypeSymEntry.SegStringSymEntry.bytesEntry"]], "createsymentry() (in module multitypesymentry)": [[20, "MultiTypeSymEntry.createSymEntry"]], "createtypedsymentry() (in module multitypesymentry)": [[20, "MultiTypeSymEntry.createTypedSymEntry"]], "deinit() (multitypesymentry.sparsesymentry method)": [[20, "MultiTypeSymEntry.SparseSymEntry.deinit"]], "deinit() (multitypesymentry.symentry method)": [[20, "MultiTypeSymEntry.SymEntry.deinit"]], "dimensions (multitypesymentry.sparsesymentry attribute)": [[20, "MultiTypeSymEntry.SparseSymEntry.dimensions"]], "dimensions (multitypesymentry.symentry attribute)": [[20, "MultiTypeSymEntry.SymEntry.dimensions"]], "dtype (multitypesymentry.gensparsesymentry attribute)": [[20, "MultiTypeSymEntry.GenSparseSymEntry.dtype"]], "dtype (multitypesymentry.gensymentry attribute)": [[20, "MultiTypeSymEntry.GenSymEntry.dtype"]], "entrytype (multitypesymentry.abstractsymentry attribute)": [[20, "MultiTypeSymEntry.AbstractSymEntry.entryType"]], "entry__str__() (multitypesymentry.abstractsymentry method)": [[20, "MultiTypeSymEntry.AbstractSymEntry.entry__str__"]], "entry__str__() (multitypesymentry.gensparsesymentry method)": [[20, "MultiTypeSymEntry.GenSparseSymEntry.entry__str__"]], "entry__str__() (multitypesymentry.gensymentry method)": [[20, "MultiTypeSymEntry.GenSymEntry.entry__str__"]], "entry__str__() (multitypesymentry.segstringsymentry method)": [[20, "MultiTypeSymEntry.SegStringSymEntry.entry__str__"]], "entry__str__() (multitypesymentry.sparsesymentry method)": [[20, "MultiTypeSymEntry.SparseSymEntry.entry__str__"]], "entry__str__() (multitypesymentry.symentry method)": [[20, "MultiTypeSymEntry.SymEntry.entry__str__"]], "etype (multitypesymentry.generatorsymentry attribute)": [[20, "MultiTypeSymEntry.GeneratorSymEntry.etype"]], "etype (multitypesymentry.segstringsymentry attribute)": [[20, "MultiTypeSymEntry.SegStringSymEntry.etype"]], "etype (multitypesymentry.sparsesymentry attribute)": [[20, "MultiTypeSymEntry.SparseSymEntry.etype"]], "etype (multitypesymentry.symentry attribute)": [[20, "MultiTypeSymEntry.SymEntry.etype"]], "genlogger (in module multitypesymentry)": [[20, "MultiTypeSymEntry.genLogger"]], "generator (multitypesymentry.generatorsymentry attribute)": [[20, "MultiTypeSymEntry.GeneratorSymEntry.generator"]], "getarrayspecfromentry() (in module multitypesymentry)": [[20, "MultiTypeSymEntry.getArraySpecFromEntry"]], "getsizeestimate() (multitypesymentry.abstractsymentry method)": [[20, "MultiTypeSymEntry.AbstractSymEntry.getSizeEstimate"]], "getsizeestimate() (multitypesymentry.gensymentry method)": [[20, "MultiTypeSymEntry.GenSymEntry.getSizeEstimate"]], "getsizeestimate() (multitypesymentry.segstringsymentry method)": [[20, "MultiTypeSymEntry.SegStringSymEntry.getSizeEstimate"]], "init() (multitypesymentry.abstractsymentry method)": [[20, "MultiTypeSymEntry.AbstractSymEntry.init"]], "init() (multitypesymentry.compositesymentry method)": [[20, "MultiTypeSymEntry.CompositeSymEntry.init"]], "init() (multitypesymentry.gensparsesymentry method)": [[20, "MultiTypeSymEntry.GenSparseSymEntry.init"]], "init() (multitypesymentry.gensymentry method)": [[20, "MultiTypeSymEntry.GenSymEntry.init"]], "init() (multitypesymentry.generatorsymentry method)": [[20, "MultiTypeSymEntry.GeneratorSymEntry.init"]], "init() (multitypesymentry.segstringsymentry method)": [[20, "MultiTypeSymEntry.SegStringSymEntry.init"]], "init() (multitypesymentry.sparsesymentry method)": [[20, "MultiTypeSymEntry.SparseSymEntry.init"]], "init() (multitypesymentry.symentry method)": [[20, "MultiTypeSymEntry.SymEntry.init"]], "isassignableto() (multitypesymentry.abstractsymentry method)": [[20, "MultiTypeSymEntry.AbstractSymEntry.isAssignableTo"]], "itemsize (multitypesymentry.gensparsesymentry attribute)": [[20, "MultiTypeSymEntry.GenSparseSymEntry.itemsize"]], "itemsize (multitypesymentry.gensymentry attribute)": [[20, "MultiTypeSymEntry.GenSymEntry.itemsize"]], "layoutstr (multitypesymentry.gensparsesymentry attribute)": [[20, "MultiTypeSymEntry.GenSparseSymEntry.layoutStr"]], "layouttostr() (in module multitypesymentry)": [[20, "MultiTypeSymEntry.layoutToStr"]], "matlayout (multitypesymentry.sparsesymentry attribute)": [[20, "MultiTypeSymEntry.SparseSymEntry.matLayout"]], "max_bits (multitypesymentry.symentry attribute)": [[20, "MultiTypeSymEntry.SymEntry.max_bits"]], "name (multitypesymentry.abstractsymentry attribute)": [[20, "MultiTypeSymEntry.AbstractSymEntry.name"]], "ndim (multitypesymentry.compositesymentry attribute)": [[20, "MultiTypeSymEntry.CompositeSymEntry.ndim"]], "ndim (multitypesymentry.gensparsesymentry attribute)": [[20, "MultiTypeSymEntry.GenSparseSymEntry.ndim"]], "ndim (multitypesymentry.gensymentry attribute)": [[20, "MultiTypeSymEntry.GenSymEntry.ndim"]], "nnz (multitypesymentry.gensparsesymentry attribute)": [[20, "MultiTypeSymEntry.GenSparseSymEntry.nnz"]], "offsetsentry (multitypesymentry.segstringsymentry attribute)": [[20, "MultiTypeSymEntry.SegStringSymEntry.offsetsEntry"]], "setname() (multitypesymentry.abstractsymentry method)": [[20, "MultiTypeSymEntry.AbstractSymEntry.setName"]], "shape (multitypesymentry.gensparsesymentry attribute)": [[20, "MultiTypeSymEntry.GenSparseSymEntry.shape"]], "shape (multitypesymentry.gensymentry attribute)": [[20, "MultiTypeSymEntry.GenSymEntry.shape"]], "size (multitypesymentry.compositesymentry attribute)": [[20, "MultiTypeSymEntry.CompositeSymEntry.size"]], "size (multitypesymentry.gensparsesymentry attribute)": [[20, "MultiTypeSymEntry.GenSparseSymEntry.size"]], "size (multitypesymentry.gensymentry attribute)": [[20, "MultiTypeSymEntry.GenSymEntry.size"]], "state (multitypesymentry.generatorsymentry attribute)": [[20, "MultiTypeSymEntry.GeneratorSymEntry.state"]], "tocompositesymentry() (in module multitypesymentry)": [[20, "MultiTypeSymEntry.toCompositeSymEntry"]], "togensparsesymentry() (in module multitypesymentry)": [[20, "MultiTypeSymEntry.toGenSparseSymEntry"]], "togensymentry() (in module multitypesymentry)": [[20, "MultiTypeSymEntry.toGenSymEntry"]], "togeneratorsymentry() (in module multitypesymentry)": [[20, "MultiTypeSymEntry.toGeneratorSymEntry"]], "tosegstringsymentry() (in module multitypesymentry)": [[20, "MultiTypeSymEntry.toSegStringSymEntry"]], "tosparsesymentry() (multitypesymentry.gensparsesymentry method)": [[20, "MultiTypeSymEntry.GenSparseSymEntry.toSparseSymEntry"]], "tosymentry() (multitypesymentry.gensymentry method)": [[20, "MultiTypeSymEntry.GenSymEntry.toSymEntry"]], "tosymentry() (in module multitypesymentry)": [[20, "MultiTypeSymEntry.toSymEntry"]], "tupshape (multitypesymentry.sparsesymentry attribute)": [[20, "MultiTypeSymEntry.SparseSymEntry.tupShape"]], "tupshape (multitypesymentry.symentry attribute)": [[20, "MultiTypeSymEntry.SymEntry.tupShape"]], "tupshapestring() (in module multitypesymentry)": [[20, "MultiTypeSymEntry.tupShapeString"]], "multitypesymboltable (module)": [[21, "module-MultiTypeSymbolTable"]], "symtab (class in multitypesymboltable)": [[21, "MultiTypeSymbolTable.SymTab"]], "addentry() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.addEntry"]], "attrib() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.attrib"]], "checktable() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.checkTable"]], "clear() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.clear"]], "contains() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.contains"]], "datarepr() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.datarepr"]], "datastr() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.datastr"]], "deleteentry() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.deleteEntry"]], "dump() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.dump"]], "findall() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.findAll"]], "formatentry() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.formatEntry"]], "getentries() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.getEntries"]], "getgenericsparsearrayentry() (in module multitypesymboltable)": [[21, "MultiTypeSymbolTable.getGenericSparseArrayEntry"]], "getgenerictypedarrayentry() (in module multitypesymboltable)": [[21, "MultiTypeSymbolTable.getGenericTypedArrayEntry"]], "getsegstringentry() (in module multitypesymboltable)": [[21, "MultiTypeSymbolTable.getSegStringEntry"]], "info() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.info"]], "insert() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.insert"]], "memused() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.memUsed"]], "mtlogger (in module multitypesymboltable)": [[21, "MultiTypeSymbolTable.mtLogger"]], "nextname() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.nextName"]], "nid (multitypesymboltable.symtab attribute)": [[21, "MultiTypeSymbolTable.SymTab.nid"]], "parsejson() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.parseJson"]], "pretty() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.pretty"]], "registry (multitypesymboltable.symtab attribute)": [[21, "MultiTypeSymbolTable.SymTab.registry"]], "serverid (multitypesymboltable.symtab attribute)": [[21, "MultiTypeSymbolTable.SymTab.serverid"]], "tab (multitypesymboltable.symtab attribute)": [[21, "MultiTypeSymbolTable.SymTab.tab"]], "this() (multitypesymboltable.symtab method)": [[21, "MultiTypeSymbolTable.SymTab.this"]], "dtk (enum in numpydtype)": [[22, "NumPyDType.DTK"]], "dtype (enum in numpydtype)": [[22, "NumPyDType.DType"]], "numpydtype (module)": [[22, "module-NumPyDType"]], "bool2str() (in module numpydtype)": [[22, "NumPyDType.bool2str"]], "commondtype() (in module numpydtype)": [[22, "NumPyDType.commonDType"]], "divdtype() (in module numpydtype)": [[22, "NumPyDType.divDType"]], "dtype2str() (in module numpydtype)": [[22, "NumPyDType.dtype2str"]], "dtypesize() (in module numpydtype)": [[22, "NumPyDType.dtypeSize"]], "str2dtype() (in module numpydtype)": [[22, "NumPyDType.str2dtype"]], "type2fmt() (in module numpydtype)": [[22, "NumPyDType.type2fmt"]], "type2str() (in module numpydtype)": [[22, "NumPyDType.type2str"]], "typesize() (in module numpydtype)": [[22, "NumPyDType.typeSize"]], "whichdtype() (in module numpydtype)": [[22, "NumPyDType.whichDtype"]], "numericunicodes (module)": [[23, "module-NumericUnicodes"]], "allnumericunicodes (in module numericunicodes)": [[23, "NumericUnicodes.allNumericUnicodes"]], "keyscomparator (record in radixsortlsd)": [[24, "RadixSortLSD.KeysComparator"]], "keysrankscomparator (record in radixsortlsd)": [[24, "RadixSortLSD.KeysRanksComparator"]], "rslsd_numtasks (in module radixsortlsd)": [[24, "RadixSortLSD.RSLSD_numTasks"]], "rslsd_vv (in module radixsortlsd)": [[24, "RadixSortLSD.RSLSD_vv"]], "radixsortlsd (module)": [[24, "module-RadixSortLSD"]], "tasks (in module radixsortlsd)": [[24, "RadixSortLSD.Tasks"]], "calcblock() (in module radixsortlsd)": [[24, "RadixSortLSD.calcBlock"]], "calcglobalindex() (in module radixsortlsd)": [[24, "RadixSortLSD.calcGlobalIndex"]], "key() (radixsortlsd.keyscomparator method)": [[24, "RadixSortLSD.KeysComparator.key"]], "key() (radixsortlsd.keysrankscomparator method)": [[24, "RadixSortLSD.KeysRanksComparator.key"]], "numtasks (in module radixsortlsd)": [[24, "RadixSortLSD.numTasks"]], "radixsortlsd() (in module radixsortlsd)": [[24, "RadixSortLSD.radixSortLSD"]], "radixsortlsd_keys() (in module radixsortlsd)": [[24, "RadixSortLSD.radixSortLSD_keys"]], "radixsortlsd_keys_memest() (in module radixsortlsd)": [[24, "RadixSortLSD.radixSortLSD_keys_memEst"]], "radixsortlsd_memest() (in module radixsortlsd)": [[24, "RadixSortLSD.radixSortLSD_memEst"]], "radixsortlsd_ranks() (in module radixsortlsd)": [[24, "RadixSortLSD.radixSortLSD_ranks"]], "rslogger (in module radixsortlsd)": [[24, "RadixSortLSD.rsLogger"]], "vv (in module radixsortlsd)": [[24, "RadixSortLSD.vv"]], "regtab (class in registry)": [[25, "Registry.RegTab"]], "registry (module)": [[25, "module-Registry"]], "checkavailability() (registry.regtab method)": [[25, "Registry.RegTab.checkAvailability"]], "checktable() (registry.regtab method)": [[25, "Registry.RegTab.checkTable"]], "contains() (registry.regtab method)": [[25, "Registry.RegTab.contains"]], "list_registry() (registry.regtab method)": [[25, "Registry.RegTab.list_registry"]], "lookup() (registry.regtab method)": [[25, "Registry.RegTab.lookup"]], "reglogger (in module registry)": [[25, "Registry.regLogger"]], "register_array() (registry.regtab method)": [[25, "Registry.RegTab.register_array"]], "register_bitvector() (registry.regtab method)": [[25, "Registry.RegTab.register_bitvector"]], "register_categorical() (registry.regtab method)": [[25, "Registry.RegTab.register_categorical"]], "register_categorical_components() (registry.regtab method)": [[25, "Registry.RegTab.register_categorical_components"]], "register_dataframe() (registry.regtab method)": [[25, "Registry.RegTab.register_dataframe"]], "register_groupby() (registry.regtab method)": [[25, "Registry.RegTab.register_groupby"]], "register_index() (registry.regtab method)": [[25, "Registry.RegTab.register_index"]], "register_index_components() (registry.regtab method)": [[25, "Registry.RegTab.register_index_components"]], "register_segarray() (registry.regtab method)": [[25, "Registry.RegTab.register_segarray"]], "register_segarray_components() (registry.regtab method)": [[25, "Registry.RegTab.register_segarray_components"]], "register_series() (registry.regtab method)": [[25, "Registry.RegTab.register_series"]], "registered_entries (registry.regtab attribute)": [[25, "Registry.RegTab.registered_entries"]], "tab (registry.regtab attribute)": [[25, "Registry.RegTab.tab"]], "unregister_array() (registry.regtab method)": [[25, "Registry.RegTab.unregister_array"]], "unregister_bitvector() (registry.regtab method)": [[25, "Registry.RegTab.unregister_bitvector"]], "unregister_categorical() (registry.regtab method)": [[25, "Registry.RegTab.unregister_categorical"]], "unregister_categorical_components() (registry.regtab method)": [[25, "Registry.RegTab.unregister_categorical_components"]], "unregister_dataframe() (registry.regtab method)": [[25, "Registry.RegTab.unregister_dataframe"]], "unregister_groupby() (registry.regtab method)": [[25, "Registry.RegTab.unregister_groupby"]], "unregister_index() (registry.regtab method)": [[25, "Registry.RegTab.unregister_index"]], "unregister_index_components() (registry.regtab method)": [[25, "Registry.RegTab.unregister_index_components"]], "unregister_segarray() (registry.regtab method)": [[25, "Registry.RegTab.unregister_segarray"]], "unregister_segarray_components() (registry.regtab method)": [[25, "Registry.RegTab.unregister_segarray_components"]], "unregister_series() (registry.regtab method)": [[25, "Registry.RegTab.unregister_series"]], "security (module)": [[26, "module-Security"]], "generatetoken() (in module security)": [[26, "Security.generateToken"]], "getarkoudatoken() (in module security)": [[26, "Security.getArkoudaToken"]], "setarkoudatoken() (in module security)": [[26, "Security.setArkoudaToken"]], "segstringsort (module)": [[27, "module-SegStringSort"]], "stringintcomparator (record in segstringsort)": [[27, "SegStringSort.StringIntComparator"]], "calcblock() (in module segstringsort)": [[27, "SegStringSort.calcBlock"]], "calcglobalindex() (in module segstringsort)": [[27, "SegStringSort.calcGlobalIndex"]], "gatherlongstrings() (in module segstringsort)": [[27, "SegStringSort.gatherLongStrings"]], "getpivot() (in module segstringsort)": [[27, "SegStringSort.getPivot"]], "keypart() (segstringsort.stringintcomparator method)": [[27, "SegStringSort.StringIntComparator.keyPart"]], "radixsortlsd_raw() (in module segstringsort)": [[27, "SegStringSort.radixSortLSD_raw"]], "sslogger (in module segstringsort)": [[27, "SegStringSort.ssLogger"]], "twophasestringsort() (in module segstringsort)": [[27, "SegStringSort.twoPhaseStringSort"]], "segfunction (enum in segmentedcomputation)": [[28, "SegmentedComputation.SegFunction"]], "segmentedcomputation (module)": [[28, "module-SegmentedComputation"]], "computeonsegments() (in module segmentedcomputation)": [[28, "SegmentedComputation.computeOnSegments"]], "computesegmentownership() (in module segmentedcomputation)": [[28, "SegmentedComputation.computeSegmentOwnership"]], "!=() (in module segmentedstring)": [[29, "SegmentedString.!="]], "==() (in module segmentedstring)": [[29, "SegmentedString.=="]], "fixes (enum in segmentedstring)": [[29, "SegmentedString.Fixes"]], "null_strings_value (in module segmentedstring)": [[29, "SegmentedString.NULL_STRINGS_VALUE"]], "segstring (class in segmentedstring)": [[29, "SegmentedString.SegString"]], "segmentedstring (module)": [[29, "module-SegmentedString"]], "segmentedstringusehash (in module segmentedstring)": [[29, "SegmentedString.SegmentedStringUseHash"]], "arggroup() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.argGroup"]], "argsort() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.argsort"]], "assemblesegstringfromparts() (in module segmentedstring)": [[29, "SegmentedString.assembleSegStringFromParts"]], "bytestouintarr() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.bytesToUintArr"]], "capitalize() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.capitalize"]], "checkcompile() (in module segmentedstring)": [[29, "SegmentedString.checkCompile"]], "compare() (in module segmentedstring)": [[29, "SegmentedString.compare"]], "composite (segmentedstring.segstring attribute)": [[29, "SegmentedString.SegString.composite"]], "concat() (in module segmentedstring)": [[29, "SegmentedString.concat"]], "ediff() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.ediff"]], "findallmatches() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.findAllMatches"]], "findmatchlocations() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.findMatchLocations"]], "findsubstringinbytes() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.findSubstringInBytes"]], "getfixes() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.getFixes"]], "getlengths() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.getLengths"]], "getsegstring() (in module segmentedstring)": [[29, "SegmentedString.getSegString"]], "in1d() (in module segmentedstring)": [[29, "SegmentedString.in1d"]], "init() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.init"]], "interpretasbytes() (in module segmentedstring)": [[29, "SegmentedString.interpretAsBytes"]], "interpretasstring() (in module segmentedstring)": [[29, "SegmentedString.interpretAsString"]], "isdecimal() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.isDecimal"]], "islower() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.isLower"]], "isnumeric() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.isNumeric"]], "isnumericchar() (in module segmentedstring)": [[29, "SegmentedString.isNumericChar"]], "isnumericstring() (in module segmentedstring)": [[29, "SegmentedString.isNumericString"]], "issorted() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.isSorted"]], "istitle() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.isTitle"]], "isupper() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.isUpper"]], "isalnum() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.isalnum"]], "isalpha() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.isalpha"]], "isdigit() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.isdigit"]], "isempty() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.isempty"]], "isspace() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.isspace"]], "lower() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.lower"]], "memcmp() (in module segmentedstring)": [[29, "SegmentedString.memcmp"]], "nbytes (segmentedstring.segstring attribute)": [[29, "SegmentedString.SegString.nBytes"]], "name (segmentedstring.segstring attribute)": [[29, "SegmentedString.SegString.name"]], "offsets (segmentedstring.segstring attribute)": [[29, "SegmentedString.SegString.offsets"]], "peel() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.peel"]], "peelregex() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.peelRegex"]], "segstrfull() (in module segmentedstring)": [[29, "SegmentedString.segStrFull"]], "segstrwhere() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.segStrWhere"]], "show() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.show"]], "siphash() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.siphash"]], "size (segmentedstring.segstring attribute)": [[29, "SegmentedString.SegString.size"]], "sslogger (in module segmentedstring)": [[29, "SegmentedString.ssLogger"]], "stick() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.stick"]], "stringbytestouintarr() (in module segmentedstring)": [[29, "SegmentedString.stringBytesToUintArr"]], "stringcompareliteraleq() (in module segmentedstring)": [[29, "SegmentedString.stringCompareLiteralEq"]], "stringcompareliteralneq() (in module segmentedstring)": [[29, "SegmentedString.stringCompareLiteralNeq"]], "stringisalphanumeric() (in module segmentedstring)": [[29, "SegmentedString.stringIsAlphaNumeric"]], "stringisalphabetic() (in module segmentedstring)": [[29, "SegmentedString.stringIsAlphabetic"]], "stringisdecimal() (in module segmentedstring)": [[29, "SegmentedString.stringIsDecimal"]], "stringisdigit() (in module segmentedstring)": [[29, "SegmentedString.stringIsDigit"]], "stringisempty() (in module segmentedstring)": [[29, "SegmentedString.stringIsEmpty"]], "stringislower() (in module segmentedstring)": [[29, "SegmentedString.stringIsLower"]], "stringisnumeric() (in module segmentedstring)": [[29, "SegmentedString.stringIsNumeric"]], "stringisspace() (in module segmentedstring)": [[29, "SegmentedString.stringIsSpace"]], "stringistitle() (in module segmentedstring)": [[29, "SegmentedString.stringIsTitle"]], "stringisupper() (in module segmentedstring)": [[29, "SegmentedString.stringIsUpper"]], "stringsearch() (in module segmentedstring)": [[29, "SegmentedString.stringSearch"]], "strip() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.strip"]], "sub() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.sub"]], "substringsearch() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.substringSearch"]], "this() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.this"]], "title() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.title"]], "unsafecompileregex() (in module segmentedstring)": [[29, "SegmentedString.unsafeCompileRegex"]], "upper() (segmentedstring.segstring method)": [[29, "SegmentedString.SegString.upper"]], "values (segmentedstring.segstring attribute)": [[29, "SegmentedString.SegString.values"]], "bslash (in module serverconfig)": [[30, "ServerConfig.BSLASH"]], "deployment (enum in serverconfig)": [[30, "ServerConfig.Deployment"]], "escaped_quotes (in module serverconfig)": [[30, "ServerConfig.ESCAPED_QUOTES"]], "maxarraydims (in module serverconfig)": [[30, "ServerConfig.MaxArrayDims"]], "objtype (enum in serverconfig)": [[30, "ServerConfig.ObjType"]], "q (in module serverconfig)": [[30, "ServerConfig.Q"]], "qcq (in module serverconfig)": [[30, "ServerConfig.QCQ"]], "rslsd_bitsperdigit (in module serverconfig)": [[30, "ServerConfig.RSLSD_bitsPerDigit"]], "serverconfig (module)": [[30, "module-ServerConfig"]], "serverport (in module serverconfig)": [[30, "ServerConfig.ServerPort"]], "appendtoconfigstr() (in module serverconfig)": [[30, "ServerConfig.appendToConfigStr"]], "arkoudaversion (in module serverconfig)": [[30, "ServerConfig.arkoudaVersion"]], "arraydimissupported() (in module serverconfig)": [[30, "ServerConfig.arrayDimIsSupported"]], "arrayelmtypeissupported() (in module serverconfig)": [[30, "ServerConfig.arrayElmTypeIsSupported"]], "authenticate (in module serverconfig)": [[30, "ServerConfig.authenticate"]], "autoshutdown (in module serverconfig)": [[30, "ServerConfig.autoShutdown"]], "chplversionarkouda (in module serverconfig)": [[30, "ServerConfig.chplVersionArkouda"]], "createconfig() (in module serverconfig)": [[30, "ServerConfig.createConfig"]], "currenttime() (in module serverconfig)": [[30, "ServerConfig.currentTime"]], "deployment (in module serverconfig)": [[30, "ServerConfig.deployment"]], "getbyteorder() (in module serverconfig)": [[30, "ServerConfig.getByteorder"]], "getchplversion() (in module serverconfig)": [[30, "ServerConfig.getChplVersion"]], "getconfig() (in module serverconfig)": [[30, "ServerConfig.getConfig"]], "getconnecthostname() (in module serverconfig)": [[30, "ServerConfig.getConnectHostname"]], "getenv() (in module serverconfig)": [[30, "ServerConfig.getEnv"]], "getenvint() (in module serverconfig)": [[30, "ServerConfig.getEnvInt"]], "getmemlimit() (in module serverconfig)": [[30, "ServerConfig.getMemLimit"]], "getmemused() (in module serverconfig)": [[30, "ServerConfig.getMemUsed"]], "getphysicalmemhere() (in module serverconfig)": [[30, "ServerConfig.getPhysicalMemHere"]], "get_hostname() (in module serverconfig)": [[30, "ServerConfig.get_hostname"]], "logchannel (in module serverconfig)": [[30, "ServerConfig.logChannel"]], "logcommands (in module serverconfig)": [[30, "ServerConfig.logCommands"]], "loglevel (in module serverconfig)": [[30, "ServerConfig.logLevel"]], "memhighwater (in module serverconfig)": [[30, "ServerConfig.memHighWater"]], "overmemlimit() (in module serverconfig)": [[30, "ServerConfig.overMemLimit"]], "perlocalememlimit (in module serverconfig)": [[30, "ServerConfig.perLocaleMemLimit"]], "pythonversion (in module serverconfig)": [[30, "ServerConfig.pythonVersion"]], "regexmaxcaptures (in module serverconfig)": [[30, "ServerConfig.regexMaxCaptures"]], "saveusedmodules (in module serverconfig)": [[30, "ServerConfig.saveUsedModules"]], "sclogger (in module serverconfig)": [[30, "ServerConfig.scLogger"]], "serverconnectioninfo (in module serverconfig)": [[30, "ServerConfig.serverConnectionInfo"]], "serverhostname (in module serverconfig)": [[30, "ServerConfig.serverHostname"]], "serverinfonosplash (in module serverconfig)": [[30, "ServerConfig.serverInfoNoSplash"]], "splitmsgtotuple() (serverconfig.bytes method)": [[30, "ServerConfig.bytes.splitMsgToTuple"]], "splitmsgtotuple() (serverconfig.string method)": [[30, "ServerConfig.string.splitMsgToTuple"]], "trace (in module serverconfig)": [[30, "ServerConfig.trace"]], "usedmodulesfmt (in module serverconfig)": [[30, "ServerConfig.usedModulesFmt"]], "arkoudaserverdaemon (class in serverdaemon)": [[31, "ServerDaemon.ArkoudaServerDaemon"]], "defaultserverdaemon (class in serverdaemon)": [[31, "ServerDaemon.DefaultServerDaemon"]], "externalintegrationserverdaemon (class in serverdaemon)": [[31, "ServerDaemon.ExternalIntegrationServerDaemon"]], "metricsserverdaemon (class in serverdaemon)": [[31, "ServerDaemon.MetricsServerDaemon"]], "serverdaemon (module)": [[31, "module-ServerDaemon"]], "serverdaemontype (enum in serverdaemon)": [[31, "ServerDaemon.ServerDaemonType"]], "serverstatusdaemon (class in serverdaemon)": [[31, "ServerDaemon.ServerStatusDaemon"]], "activitymutex (serverdaemon.defaultserverdaemon attribute)": [[31, "ServerDaemon.DefaultServerDaemon.activityMutex"]], "arkdirectory (serverdaemon.defaultserverdaemon attribute)": [[31, "ServerDaemon.DefaultServerDaemon.arkDirectory"]], "authenticateuser() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.authenticateUser"]], "connecturl (serverdaemon.defaultserverdaemon attribute)": [[31, "ServerDaemon.DefaultServerDaemon.connectUrl"]], "context (serverdaemon.defaultserverdaemon attribute)": [[31, "ServerDaemon.DefaultServerDaemon.context"]], "context (serverdaemon.metricsserverdaemon attribute)": [[31, "ServerDaemon.MetricsServerDaemon.context"]], "context (serverdaemon.serverstatusdaemon attribute)": [[31, "ServerDaemon.ServerStatusDaemon.context"]], "createserverconnectioninfo() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.createServerConnectionInfo"]], "deleteserverconnectioninfo() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.deleteServerConnectionInfo"]], "extractrequest() (serverdaemon.arkoudaserverdaemon method)": [[31, "ServerDaemon.ArkoudaServerDaemon.extractRequest"]], "getconnecturl() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.getConnectUrl"]], "getdaemontypes() (in module serverdaemon)": [[31, "ServerDaemon.getDaemonTypes"]], "geterrorname() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.getErrorName"]], "getserverdaemon() (in module serverdaemon)": [[31, "ServerDaemon.getServerDaemon"]], "getserverdaemons() (in module serverdaemon)": [[31, "ServerDaemon.getServerDaemons"]], "idleperiodstart (serverdaemon.defaultserverdaemon attribute)": [[31, "ServerDaemon.DefaultServerDaemon.idlePeriodStart"]], "init() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.init"]], "init() (serverdaemon.metricsserverdaemon method)": [[31, "ServerDaemon.MetricsServerDaemon.init"]], "init() (serverdaemon.serverstatusdaemon method)": [[31, "ServerDaemon.ServerStatusDaemon.init"]], "initarkoudadirectory() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.initArkoudaDirectory"]], "integrationenabled() (in module serverdaemon)": [[31, "ServerDaemon.integrationEnabled"]], "metricsenabled() (in module serverdaemon)": [[31, "ServerDaemon.metricsEnabled"]], "multipleserverdaemons() (in module serverdaemon)": [[31, "ServerDaemon.multipleServerDaemons"]], "port (serverdaemon.arkoudaserverdaemon attribute)": [[31, "ServerDaemon.ArkoudaServerDaemon.port"]], "printserversplashmessage() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.printServerSplashMessage"]], "processerrormessagemetrics() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.processErrorMessageMetrics"]], "processmetrics() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.processMetrics"]], "register() (in module serverdaemon)": [[31, "ServerDaemon.register"]], "registerservercommands() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.registerServerCommands"]], "repcount (serverdaemon.defaultserverdaemon attribute)": [[31, "ServerDaemon.DefaultServerDaemon.repCount"]], "reqcount (serverdaemon.defaultserverdaemon attribute)": [[31, "ServerDaemon.DefaultServerDaemon.reqCount"]], "requestshutdown() (serverdaemon.arkoudaserverdaemon method)": [[31, "ServerDaemon.ArkoudaServerDaemon.requestShutdown"]], "requestshutdown() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.requestShutdown"]], "run() (serverdaemon.arkoudaserverdaemon method)": [[31, "ServerDaemon.ArkoudaServerDaemon.run"]], "run() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.run"]], "run() (serverdaemon.externalintegrationserverdaemon method)": [[31, "ServerDaemon.ExternalIntegrationServerDaemon.run"]], "run() (serverdaemon.metricsserverdaemon method)": [[31, "ServerDaemon.MetricsServerDaemon.run"]], "run() (serverdaemon.serverstatusdaemon method)": [[31, "ServerDaemon.ServerStatusDaemon.run"]], "sdlogger (in module serverdaemon)": [[31, "ServerDaemon.sdLogger"]], "seennotableactivity (serverdaemon.defaultserverdaemon attribute)": [[31, "ServerDaemon.DefaultServerDaemon.seenNotableActivity"]], "sendrepmsg() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.sendRepMsg"]], "serveractivitymark() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.serverActivityMark"]], "serverdaemontypes (in module serverdaemon)": [[31, "ServerDaemon.serverDaemonTypes"]], "serveridlestart() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.serverIdleStart"]], "serveridlestop() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.serverIdleStop"]], "servertoken (serverdaemon.defaultserverdaemon attribute)": [[31, "ServerDaemon.DefaultServerDaemon.serverToken"]], "shutdown() (serverdaemon.arkoudaserverdaemon method)": [[31, "ServerDaemon.ArkoudaServerDaemon.shutdown"]], "shutdown() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.shutdown"]], "shutdown() (serverdaemon.externalintegrationserverdaemon method)": [[31, "ServerDaemon.ExternalIntegrationServerDaemon.shutdown"]], "shutdowndaemon (serverdaemon.arkoudaserverdaemon attribute)": [[31, "ServerDaemon.ArkoudaServerDaemon.shutdownDaemon"]], "socket (serverdaemon.defaultserverdaemon attribute)": [[31, "ServerDaemon.DefaultServerDaemon.socket"]], "socket (serverdaemon.metricsserverdaemon attribute)": [[31, "ServerDaemon.MetricsServerDaemon.socket"]], "socket (serverdaemon.serverstatusdaemon attribute)": [[31, "ServerDaemon.ServerStatusDaemon.socket"]], "st (serverdaemon.arkoudaserverdaemon attribute)": [[31, "ServerDaemon.ArkoudaServerDaemon.st"]], "startasynccheckpointtask() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.startAsyncCheckpointTask"]], "waitforactivitymutex() (serverdaemon.defaultserverdaemon method)": [[31, "ServerDaemon.DefaultServerDaemon.waitForActivityMutex"]], "errorwithmsg (class in servererrorstrings)": [[32, "ServerErrorStrings.ErrorWithMsg"]], "servererrorstrings (module)": [[32, "module-ServerErrorStrings"]], "incompatibleargumentserror() (in module servererrorstrings)": [[32, "ServerErrorStrings.incompatibleArgumentsError"]], "msg (servererrorstrings.errorwithmsg attribute)": [[32, "ServerErrorStrings.ErrorWithMsg.msg"]], "notimplementederror() (in module servererrorstrings)": [[32, "ServerErrorStrings.notImplementedError"]], "unknownerror() (in module servererrorstrings)": [[32, "ServerErrorStrings.unknownError"]], "unknownsymbolerror() (in module servererrorstrings)": [[32, "ServerErrorStrings.unknownSymbolError"]], "unrecognizedtypeerror() (in module servererrorstrings)": [[32, "ServerErrorStrings.unrecognizedTypeError"]], "unsupportedtypeerror() (in module servererrorstrings)": [[32, "ServerErrorStrings.unsupportedTypeError"]], "argumenterror (class in servererrors)": [[33, "ServerErrors.ArgumentError"]], "configurationerror (class in servererrors)": [[33, "ServerErrors.ConfigurationError"]], "datasetnotfounderror (class in servererrors)": [[33, "ServerErrors.DatasetNotFoundError"]], "errorwithcontext (class in servererrors)": [[33, "ServerErrors.ErrorWithContext"]], "hdf5fileformaterror (class in servererrors)": [[33, "ServerErrors.HDF5FileFormatError"]], "ioerror (class in servererrors)": [[33, "ServerErrors.IOError"]], "mismatchedappenderror (class in servererrors)": [[33, "ServerErrors.MismatchedAppendError"]], "nothdf5fileerror (class in servererrors)": [[33, "ServerErrors.NotHDF5FileError"]], "notimplementederror (class in servererrors)": [[33, "ServerErrors.NotImplementedError"]], "outofboundserror (class in servererrors)": [[33, "ServerErrors.OutOfBoundsError"]], "overmemorylimiterror (class in servererrors)": [[33, "ServerErrors.OverMemoryLimitError"]], "segstringerror (class in servererrors)": [[33, "ServerErrors.SegStringError"]], "servererrors (module)": [[33, "module-ServerErrors"]], "unknownsymbolerror (class in servererrors)": [[33, "ServerErrors.UnknownSymbolError"]], "unsupportedoserror (class in servererrors)": [[33, "ServerErrors.UnsupportedOSError"]], "writemodeerror (class in servererrors)": [[33, "ServerErrors.WriteModeError"]], "errorclass (servererrors.errorwithcontext attribute)": [[33, "ServerErrors.ErrorWithContext.errorClass"]], "generateerrorcontext() (in module servererrors)": [[33, "ServerErrors.generateErrorContext"]], "geterrorwithcontext() (in module servererrors)": [[33, "ServerErrors.getErrorWithContext"]], "init() (servererrors.argumenterror method)": [[33, "ServerErrors.ArgumentError.init"]], "init() (servererrors.configurationerror method)": [[33, "ServerErrors.ConfigurationError.init"]], "init() (servererrors.datasetnotfounderror method)": [[33, "ServerErrors.DatasetNotFoundError.init"]], "init() (servererrors.errorwithcontext method)": [[33, "ServerErrors.ErrorWithContext.init"]], "init() (servererrors.hdf5fileformaterror method)": [[33, "ServerErrors.HDF5FileFormatError.init"]], "init() (servererrors.ioerror method)": [[33, "ServerErrors.IOError.init"]], "init() (servererrors.mismatchedappenderror method)": [[33, "ServerErrors.MismatchedAppendError.init"]], "init() (servererrors.nothdf5fileerror method)": [[33, "ServerErrors.NotHDF5FileError.init"]], "init() (servererrors.notimplementederror method)": [[33, "ServerErrors.NotImplementedError.init"]], "init() (servererrors.overmemorylimiterror method)": [[33, "ServerErrors.OverMemoryLimitError.init"]], "init() (servererrors.segstringerror method)": [[33, "ServerErrors.SegStringError.init"]], "init() (servererrors.unknownsymbolerror method)": [[33, "ServerErrors.UnknownSymbolError.init"]], "init() (servererrors.unsupportedoserror method)": [[33, "ServerErrors.UnsupportedOSError.init"]], "init() (servererrors.writemodeerror method)": [[33, "ServerErrors.WriteModeError.init"]], "linenumber (servererrors.errorwithcontext attribute)": [[33, "ServerErrors.ErrorWithContext.lineNumber"]], "modulename (servererrors.errorwithcontext attribute)": [[33, "ServerErrors.ErrorWithContext.moduleName"]], "publish() (servererrors.errorwithcontext method)": [[33, "ServerErrors.ErrorWithContext.publish"]], "publishmsg (servererrors.errorwithcontext attribute)": [[33, "ServerErrors.ErrorWithContext.publishMsg"]], "routinename (servererrors.errorwithcontext attribute)": [[33, "ServerErrors.ErrorWithContext.routineName"]], "siphash (module)": [[34, "module-SipHash"]], "crounds (in module siphash)": [[34, "SipHash.cROUNDS"]], "drounds (in module siphash)": [[34, "SipHash.dROUNDS"]], "shlogger (in module siphash)": [[34, "SipHash.shLogger"]], "siphash128() (in module siphash)": [[34, "SipHash.sipHash128"]], "siphash64() (in module siphash)": [[34, "SipHash.sipHash64"]], "sparsematrix (module)": [[35, "module-SparseMatrix"]], "addelementstosparsearray() (in module sparsematrix)": [[35, "SparseMatrix.addElementsToSparseArray"]], "colmajorexscan() (in module sparsematrix)": [[35, "SparseMatrix.colMajorExScan"]], "densematmatmult() (in module sparsematrix)": [[35, "SparseMatrix.denseMatMatMult"]], "fillsparsematrix() (in module sparsematrix)": [[35, "SparseMatrix.fillSparseMatrix"]], "getgrid() (in module sparsematrix)": [[35, "SparseMatrix.getGrid"]], "getlsa() (in module sparsematrix)": [[35, "SparseMatrix.getLSA"]], "getlsd() (in module sparsematrix)": [[35, "SparseMatrix.getLSD"]], "randsparsematrix() (in module sparsematrix)": [[35, "SparseMatrix.randSparseMatrix"]], "rowmajorexscan() (in module sparsematrix)": [[35, "SparseMatrix.rowMajorExScan"]], "sparsematfromarrays() (in module sparsematrix)": [[35, "SparseMatrix.sparseMatFromArrays"]], "sparsematmatmult() (in module sparsematrix)": [[35, "SparseMatrix.sparseMatMatMult"]], "sparsemattopdarray() (in module sparsematrix)": [[35, "SparseMatrix.sparseMatToPdarray"]], "layout (enum in spsmatutil)": [[36, "SpsMatUtil.Layout"]], "spsmatutil (module)": [[36, "module-SpsMatUtil"]], "accumulate() (spsmatutil.merge method)": [[36, "SpsMatUtil.merge.accumulate"]], "accumulateontostate() (spsmatutil.merge method)": [[36, "SpsMatUtil.merge.accumulateOntoState"]], "add() (spsmatutil.sparsematdat method)": [[36, "SpsMatUtil.sparseMatDat.add"]], "clone() (spsmatutil.merge method)": [[36, "SpsMatUtil.merge.clone"]], "combine() (spsmatutil.merge method)": [[36, "SpsMatUtil.merge.combine"]], "elttype (spsmatutil.merge attribute)": [[36, "SpsMatUtil.merge.eltType"]], "emptysparsedomlike() (in module spsmatutil)": [[36, "SpsMatUtil.emptySparseDomLike"]], "generate() (spsmatutil.merge method)": [[36, "SpsMatUtil.merge.generate"]], "identity() (spsmatutil.merge method)": [[36, "SpsMatUtil.merge.identity"]], "makesparsemat() (in module spsmatutil)": [[36, "SpsMatUtil.makeSparseMat"]], "merge (class in spsmatutil)": [[36, "SpsMatUtil.merge"]], "rands (in module spsmatutil)": [[36, "SpsMatUtil.rands"]], "seed (in module spsmatutil)": [[36, "SpsMatUtil.seed"]], "sparsematdat (record in spsmatutil)": [[36, "SpsMatUtil.sparseMatDat"]], "value (spsmatutil.merge attribute)": [[36, "SpsMatUtil.merge.value"]], "writesparsematrix() (in module spsmatutil)": [[36, "SpsMatUtil.writeSparseMatrix"]], "statusmsg (module)": [[37, "module-StatusMsg"]], "getmemorystatusmsg() (in module statusmsg)": [[37, "StatusMsg.getMemoryStatusMsg"]], "slogger (in module statusmsg)": [[37, "StatusMsg.sLogger"]], "dmap (enum in symarraydmap)": [[38, "SymArrayDmap.Dmap"]], "mydmap (in module symarraydmap)": [[38, "SymArrayDmap.MyDmap"]], "symarraydmap (module)": [[38, "module-SymArrayDmap"]], "makedistarray() (in module symarraydmap)": [[38, "SymArrayDmap.makeDistArray"]], "makedistdom() (in module symarraydmap)": [[38, "SymArrayDmap.makeDistDom"]], "makedistdomtype() (in module symarraydmap)": [[38, "SymArrayDmap.makeDistDomType"]], "makesparsearray() (in module symarraydmap)": [[38, "SymArrayDmap.makeSparseArray"]], "makesparsedomain() (in module symarraydmap)": [[38, "SymArrayDmap.makeSparseDomain"]], "unique (module)": [[39, "module-Unique"]], "ulogger (in module unique)": [[39, "Unique.uLogger"]], "uniquefromsorted() (in module unique)": [[39, "Unique.uniqueFromSorted"]], "uniquefromtruth() (in module unique)": [[39, "Unique.uniqueFromTruth"]], "uniquegroup() (in module unique)": [[39, "Unique.uniqueGroup"]], "uniquesort() (in module unique)": [[39, "Unique.uniqueSort"]], "uniquesortwithinverse() (in module unique)": [[39, "Unique.uniqueSortWithInverse"]], "arkouda_server (module)": [[40, "module-arkouda_server"]], "aslogger (in module arkouda_server)": [[40, "arkouda_server.asLogger"]], "main() (in module arkouda_server)": [[40, "arkouda_server.main"]], "arkoudajsoncompat (module)": [[41, "module-ArkoudaJSONCompat"]], "arkoudapythoncompat (module)": [[42, "module-ArkoudaPythonCompat"]], "function (class in arkoudapythoncompat)": [[42, "ArkoudaPythonCompat.Function"]], "interpreter (class in arkoudapythoncompat)": [[42, "ArkoudaPythonCompat.Interpreter"]], "module (class in arkoudapythoncompat)": [[42, "ArkoudaPythonCompat.Module"]], "value (class in arkoudapythoncompat)": [[42, "ArkoudaPythonCompat.Value"]], "pythonmodulesupported() (in module arkoudapythoncompat)": [[42, "ArkoudaPythonCompat.pythonModuleSupported"]], "pythonversionstring() (in module arkoudapythoncompat)": [[42, "ArkoudaPythonCompat.pythonVersionString"]], "arkoudasortcompat (module)": [[43, "module-ArkoudaSortCompat"]], "defaultcomparator() (in module arkoudasortcompat)": [[43, "ArkoudaSortCompat.defaultComparator"]], "arkoudasparsematrixcompat (module)": [[44, "module-ArkoudaSparseMatrixCompat"]], "getdensedom() (in module arkoudasparsematrixcompat)": [[44, "ArkoudaSparseMatrixCompat.getDenseDom"]], "getsparsedom() (in module arkoudasparsematrixcompat)": [[44, "ArkoudaSparseMatrixCompat.getSparseDom"]], "arkoudatimecompat (module)": [[45, "module-ArkoudaTimeCompat"]], "totalmicroseconds() (arkoudatimecompat.timedelta method)": [[45, "ArkoudaTimeCompat.timeDelta.totalMicroseconds"]], "registrationconfig (module)": [[46, "module-RegistrationConfig"]], "arraydimensionsstr (in module registrationconfig)": [[46, "RegistrationConfig.arrayDimensionsStr"]], "arraydimensionsty (in module registrationconfig)": [[46, "RegistrationConfig.arrayDimensionsTy"]], "arrayelementsty (in module registrationconfig)": [[46, "RegistrationConfig.arrayElementsTy"]], "registrationconfigspec (in module registrationconfig)": [[46, "RegistrationConfig.registrationConfigSpec"]]}})