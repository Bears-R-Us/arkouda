# Set the maximum line length to 105.
line-length = 105
extend-exclude = [
  ".git/**",                    # skip everything under .git
  "tests/deprecated/**",        # skip that entire directory tree
  "runs/**",                    # skip anything under runs/
  "*.ipynb",                    # skip all Jupyter notebooks
  "*.rst",                      # skip ReST docs                           
  "src/*",   
  "dep/*",
  ".venv/**",       
]

#   This should match the lowest supported version:
target-version = "py310"


[format]
quote-style = "double"


[lint]
# Enabled rule groups (select = [...]) and their meanings:
# ---------------------------------------------------------
# E     - pycodestyle: general code style (whitespace, indentation, etc.)
# F     - pyflakes: static analysis (undefined names, unused imports, etc.)
# I     - isort: import sorting and grouping
# D     - pydocstyle: docstring formatting and structure
# W     - pycodestyle warnings (less common than E)
# A     - flake8-builtins: avoid shadowing Python built-ins (e.g., `list`, `str`)
# B     - flake8-bugbear: common bugs, unsafe patterns, and best practices
# C4    - flake8-comprehensions: suggest better list/set/dict comprehension patterns
# EM    - flake8-errmsg: enforce raw strings or constants in exception messages
# ERA   - eradicate: detect commented-out/dead code
# N     - pep8-naming: enforce naming conventions for functions, classes, etc.
# PGH   - pygrep-hooks: regex-based anti-patterns (e.g., TODOs, secrets, fixes)
# PIE   - flake8-pie: miscellaneous Python best practices and bug prevention
# PL    - pylint: subset of useful Pylint rules
# PT    - flake8-pytest-style: pytest-specific idioms and anti-patterns
# PTH   - flake8-use-pathlib: prefer pathlib over os.path/file operations
# RET   - flake8-return: catch inconsistent or redundant return statements
# RUF   - Ruff-native: Ruff-specific rules for clarity, safety, and idioms
# SIM   - flake8-simplify: overly complex, redundant, or verbose code
# SLF   - flake8-self: warns on accessing private members of other classes
# T20   - flake8-print: flag `print()` statements in production code
# UP    - pyupgrade: recommend modern Python syntax (e.g., f-strings, `|` for union)
# YTT   - flake8-2020: flag outdated or fragile Python version checks
# E501  - enforces maximum line length
select = ["E", "F", "D", "W", "A", "B", "C4", "EM", "ERA", "N", "PGH", "PIE", "PL", "PT", "PTH", "RET","RUF", "SIM", "SLF", "T20", "UP", "YTT", "E501"] 
fixable = ["I","D"]
ignore = ["D401","D104","D205","D100","D102","D105","D103","D200","D101",
"A004","A002","A001",
"B905","B904","B028","B006","B007","B009","B010","B012","B033",
"C409","C419","C408","C416","C417","C401","EM102","EM101","EM103",
"ERA001",
"E712", #   Keep this one, it allows x == False which arkouda uses for binops
"N806","N803","N801","N815","N802","N816","N807","N818",
"PGH004","PGH003",
"PIE810","PIE808","PIE790",
"PLR0913","PLR0911","PLR0912","PLR0915","PLR1711","PLR1714","PLR2004","PLR5501","PLW2901","PLW0642","PLW0211","PLR1716","PLW0603","PLC0205",
"PT018",
"PTH113","PTH111","PTH112","PTH123","PTH207","PTH122","PTH120","PTH119",
"RET501","RET505","RET504","RET506","RET503","RET507",
"RUF010","RUF022","RUF002","RUF046","RUF005","RUF007","RUF015","RUF100","RUF021","RUF023","RUF012",
"SIM108","SIM102","SIM201","SIM110","SIM101","SIM114","SIM118","SIM300","SIM401","SIM910","SIM103","SIM115",
"SLF001",
"UP038","UP024","UP032","UP007","UP006","UP035","UP031","UP015","UP037","UP034","UP018"]


[lint.isort]
known-first-party = ["arkouda"]
force-sort-within-sections = true

[lint.pydocstyle]
convention = "numpy"  # <-- This enforces NumPy-style docstrings
